
ONYKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005670  080001e4  080001e4  000081e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000024  20000000  08005854  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000004e0  20000024  08005878  00010024  2**2
                  ALLOC
  4 ._usrstack    00000100  20000504  08005d58  00010024  2**0
                  ALLOC
  5 .ARM.attributes 0000002d  00000000  00000000  00010024  2**0
                  CONTENTS, READONLY
  6 .comment      0000002a  00000000  00000000  00010051  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000408  00000000  00000000  00010080  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000329e  00000000  00000000  00010488  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00010760  00000000  00000000  00013726  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000033d8  00000000  00000000  00023e86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00009a62  00000000  00000000  0002725e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003324  00000000  00000000  00030cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000647f  00000000  00000000  00033fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a0dc  00000000  00000000  0003a463  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 007f7bd1  00000000  00000000  0004453f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001a0  00000000  00000000  0083c110  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_pubtypes 00001469  00000000  00000000  0083c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <clkInit>:

	}
}


void clkInit() {
 80001e4:	b508      	push	{r3, lr}
	/* Konfiguracja zegara */

	/* Reset RCC (na wszelki wypadek) */
	RCC_DeInit();
 80001e6:	f004 fe37 	bl	8004e58 <RCC_DeInit>

	/* W³¹czenie HSE */
	RCC_HSEConfig(RCC_HSE_ON);
 80001ea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80001ee:	f004 fe53 	bl	8004e98 <RCC_HSEConfig>

	/* Oczekiwanie na gotowoœæ HSE */
	while (RCC_GetFlagStatus(RCC_FLAG_HSERDY) == RESET) {
 80001f2:	2031      	movs	r0, #49	; 0x31
 80001f4:	f004 ff96 	bl	8005124 <RCC_GetFlagStatus>
 80001f8:	2800      	cmp	r0, #0
 80001fa:	d0fa      	beq.n	80001f2 <clkInit+0xe>
	}

	/* W³¹czenie opóŸnieñ dla FLASH */
	FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 80001fc:	2010      	movs	r0, #16
 80001fe:	f004 f863 	bl	80042c8 <FLASH_PrefetchBufferCmd>
	FLASH_SetLatency(FLASH_Latency_2);
 8000202:	2002      	movs	r0, #2
 8000204:	f004 f84a 	bl	800429c <FLASH_SetLatency>

	/* HCLK = SYSCLK */
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8000208:	2000      	movs	r0, #0
 800020a:	f004 fe95 	bl	8004f38 <RCC_HCLKConfig>

	/* PCLK2 = HCLK */
	RCC_PCLK2Config(RCC_HCLK_Div1);
 800020e:	2000      	movs	r0, #0
 8000210:	f004 fea6 	bl	8004f60 <RCC_PCLK2Config>

	/* PCLK1 = HCLK/2 */
	RCC_PCLK1Config(RCC_HCLK_Div2);
 8000214:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000218:	f004 fe98 	bl	8004f4c <RCC_PCLK1Config>

	/* PLLCLK = 8MHz * 9 = 72 MHz */
	RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 800021c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000220:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000224:	f004 fe64 	bl	8004ef0 <RCC_PLLConfig>

	/* W³¹czenie PLL */
	RCC_PLLCmd(ENABLE);
 8000228:	2001      	movs	r0, #1
 800022a:	f004 fe6d 	bl	8004f08 <RCC_PLLCmd>

	/* Oczekiwanie na gotowoœæ PLL */
	while (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET) {
 800022e:	2039      	movs	r0, #57	; 0x39
 8000230:	f004 ff78 	bl	8005124 <RCC_GetFlagStatus>
 8000234:	2800      	cmp	r0, #0
 8000236:	d0fa      	beq.n	800022e <clkInit+0x4a>
	}

	/* Wybór PLL na zegar systemowy */
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 8000238:	2002      	movs	r0, #2
 800023a:	f004 fe6b 	bl	8004f14 <RCC_SYSCLKConfig>

	/* Oczekiwanie na wybór zegara systemowego */
	while (RCC_GetSYSCLKSource() != 0x08) {
 800023e:	f004 fe73 	bl	8004f28 <RCC_GetSYSCLKSource>
 8000242:	2808      	cmp	r0, #8
 8000244:	d1fb      	bne.n	800023e <clkInit+0x5a>
	}
}
 8000246:	bd08      	pop	{r3, pc}

08000248 <pinSetup>:

void pinSetup() {
 8000248:	b513      	push	{r0, r1, r4, lr}
	GPIO_InitTypeDef GPIO_InitStruct;

	// wlaczenie zegara dla GPIO
	RCC_APB2PeriphClockCmd(LED1_PORT_CLK | LED23_PORT_CLK, ENABLE);
 800024a:	2028      	movs	r0, #40	; 0x28
 800024c:	2101      	movs	r1, #1
 800024e:	f004 ff27 	bl	80050a0 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000258:	f004 ff2e 	bl	80050b8 <RCC_APB1PeriphClockCmd>

	// konfiguracja pinów
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
 800025c:	2310      	movs	r3, #16
 800025e:	f88d 3007 	strb.w	r3, [sp, #7]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000262:	3b0e      	subs	r3, #14
	GPIO_InitStruct.GPIO_Pin = LED1_PIN;
 8000264:	ac02      	add	r4, sp, #8
	RCC_APB2PeriphClockCmd(LED1_PORT_CLK | LED23_PORT_CLK, ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);

	// konfiguracja pinów
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
 8000266:	f88d 3006 	strb.w	r3, [sp, #6]
	GPIO_InitStruct.GPIO_Pin = LED1_PIN;
 800026a:	2320      	movs	r3, #32
 800026c:	f824 3d04 	strh.w	r3, [r4, #-4]!
	GPIO_Init(LED1_PORT, &GPIO_InitStruct);
 8000270:	4621      	mov	r1, r4
 8000272:	4805      	ldr	r0, [pc, #20]	; (8000288 <pinSetup+0x40>)
 8000274:	f004 fb29 	bl	80048ca <GPIO_Init>

	GPIO_InitStruct.GPIO_Pin = LED2_PIN | LED3_PIN;
 8000278:	2348      	movs	r3, #72	; 0x48
	GPIO_Init(LED23_PORT, &GPIO_InitStruct);
 800027a:	4804      	ldr	r0, [pc, #16]	; (800028c <pinSetup+0x44>)
 800027c:	4621      	mov	r1, r4
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_2MHz;
	GPIO_InitStruct.GPIO_Pin = LED1_PIN;
	GPIO_Init(LED1_PORT, &GPIO_InitStruct);

	GPIO_InitStruct.GPIO_Pin = LED2_PIN | LED3_PIN;
 800027e:	f8ad 3004 	strh.w	r3, [sp, #4]
	GPIO_Init(LED23_PORT, &GPIO_InitStruct);
 8000282:	f004 fb22 	bl	80048ca <GPIO_Init>

}
 8000286:	bd1c      	pop	{r2, r3, r4, pc}
 8000288:	40010c00 	.word	0x40010c00
 800028c:	40011400 	.word	0x40011400

08000290 <SD_Nvic_conf>:

void SD_Nvic_conf(){
 8000290:	b507      	push	{r0, r1, r2, lr}
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Configure the NVIC Preemption Priority Bits */
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);
 8000292:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8000296:	f003 fea5 	bl	8003fe4 <NVIC_PriorityGroupConfig>

	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;					  //ÅäÖÃSDIOÖÐ¶ÏÔ´
 800029a:	2331      	movs	r3, #49	; 0x31
 800029c:	f88d 3004 	strb.w	r3, [sp, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80002a0:	3b31      	subs	r3, #49	; 0x31
 80002a2:	f88d 3005 	strb.w	r3, [sp, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80002a6:	f88d 3006 	strb.w	r3, [sp, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
 80002aa:	a801      	add	r0, sp, #4
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);

	NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;					  //ÅäÖÃSDIOÖÐ¶ÏÔ´
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80002ac:	3301      	adds	r3, #1
 80002ae:	f88d 3007 	strb.w	r3, [sp, #7]
	NVIC_Init(&NVIC_InitStructure);
 80002b2:	f003 fea1 	bl	8003ff8 <NVIC_Init>

}
 80002b6:	bd0e      	pop	{r1, r2, r3, pc}

080002b8 <SD_Config>:

void SD_Config(void){
 80002b8:	b510      	push	{r4, lr}
	  Status = SD_Init();
 80002ba:	f000 fcfd 	bl	8000cb8 <SD_Init>
 80002be:	4c12      	ldr	r4, [pc, #72]	; (8000308 <SD_Config+0x50>)

	  if (Status == SD_OK)
 80002c0:	282a      	cmp	r0, #42	; 0x2a
	NVIC_Init(&NVIC_InitStructure);

}

void SD_Config(void){
	  Status = SD_Init();
 80002c2:	7020      	strb	r0, [r4, #0]

	  if (Status == SD_OK)
 80002c4:	d103      	bne.n	80002ce <SD_Config+0x16>
	  {
	    /*----------------- Read CSD/CID MSD registers ------------------*/
	    Status = SD_GetCardInfo(&SDCardInfo);
 80002c6:	4811      	ldr	r0, [pc, #68]	; (800030c <SD_Config+0x54>)
 80002c8:	f000 fd38 	bl	8000d3c <SD_GetCardInfo>
 80002cc:	7020      	strb	r0, [r4, #0]
	  }

	  if (Status == SD_OK)
 80002ce:	7823      	ldrb	r3, [r4, #0]
 80002d0:	2b2a      	cmp	r3, #42	; 0x2a
 80002d2:	d107      	bne.n	80002e4 <SD_Config+0x2c>
	  {
	    /*----------------- Select Card --------------------------------*/
	    Status = SD_SelectDeselect((u32) (SDCardInfo.RCA << 16));
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <SD_Config+0x54>)
 80002d6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80002da:	0400      	lsls	r0, r0, #16
 80002dc:	f000 feb2 	bl	8001044 <SD_SelectDeselect>
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <SD_Config+0x50>)
 80002e2:	7018      	strb	r0, [r3, #0]
	  }

	  if (Status == SD_OK)
 80002e4:	7823      	ldrb	r3, [r4, #0]
 80002e6:	2b2a      	cmp	r3, #42	; 0x2a
 80002e8:	d105      	bne.n	80002f6 <SD_Config+0x3e>
	  {
	    Status = SD_EnableWideBusOperation(SDIO_BusWide_4b);
 80002ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80002ee:	f000 fe67 	bl	8000fc0 <SD_EnableWideBusOperation>
 80002f2:	4b05      	ldr	r3, [pc, #20]	; (8000308 <SD_Config+0x50>)
 80002f4:	7018      	strb	r0, [r3, #0]
	  }

	  /* Set Device Transfer Mode to DMA */
	  if (Status == SD_OK)
 80002f6:	7823      	ldrb	r3, [r4, #0]
 80002f8:	2b2a      	cmp	r3, #42	; 0x2a
 80002fa:	d104      	bne.n	8000306 <SD_Config+0x4e>
	  {
	    Status = SD_SetDeviceMode(SD_DMA_MODE);//oet
 80002fc:	2000      	movs	r0, #0
 80002fe:	f000 fe97 	bl	8001030 <SD_SetDeviceMode>
 8000302:	4b01      	ldr	r3, [pc, #4]	; (8000308 <SD_Config+0x50>)
 8000304:	7018      	strb	r0, [r3, #0]
 8000306:	bd10      	pop	{r4, pc}
 8000308:	20000000 	.word	0x20000000
 800030c:	20000068 	.word	0x20000068

08000310 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000310:	b510      	push	{r4, lr}
	char path[50]={""};
 8000312:	2400      	movs	r4, #0
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000314:	f5ad 6d95 	sub.w	sp, sp, #1192	; 0x4a8
	char path[50]={""};
 8000318:	222e      	movs	r2, #46	; 0x2e
 800031a:	4621      	mov	r1, r4
 800031c:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 8000320:	f8cd 4454 	str.w	r4, [sp, #1108]	; 0x454
 8000324:	f005 f9ce 	bl	80056c4 <memset>
    DIR dirs;
    UINT bytes_saved;

    uint16_t VOL;

	clkInit();
 8000328:	f7ff ff5c 	bl	80001e4 <clkInit>
	pinSetup();
 800032c:	f7ff ff8c 	bl	8000248 <pinSetup>

	VS1003_GPIO_conf();
 8000330:	f001 fef8 	bl	8002124 <VS1003_GPIO_conf>
	VS1003_SPI_conf();
 8000334:	f001 ff3c 	bl	80021b0 <VS1003_SPI_conf>
	//VS1003_SoftwareReset();
	VS1003_Start();
 8000338:	f002 f87c 	bl	8002434 <VS1003_Start>

	SD_Nvic_conf();
 800033c:	f7ff ffa8 	bl	8000290 <SD_Nvic_conf>
	SD_Config();
 8000340:	f7ff ffba 	bl	80002b8 <SD_Config>

	//temporary
	disk_initialize(0);
 8000344:	4620      	mov	r0, r4
 8000346:	f002 f979 	bl	800263c <disk_initialize>
	res = f_mount(0, &fs);
 800034a:	4669      	mov	r1, sp
 800034c:	4620      	mov	r0, r4
 800034e:	f002 ffaf 	bl	80032b0 <f_mount>
	res = f_opendir(&dirs, path);
 8000352:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
 8000356:	3104      	adds	r1, #4
 8000358:	f50d 6091 	add.w	r0, sp, #1160	; 0x488
 800035c:	f003 fafc 	bl	8003958 <f_opendir>
	//res = f_open(&fdst, "test.txt", FA_CREATE_ALWAYS);
	//res = f_close(&fdst);
	res = f_open(&fsrc, "test.mp3", FA_READ);
 8000360:	a88c      	add	r0, sp, #560	; 0x230
 8000362:	4917      	ldr	r1, [pc, #92]	; (80003c0 <main+0xb0>)
 8000364:	2201      	movs	r2, #1
 8000366:	f002 ffb3 	bl	80032d0 <f_open>
	//res = f_close(&fdst);
	//SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);
	//SysTick_Config(9000000);
	while (1)
	{
		if ( State == MP3_Player )
 800036a:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <main+0xb4>)
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	bb2b      	cbnz	r3, 80003bc <main+0xac>
		{
			VOL = ReadRegister(SPI_VOL);
 8000370:	200b      	movs	r0, #11
 8000372:	f001 ff9f 	bl	80022b4 <ReadRegister>
			while(f_read(&fsrc, buffer, sizeof(buffer), &br) == 0)
 8000376:	e014      	b.n	80003a2 <main+0x92>
			{
			SCI_ChipSelect(RESET);
 8000378:	f001 ff5e 	bl	8002238 <SCI_ChipSelect>
			SDI_ChipSelect(SET);
 800037c:	2001      	movs	r0, #1
 800037e:	f001 ff67 	bl	8002250 <SDI_ChipSelect>
			for (i=0;i<br;i++)
 8000382:	e00a      	b.n	800039a <main+0x8a>
			{
				while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 8000384:	4810      	ldr	r0, [pc, #64]	; (80003c8 <main+0xb8>)
 8000386:	2180      	movs	r1, #128	; 0x80
 8000388:	f004 faf6 	bl	8004978 <GPIO_ReadInputDataBit>
 800038c:	2800      	cmp	r0, #0
 800038e:	d0f9      	beq.n	8000384 <main+0x74>
				SPIPutChar(buffer[i]);
 8000390:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <main+0xbc>)
 8000392:	5d18      	ldrb	r0, [r3, r4]
 8000394:	f001 ff32 	bl	80021fc <SPIPutChar>
			VOL = ReadRegister(SPI_VOL);
			while(f_read(&fsrc, buffer, sizeof(buffer), &br) == 0)
			{
			SCI_ChipSelect(RESET);
			SDI_ChipSelect(SET);
			for (i=0;i<br;i++)
 8000398:	3401      	adds	r4, #1
 800039a:	f8dd 34a4 	ldr.w	r3, [sp, #1188]	; 0x4a4
 800039e:	429c      	cmp	r4, r3
 80003a0:	d3f0      	bcc.n	8000384 <main+0x74>
	while (1)
	{
		if ( State == MP3_Player )
		{
			VOL = ReadRegister(SPI_VOL);
			while(f_read(&fsrc, buffer, sizeof(buffer), &br) == 0)
 80003a2:	f50d 6394 	add.w	r3, sp, #1184	; 0x4a0
 80003a6:	a88c      	add	r0, sp, #560	; 0x230
 80003a8:	4908      	ldr	r1, [pc, #32]	; (80003cc <main+0xbc>)
 80003aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003ae:	3304      	adds	r3, #4
 80003b0:	f003 f83b 	bl	800342a <f_read>
 80003b4:	4604      	mov	r4, r0
 80003b6:	2800      	cmp	r0, #0
 80003b8:	d1d7      	bne.n	800036a <main+0x5a>
 80003ba:	e7dd      	b.n	8000378 <main+0x68>
 80003bc:	e7fe      	b.n	80003bc <main+0xac>
 80003be:	bf00      	nop
 80003c0:	0800583e 	.word	0x0800583e
 80003c4:	20000024 	.word	0x20000024
 80003c8:	40011000 	.word	0x40011000
 80003cc:	200000b8 	.word	0x200000b8

080003d0 <showBit>:
	  }
}

//Najmniej znaczacy ma numer 0
unsigned char showBit(__IO uint16_t Bytes, unsigned char bitNum){
	return ((Bytes & (1 << bitNum) )>> bitNum);
 80003d0:	2301      	movs	r3, #1
 80003d2:	408b      	lsls	r3, r1
	   // Status = SD_SetDeviceMode(SD_INTERRUPT_MODE);
	  }
}

//Najmniej znaczacy ma numer 0
unsigned char showBit(__IO uint16_t Bytes, unsigned char bitNum){
 80003d4:	b082      	sub	sp, #8
 80003d6:	f8ad 0006 	strh.w	r0, [sp, #6]
	return ((Bytes & (1 << bitNum) )>> bitNum);
 80003da:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80003de:	b292      	uxth	r2, r2
 80003e0:	4013      	ands	r3, r2
 80003e2:	fa53 f101 	asrs.w	r1, r3, r1
}
 80003e6:	b2c8      	uxtb	r0, r1
 80003e8:	b002      	add	sp, #8
 80003ea:	4770      	bx	lr

080003ec <convert_from_bytes_to_power_of_two>:
* Input          : NumberOfBytes: number of bytes.
* Output         : None
* Return         : None
*******************************************************************************/
static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
{
 80003ec:	4603      	mov	r3, r0
  uint8_t count = 0;
 80003ee:	2000      	movs	r0, #0

  while (NumberOfBytes != 1)
 80003f0:	e002      	b.n	80003f8 <convert_from_bytes_to_power_of_two+0xc>
  {
    NumberOfBytes >>= 1;
    count++;
 80003f2:	3001      	adds	r0, #1
{
  uint8_t count = 0;

  while (NumberOfBytes != 1)
  {
    NumberOfBytes >>= 1;
 80003f4:	085b      	lsrs	r3, r3, #1
    count++;
 80003f6:	b2c0      	uxtb	r0, r0
*******************************************************************************/
static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
{
  uint8_t count = 0;

  while (NumberOfBytes != 1)
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d1fa      	bne.n	80003f2 <convert_from_bytes_to_power_of_two+0x6>
  {
    NumberOfBytes >>= 1;
    count++;
  }
  return(count);
}
 80003fc:	4770      	bx	lr

080003fe <CmdResp2Error>:
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error CmdResp2Error(void)
{
 80003fe:	b508      	push	{r3, lr}

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
  {
    status = SDIO->STA;
 8000400:	4b0d      	ldr	r3, [pc, #52]	; (8000438 <CmdResp2Error+0x3a>)
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8000404:	f013 0f45 	tst.w	r3, #69	; 0x45
 8000408:	d0fa      	beq.n	8000400 <CmdResp2Error+0x2>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 800040a:	f013 0f04 	tst.w	r3, #4
 800040e:	d004      	beq.n	800041a <CmdResp2Error+0x1c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8000410:	2004      	movs	r0, #4
 8000412:	f004 ffd1 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000416:	2003      	movs	r0, #3
 8000418:	bd08      	pop	{r3, pc}
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 800041a:	f013 0f01 	tst.w	r3, #1
 800041e:	d004      	beq.n	800042a <CmdResp2Error+0x2c>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8000420:	2001      	movs	r0, #1
 8000422:	f004 ffc9 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000426:	2001      	movs	r0, #1
 8000428:	bd08      	pop	{r3, pc}
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 800042a:	f240 50ff 	movw	r0, #1535	; 0x5ff
 800042e:	f004 ffc3 	bl	80053b8 <SDIO_ClearFlag>

  return(errorstatus);
 8000432:	202a      	movs	r0, #42	; 0x2a
}
 8000434:	bd08      	pop	{r3, pc}
 8000436:	bf00      	nop
 8000438:	40018000 	.word	0x40018000

0800043c <CmdResp1Error>:
* Input          : cmd: The sent command index.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error CmdResp1Error(uint8_t cmd)
{
 800043c:	b538      	push	{r3, r4, r5, lr}
 800043e:	4605      	mov	r5, r0

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
  {
    status = SDIO->STA;
 8000440:	4b43      	ldr	r3, [pc, #268]	; (8000550 <CmdResp1Error+0x114>)
 8000442:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8000444:	f014 0f45 	tst.w	r4, #69	; 0x45
 8000448:	d0fa      	beq.n	8000440 <CmdResp1Error+0x4>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 800044a:	f014 0f04 	tst.w	r4, #4
 800044e:	d004      	beq.n	800045a <CmdResp1Error+0x1e>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8000450:	2004      	movs	r0, #4
 8000452:	f004 ffb1 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000456:	2003      	movs	r0, #3
 8000458:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 800045a:	f014 0401 	ands.w	r4, r4, #1
 800045e:	d004      	beq.n	800046a <CmdResp1Error+0x2e>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8000460:	2001      	movs	r0, #1
 8000462:	f004 ffa9 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000466:	2001      	movs	r0, #1
 8000468:	bd38      	pop	{r3, r4, r5, pc}
  }

  /* Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 800046a:	f004 ff1c 	bl	80052a6 <SDIO_GetCommandResponse>
 800046e:	42a8      	cmp	r0, r5
 8000470:	d159      	bne.n	8000526 <CmdResp1Error+0xea>
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8000472:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8000476:	f004 ff9f 	bl	80053b8 <SDIO_ClearFlag>

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 800047a:	4620      	mov	r0, r4
 800047c:	f004 ff1a 	bl	80052b4 <SDIO_GetResponse>

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 8000480:	4b34      	ldr	r3, [pc, #208]	; (8000554 <CmdResp1Error+0x118>)
 8000482:	ea00 0303 	and.w	r3, r0, r3
 8000486:	2b00      	cmp	r3, #0
 8000488:	d03b      	beq.n	8000502 <CmdResp1Error+0xc6>
  {
    return(errorstatus);
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
 800048a:	2800      	cmp	r0, #0
 800048c:	db3b      	blt.n	8000506 <CmdResp1Error+0xca>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
 800048e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8000492:	d13a      	bne.n	800050a <CmdResp1Error+0xce>
  {
    return(SD_ADDR_MISALIGNED);
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
 8000494:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8000498:	d139      	bne.n	800050e <CmdResp1Error+0xd2>
  {
    return(SD_BLOCK_LEN_ERR);
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
 800049a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 800049e:	d138      	bne.n	8000512 <CmdResp1Error+0xd6>
  {
    return(SD_ERASE_SEQ_ERR);
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
 80004a0:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 80004a4:	d137      	bne.n	8000516 <CmdResp1Error+0xda>
  {
    return(SD_BAD_ERASE_PARAM);
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
 80004a6:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80004aa:	d136      	bne.n	800051a <CmdResp1Error+0xde>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
 80004ac:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80004b0:	d135      	bne.n	800051e <CmdResp1Error+0xe2>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
 80004b2:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80004b6:	d134      	bne.n	8000522 <CmdResp1Error+0xe6>
  {
    return(SD_COM_CRC_FAILED);
  }

  if (response_r1 & SD_OCR_ILLEGAL_CMD)
 80004b8:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80004bc:	d133      	bne.n	8000526 <CmdResp1Error+0xea>
  {
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
 80004be:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 80004c2:	d132      	bne.n	800052a <CmdResp1Error+0xee>
  {
    return(SD_CARD_ECC_FAILED);
  }

  if (response_r1 & SD_OCR_CC_ERROR)
 80004c4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 80004c8:	d131      	bne.n	800052e <CmdResp1Error+0xf2>
  {
    return(SD_CC_ERROR);
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 80004ca:	f410 2f00 	tst.w	r0, #524288	; 0x80000
 80004ce:	d130      	bne.n	8000532 <CmdResp1Error+0xf6>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
 80004d0:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 80004d4:	d12f      	bne.n	8000536 <CmdResp1Error+0xfa>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
 80004d6:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 80004da:	d12e      	bne.n	800053a <CmdResp1Error+0xfe>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
 80004dc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 80004e0:	d12d      	bne.n	800053e <CmdResp1Error+0x102>
  {
    return(SD_CID_CSD_OVERWRITE);
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
 80004e2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80004e6:	d12c      	bne.n	8000542 <CmdResp1Error+0x106>
  {
    return(SD_WP_ERASE_SKIP);
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
 80004e8:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 80004ec:	d12b      	bne.n	8000546 <CmdResp1Error+0x10a>
  {
    return(SD_CARD_ECC_DISABLED);
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
 80004ee:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 80004f2:	d12a      	bne.n	800054a <CmdResp1Error+0x10e>
  {
    return(SD_ERASE_RESET);
  }

  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
 80004f4:	f000 0008 	and.w	r0, r0, #8
  {
    return(SD_AKE_SEQ_ERROR);
 80004f8:	2800      	cmp	r0, #0
 80004fa:	bf0c      	ite	eq
 80004fc:	202a      	moveq	r0, #42	; 0x2a
 80004fe:	201a      	movne	r0, #26
 8000500:	bd38      	pop	{r3, r4, r5, pc}
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);

  if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
  {
    return(errorstatus);
 8000502:	202a      	movs	r0, #42	; 0x2a
 8000504:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8000506:	201c      	movs	r0, #28
 8000508:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 800050a:	2009      	movs	r0, #9
 800050c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 800050e:	200a      	movs	r0, #10
 8000510:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 8000512:	200b      	movs	r0, #11
 8000514:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 8000516:	200c      	movs	r0, #12
 8000518:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 800051a:	200d      	movs	r0, #13
 800051c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 800051e:	200e      	movs	r0, #14
 8000520:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 8000522:	200f      	movs	r0, #15
 8000524:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ILLEGAL_CMD)
  {
    return(SD_ILLEGAL_CMD);
 8000526:	2010      	movs	r0, #16
 8000528:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 800052a:	2011      	movs	r0, #17
 800052c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 800052e:	2012      	movs	r0, #18
 8000530:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8000532:	2013      	movs	r0, #19
 8000534:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 8000536:	2014      	movs	r0, #20
 8000538:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 800053a:	2015      	movs	r0, #21
 800053c:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
  {
    return(SD_CID_CSD_OVERWRITE);
 800053e:	2016      	movs	r0, #22
 8000540:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 8000542:	2017      	movs	r0, #23
 8000544:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 8000546:	2018      	movs	r0, #24
 8000548:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (response_r1 & SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 800054a:	2019      	movs	r0, #25
  if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
  {
    return(SD_AKE_SEQ_ERROR);
  }
  return(errorstatus);
}
 800054c:	bd38      	pop	{r3, r4, r5, pc}
 800054e:	bf00      	nop
 8000550:	40018000 	.word	0x40018000
 8000554:	fdffe008 	.word	0xfdffe008

08000558 <IsCardProgramming>:
*                  card state.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error IsCardProgramming(uint8_t *pstatus)
{
 8000558:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 800055a:	4a5d      	ldr	r2, [pc, #372]	; (80006d0 <IsCardProgramming+0x178>)
*                  card state.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error IsCardProgramming(uint8_t *pstatus)
{
 800055c:	4604      	mov	r4, r0
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	485c      	ldr	r0, [pc, #368]	; (80006d4 <IsCardProgramming+0x17c>)
 8000562:	0412      	lsls	r2, r2, #16
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error IsCardProgramming(uint8_t *pstatus)
{
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;
 8000564:	2300      	movs	r3, #0

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8000566:	6002      	str	r2, [r0, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 8000568:	220d      	movs	r2, #13
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error IsCardProgramming(uint8_t *pstatus)
{
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;
 800056a:	9301      	str	r3, [sp, #4]

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 800056c:	6042      	str	r2, [r0, #4]
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error IsCardProgramming(uint8_t *pstatus)
{
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;
 800056e:	9300      	str	r3, [sp, #0]

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000570:	3233      	adds	r2, #51	; 0x33
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000572:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000574:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SD_Error errorstatus = SD_OK;
  __IO uint32_t respR1 = 0, status = 0;

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000578:	6082      	str	r2, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800057a:	6103      	str	r3, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800057c:	f004 fe74 	bl	8005268 <SDIO_SendCommand>

  status = SDIO->STA;
  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
  {
    status = SDIO->STA;
 8000580:	4b55      	ldr	r3, [pc, #340]	; (80006d8 <IsCardProgramming+0x180>)
 8000582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000584:	9300      	str	r3, [sp, #0]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  status = SDIO->STA;
  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8000586:	9b00      	ldr	r3, [sp, #0]
 8000588:	f013 0f45 	tst.w	r3, #69	; 0x45
 800058c:	d0f8      	beq.n	8000580 <IsCardProgramming+0x28>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 800058e:	9b00      	ldr	r3, [sp, #0]
 8000590:	f013 0f04 	tst.w	r3, #4
 8000594:	d004      	beq.n	80005a0 <IsCardProgramming+0x48>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8000596:	2004      	movs	r0, #4
 8000598:	f004 ff0e 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 800059c:	2003      	movs	r0, #3
 800059e:	e095      	b.n	80006cc <IsCardProgramming+0x174>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 80005a0:	9d00      	ldr	r5, [sp, #0]
 80005a2:	f015 0501 	ands.w	r5, r5, #1
 80005a6:	d004      	beq.n	80005b2 <IsCardProgramming+0x5a>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 80005a8:	2001      	movs	r0, #1
 80005aa:	f004 ff05 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 80005ae:	2001      	movs	r0, #1
 80005b0:	e08c      	b.n	80006cc <IsCardProgramming+0x174>
  }

  status = (uint32_t)SDIO_GetCommandResponse();
 80005b2:	f004 fe78 	bl	80052a6 <SDIO_GetCommandResponse>
 80005b6:	9000      	str	r0, [sp, #0]

  /* Check response received is of desired command */
  if (status != SDIO_SEND_STATUS)
 80005b8:	9b00      	ldr	r3, [sp, #0]
 80005ba:	2b0d      	cmp	r3, #13
 80005bc:	d173      	bne.n	80006a6 <IsCardProgramming+0x14e>
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80005be:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80005c2:	f004 fef9 	bl	80053b8 <SDIO_ClearFlag>


  /* We have received response, retrieve it for analysis  */
  respR1 = SDIO_GetResponse(SDIO_RESP1);
 80005c6:	4628      	mov	r0, r5
 80005c8:	f004 fe74 	bl	80052b4 <SDIO_GetResponse>
 80005cc:	9001      	str	r0, [sp, #4]

  /* Find out card status */
  *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
 80005ce:	9b01      	ldr	r3, [sp, #4]

  if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 80005d0:	9a01      	ldr	r2, [sp, #4]

  /* We have received response, retrieve it for analysis  */
  respR1 = SDIO_GetResponse(SDIO_RESP1);

  /* Find out card status */
  *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
 80005d2:	0a5b      	lsrs	r3, r3, #9
 80005d4:	f003 030f 	and.w	r3, r3, #15
 80005d8:	7023      	strb	r3, [r4, #0]

  if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 80005da:	4b40      	ldr	r3, [pc, #256]	; (80006dc <IsCardProgramming+0x184>)
 80005dc:	ea02 0303 	and.w	r3, r2, r3
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d04e      	beq.n	8000682 <IsCardProgramming+0x12a>
  {
    return(errorstatus);
  }

  if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
 80005e4:	9b01      	ldr	r3, [sp, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	db4d      	blt.n	8000686 <IsCardProgramming+0x12e>
  {
    return(SD_ADDR_OUT_OF_RANGE);
  }

  if (respR1 & SD_OCR_ADDR_MISALIGNED)
 80005ea:	9b01      	ldr	r3, [sp, #4]
 80005ec:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80005f0:	d14b      	bne.n	800068a <IsCardProgramming+0x132>
  {
    return(SD_ADDR_MISALIGNED);
  }

  if (respR1 & SD_OCR_BLOCK_LEN_ERR)
 80005f2:	9b01      	ldr	r3, [sp, #4]
 80005f4:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80005f8:	d149      	bne.n	800068e <IsCardProgramming+0x136>
  {
    return(SD_BLOCK_LEN_ERR);
  }

  if (respR1 & SD_OCR_ERASE_SEQ_ERR)
 80005fa:	9b01      	ldr	r3, [sp, #4]
 80005fc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000600:	d147      	bne.n	8000692 <IsCardProgramming+0x13a>
  {
    return(SD_ERASE_SEQ_ERR);
  }

  if (respR1 & SD_OCR_BAD_ERASE_PARAM)
 8000602:	9b01      	ldr	r3, [sp, #4]
 8000604:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8000608:	d145      	bne.n	8000696 <IsCardProgramming+0x13e>
  {
    return(SD_BAD_ERASE_PARAM);
  }

  if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
 800060a:	9b01      	ldr	r3, [sp, #4]
 800060c:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8000610:	d143      	bne.n	800069a <IsCardProgramming+0x142>
  {
    return(SD_WRITE_PROT_VIOLATION);
  }

  if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
 8000612:	9b01      	ldr	r3, [sp, #4]
 8000614:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000618:	d141      	bne.n	800069e <IsCardProgramming+0x146>
  {
    return(SD_LOCK_UNLOCK_FAILED);
  }

  if (respR1 & SD_OCR_COM_CRC_FAILED)
 800061a:	9b01      	ldr	r3, [sp, #4]
 800061c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8000620:	d13f      	bne.n	80006a2 <IsCardProgramming+0x14a>
  {
    return(SD_COM_CRC_FAILED);
  }

  if (respR1 & SD_OCR_ILLEGAL_CMD)
 8000622:	9b01      	ldr	r3, [sp, #4]
 8000624:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000628:	d13d      	bne.n	80006a6 <IsCardProgramming+0x14e>
  {
    return(SD_ILLEGAL_CMD);
  }

  if (respR1 & SD_OCR_CARD_ECC_FAILED)
 800062a:	9b01      	ldr	r3, [sp, #4]
 800062c:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8000630:	d13b      	bne.n	80006aa <IsCardProgramming+0x152>
  {
    return(SD_CARD_ECC_FAILED);
  }

  if (respR1 & SD_OCR_CC_ERROR)
 8000632:	9b01      	ldr	r3, [sp, #4]
 8000634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000638:	d139      	bne.n	80006ae <IsCardProgramming+0x156>
  {
    return(SD_CC_ERROR);
  }

  if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 800063a:	9b01      	ldr	r3, [sp, #4]
 800063c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000640:	d137      	bne.n	80006b2 <IsCardProgramming+0x15a>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }

  if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
 8000642:	9b01      	ldr	r3, [sp, #4]
 8000644:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8000648:	d135      	bne.n	80006b6 <IsCardProgramming+0x15e>
  {
    return(SD_STREAM_READ_UNDERRUN);
  }

  if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
 800064a:	9b01      	ldr	r3, [sp, #4]
 800064c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000650:	d133      	bne.n	80006ba <IsCardProgramming+0x162>
  {
    return(SD_STREAM_WRITE_OVERRUN);
  }

  if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
 8000652:	9b01      	ldr	r3, [sp, #4]
 8000654:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000658:	d131      	bne.n	80006be <IsCardProgramming+0x166>
  {
    return(SD_CID_CSD_OVERWRITE);
  }

  if (respR1 & SD_OCR_WP_ERASE_SKIP)
 800065a:	9b01      	ldr	r3, [sp, #4]
 800065c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000660:	d12f      	bne.n	80006c2 <IsCardProgramming+0x16a>
  {
    return(SD_WP_ERASE_SKIP);
  }

  if (respR1 & SD_OCR_CARD_ECC_DISABLED)
 8000662:	9b01      	ldr	r3, [sp, #4]
 8000664:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8000668:	d12d      	bne.n	80006c6 <IsCardProgramming+0x16e>
  {
    return(SD_CARD_ECC_DISABLED);
  }

  if (respR1 & SD_OCR_ERASE_RESET)
 800066a:	9b01      	ldr	r3, [sp, #4]
 800066c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000670:	d12b      	bne.n	80006ca <IsCardProgramming+0x172>
  {
    return(SD_ERASE_RESET);
  }

  if (respR1 & SD_OCR_AKE_SEQ_ERROR)
 8000672:	9801      	ldr	r0, [sp, #4]
 8000674:	f000 0008 	and.w	r0, r0, #8
  {
    return(SD_AKE_SEQ_ERROR);
 8000678:	2800      	cmp	r0, #0
 800067a:	bf0c      	ite	eq
 800067c:	202a      	moveq	r0, #42	; 0x2a
 800067e:	201a      	movne	r0, #26
 8000680:	e024      	b.n	80006cc <IsCardProgramming+0x174>
  /* Find out card status */
  *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);

  if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
  {
    return(errorstatus);
 8000682:	202a      	movs	r0, #42	; 0x2a
 8000684:	e022      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
  {
    return(SD_ADDR_OUT_OF_RANGE);
 8000686:	201c      	movs	r0, #28
 8000688:	e020      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_ADDR_MISALIGNED)
  {
    return(SD_ADDR_MISALIGNED);
 800068a:	2009      	movs	r0, #9
 800068c:	e01e      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_BLOCK_LEN_ERR)
  {
    return(SD_BLOCK_LEN_ERR);
 800068e:	200a      	movs	r0, #10
 8000690:	e01c      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_ERASE_SEQ_ERR)
  {
    return(SD_ERASE_SEQ_ERR);
 8000692:	200b      	movs	r0, #11
 8000694:	e01a      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_BAD_ERASE_PARAM)
  {
    return(SD_BAD_ERASE_PARAM);
 8000696:	200c      	movs	r0, #12
 8000698:	e018      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
  {
    return(SD_WRITE_PROT_VIOLATION);
 800069a:	200d      	movs	r0, #13
 800069c:	e016      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
  {
    return(SD_LOCK_UNLOCK_FAILED);
 800069e:	200e      	movs	r0, #14
 80006a0:	e014      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_COM_CRC_FAILED)
  {
    return(SD_COM_CRC_FAILED);
 80006a2:	200f      	movs	r0, #15
 80006a4:	e012      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_ILLEGAL_CMD)
  {
    return(SD_ILLEGAL_CMD);
 80006a6:	2010      	movs	r0, #16
 80006a8:	e010      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_CARD_ECC_FAILED)
  {
    return(SD_CARD_ECC_FAILED);
 80006aa:	2011      	movs	r0, #17
 80006ac:	e00e      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_CC_ERROR)
  {
    return(SD_CC_ERROR);
 80006ae:	2012      	movs	r0, #18
 80006b0:	e00c      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 80006b2:	2013      	movs	r0, #19
 80006b4:	e00a      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
  {
    return(SD_STREAM_READ_UNDERRUN);
 80006b6:	2014      	movs	r0, #20
 80006b8:	e008      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
  {
    return(SD_STREAM_WRITE_OVERRUN);
 80006ba:	2015      	movs	r0, #21
 80006bc:	e006      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
  {
    return(SD_CID_CSD_OVERWRITE);
 80006be:	2016      	movs	r0, #22
 80006c0:	e004      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_WP_ERASE_SKIP)
  {
    return(SD_WP_ERASE_SKIP);
 80006c2:	2017      	movs	r0, #23
 80006c4:	e002      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_CARD_ECC_DISABLED)
  {
    return(SD_CARD_ECC_DISABLED);
 80006c6:	2018      	movs	r0, #24
 80006c8:	e000      	b.n	80006cc <IsCardProgramming+0x174>
  }

  if (respR1 & SD_OCR_ERASE_RESET)
  {
    return(SD_ERASE_RESET);
 80006ca:	2019      	movs	r0, #25
  {
    return(SD_AKE_SEQ_ERROR);
  }

  return(errorstatus);
}
 80006cc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80006ce:	bf00      	nop
 80006d0:	20000028 	.word	0x20000028
 80006d4:	200004b8 	.word	0x200004b8
 80006d8:	40018000 	.word	0x40018000
 80006dc:	fdffe008 	.word	0xfdffe008

080006e0 <DMA_TxConfiguration>:
*                  - BufferSize: buffer size
* Output         : None
* Return         : None
*******************************************************************************/
static void DMA_TxConfiguration(uint32_t *BufferSRC, uint32_t BufferSize)
{
 80006e0:	b530      	push	{r4, r5, lr}
 80006e2:	4605      	mov	r5, r0
 80006e4:	b08d      	sub	sp, #52	; 0x34
  DMA_InitTypeDef DMA_InitStructure;

  DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 80006e6:	4814      	ldr	r0, [pc, #80]	; (8000738 <DMA_TxConfiguration+0x58>)
*                  - BufferSize: buffer size
* Output         : None
* Return         : None
*******************************************************************************/
static void DMA_TxConfiguration(uint32_t *BufferSRC, uint32_t BufferSize)
{
 80006e8:	460c      	mov	r4, r1
  DMA_InitTypeDef DMA_InitStructure;

  DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 80006ea:	f003 fdaf 	bl	800424c <DMA_ClearFlag>

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4812      	ldr	r0, [pc, #72]	; (800073c <DMA_TxConfiguration+0x5c>)
 80006f2:	f003 fd82 	bl	80041fa <DMA_Cmd>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80006f6:	2280      	movs	r2, #128	; 0x80

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <DMA_TxConfiguration+0x60>)
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80006fa:	9206      	str	r2, [sp, #24]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 80006fc:	f44f 7200 	mov.w	r2, #512	; 0x200

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 8000700:	9301      	str	r3, [sp, #4]
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8000702:	9207      	str	r2, [sp, #28]
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 8000704:	2310      	movs	r3, #16
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000706:	f44f 6200 	mov.w	r2, #2048	; 0x800
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 800070a:	9303      	str	r3, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800070c:	9208      	str	r2, [sp, #32]
  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800070e:	3b10      	subs	r3, #16
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000710:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000714:	a901      	add	r1, sp, #4

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 8000716:	08a4      	lsrs	r4, r4, #2
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000718:	4808      	ldr	r0, [pc, #32]	; (800073c <DMA_TxConfiguration+0x5c>)
  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
 800071a:	9502      	str	r5, [sp, #8]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 800071c:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800071e:	9305      	str	r3, [sp, #20]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8000720:	9309      	str	r3, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000722:	920a      	str	r2, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000724:	930b      	str	r3, [sp, #44]	; 0x2c
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000726:	f003 fd3b 	bl	80041a0 <DMA_Init>

  /* DMA2 Channel4 enable */
  DMA_Cmd(DMA2_Channel4, ENABLE);
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <DMA_TxConfiguration+0x5c>)
 800072c:	2101      	movs	r1, #1
 800072e:	f003 fd64 	bl	80041fa <DMA_Cmd>
}
 8000732:	b00d      	add	sp, #52	; 0x34
 8000734:	bd30      	pop	{r4, r5, pc}
 8000736:	bf00      	nop
 8000738:	1000f000 	.word	0x1000f000
 800073c:	40020444 	.word	0x40020444
 8000740:	40018080 	.word	0x40018080

08000744 <DMA_RxConfiguration>:
*                  - BufferSize: buffer size
* Output         : None
* Return         : None
*******************************************************************************/
static void DMA_RxConfiguration(uint32_t *BufferDST, uint32_t BufferSize)
{
 8000744:	b530      	push	{r4, r5, lr}
 8000746:	4605      	mov	r5, r0
 8000748:	b08d      	sub	sp, #52	; 0x34
  DMA_InitTypeDef DMA_InitStructure;

  DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 800074a:	4813      	ldr	r0, [pc, #76]	; (8000798 <DMA_RxConfiguration+0x54>)
*                  - BufferSize: buffer size
* Output         : None
* Return         : None
*******************************************************************************/
static void DMA_RxConfiguration(uint32_t *BufferDST, uint32_t BufferSize)
{
 800074c:	460c      	mov	r4, r1
  DMA_InitTypeDef DMA_InitStructure;

  DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 800074e:	f003 fd7d 	bl	800424c <DMA_ClearFlag>

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);
 8000752:	2100      	movs	r1, #0
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <DMA_RxConfiguration+0x58>)
 8000756:	f003 fd50 	bl	80041fa <DMA_Cmd>
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800075a:	2280      	movs	r2, #128	; 0x80
 800075c:	9206      	str	r2, [sp, #24]

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <DMA_RxConfiguration+0x5c>)
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8000760:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000764:	9207      	str	r2, [sp, #28]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8000766:	f44f 6200 	mov.w	r2, #2048	; 0x800

  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 800076a:	9301      	str	r3, [sp, #4]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 800076c:	9208      	str	r2, [sp, #32]
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800076e:	2300      	movs	r3, #0
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000770:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000774:	a901      	add	r1, sp, #4

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 8000776:	08a4      	lsrs	r4, r4, #2
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <DMA_RxConfiguration+0x58>)
  /* DMA2 Channel4 disable */
  DMA_Cmd(DMA2_Channel4, DISABLE);

  /* DMA2 Channel4 Config */
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
  DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
 800077a:	9502      	str	r5, [sp, #8]
  DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 800077c:	9303      	str	r3, [sp, #12]
  DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 800077e:	9404      	str	r4, [sp, #16]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000780:	9305      	str	r3, [sp, #20]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8000782:	9309      	str	r3, [sp, #36]	; 0x24
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 8000784:	920a      	str	r2, [sp, #40]	; 0x28
  DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 8000786:	930b      	str	r3, [sp, #44]	; 0x2c
  DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 8000788:	f003 fd0a 	bl	80041a0 <DMA_Init>

  /* DMA2 Channel4 enable */
  DMA_Cmd(DMA2_Channel4, ENABLE);
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <DMA_RxConfiguration+0x58>)
 800078e:	2101      	movs	r1, #1
 8000790:	f003 fd33 	bl	80041fa <DMA_Cmd>
}
 8000794:	b00d      	add	sp, #52	; 0x34
 8000796:	bd30      	pop	{r4, r5, pc}
 8000798:	1000f000 	.word	0x1000f000
 800079c:	40020444 	.word	0x40020444
 80007a0:	40018080 	.word	0x40018080

080007a4 <SDEnWideBus>:
*                  This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
static SD_Error SDEnWideBus(FunctionalState NewState)
{
 80007a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a8:	4681      	mov	r9, r0
  SD_Error errorstatus = SD_OK;

  uint32_t scr[2] = {0, 0};

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 80007aa:	2000      	movs	r0, #0
 80007ac:	f004 fd82 	bl	80052b4 <SDIO_GetResponse>
 80007b0:	f010 7500 	ands.w	r5, r0, #33554432	; 0x2000000
 80007b4:	f040 80dc 	bne.w	8000970 <SDEnWideBus+0x1cc>
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};

  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 80007b8:	4c70      	ldr	r4, [pc, #448]	; (800097c <SDEnWideBus+0x1d8>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 80007ba:	f04f 0810 	mov.w	r8, #16
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80007be:	2740      	movs	r7, #64	; 0x40
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};

  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 80007c0:	f04f 0a08 	mov.w	sl, #8
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80007c4:	f44f 6680 	mov.w	r6, #1024	; 0x400
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80007c8:	4620      	mov	r0, r4
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};

  /* Set Block Size To 8 Bytes */
  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 80007ca:	f8c4 a000 	str.w	sl, [r4]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 80007ce:	f8c4 8004 	str.w	r8, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80007d2:	60a7      	str	r7, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80007d4:	60e5      	str	r5, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80007d6:	6126      	str	r6, [r4, #16]
*******************************************************************************/
static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
{
  uint32_t index = 0;
  SD_Error errorstatus = SD_OK;
  uint32_t tempscr[2] = {0, 0};
 80007d8:	9500      	str	r5, [sp, #0]
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80007da:	f004 fd45 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 80007de:	4640      	mov	r0, r8
 80007e0:	f7ff fe2c 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 80007e4:	282a      	cmp	r0, #42	; 0x2a
 80007e6:	f040 80c6 	bne.w	8000976 <SDEnWideBus+0x1d2>
  {
    return(errorstatus);
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80007ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800098c <SDEnWideBus+0x1e8>
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 80007ee:	f04f 0b37 	mov.w	fp, #55	; 0x37
  {
    return(errorstatus);
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80007f2:	f8d8 3000 	ldr.w	r3, [r8]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80007f6:	4620      	mov	r0, r4
  {
    return(errorstatus);
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80007f8:	041b      	lsls	r3, r3, #16
 80007fa:	6023      	str	r3, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 80007fc:	f8c4 b004 	str.w	fp, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000800:	60a7      	str	r7, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000802:	60e5      	str	r5, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000804:	6126      	str	r6, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000806:	f004 fd2f 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_APP_CMD);
 800080a:	4658      	mov	r0, fp
 800080c:	f7ff fe16 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8000810:	282a      	cmp	r0, #42	; 0x2a
 8000812:	f040 80b0 	bne.w	8000976 <SDEnWideBus+0x1d2>
  {
    return(errorstatus);
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8000816:	485a      	ldr	r0, [pc, #360]	; (8000980 <SDEnWideBus+0x1dc>)
 8000818:	4b5a      	ldr	r3, [pc, #360]	; (8000984 <SDEnWideBus+0x1e0>)
  SDIO_DataInitStructure.SDIO_DataLength = 8;
 800081a:	f8c0 a004 	str.w	sl, [r0, #4]

  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800081e:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStructure.SDIO_DataLength = 8;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 8000820:	2330      	movs	r3, #48	; 0x30
 8000822:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8000824:	3b2e      	subs	r3, #46	; 0x2e
 8000826:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8000828:	3b01      	subs	r3, #1
 800082a:	6143      	str	r3, [r0, #20]
  }
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 8;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 800082c:	6105      	str	r5, [r0, #16]
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
 800082e:	f10a 0a2b 	add.w	sl, sl, #43	; 0x2b
  SDIO_DataInitStructure.SDIO_DataLength = 8;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8000832:	f004 fd4b 	bl	80052cc <SDIO_DataConfig>
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000836:	4620      	mov	r0, r4
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8000838:	6025      	str	r5, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
 800083a:	f8c4 a004 	str.w	sl, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800083e:	60a7      	str	r7, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000840:	60e5      	str	r5, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000842:	6126      	str	r6, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000844:	f004 fd10 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SD_APP_SEND_SCR);
 8000848:	4650      	mov	r0, sl
 800084a:	f7ff fdf7 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 800084e:	282a      	cmp	r0, #42	; 0x2a
 8000850:	f040 8091 	bne.w	8000976 <SDEnWideBus+0x1d2>
 8000854:	f1ad 0504 	sub.w	r5, sp, #4
 8000858:	e008      	b.n	800086c <SDEnWideBus+0xc8>
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 800085a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800085e:	f004 fda1 	bl	80053a4 <SDIO_GetFlagStatus>
 8000862:	b118      	cbz	r0, 800086c <SDEnWideBus+0xc8>
    {
      *(tempscr + index) = SDIO_ReadData();
 8000864:	f004 fd58 	bl	8005318 <SDIO_ReadData>
 8000868:	f845 0f04 	str.w	r0, [r5, #4]!
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 800086c:	4b46      	ldr	r3, [pc, #280]	; (8000988 <SDEnWideBus+0x1e4>)
 800086e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000870:	f240 632a 	movw	r3, #1578	; 0x62a
 8000874:	ea02 0303 	and.w	r3, r2, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d0ee      	beq.n	800085a <SDEnWideBus+0xb6>
      *(tempscr + index) = SDIO_ReadData();
      index++;
    }
  }

  if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 800087c:	2008      	movs	r0, #8
 800087e:	f004 fd91 	bl	80053a4 <SDIO_GetFlagStatus>
 8000882:	b120      	cbz	r0, 800088e <SDEnWideBus+0xea>
  {
    SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8000884:	2008      	movs	r0, #8
 8000886:	f004 fd97 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_TIMEOUT;
    return(errorstatus);
 800088a:	2004      	movs	r0, #4
 800088c:	e073      	b.n	8000976 <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 800088e:	2002      	movs	r0, #2
 8000890:	f004 fd88 	bl	80053a4 <SDIO_GetFlagStatus>
 8000894:	b120      	cbz	r0, 80008a0 <SDEnWideBus+0xfc>
  {
    SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8000896:	2002      	movs	r0, #2
 8000898:	f004 fd8e 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_CRC_FAIL;
    return(errorstatus);
 800089c:	2002      	movs	r0, #2
 800089e:	e06a      	b.n	8000976 <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 80008a0:	2020      	movs	r0, #32
 80008a2:	f004 fd7f 	bl	80053a4 <SDIO_GetFlagStatus>
 80008a6:	b120      	cbz	r0, 80008b2 <SDEnWideBus+0x10e>
  {
    SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 80008a8:	2020      	movs	r0, #32
 80008aa:	f004 fd85 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_RX_OVERRUN;
    return(errorstatus);
 80008ae:	2006      	movs	r0, #6
 80008b0:	e061      	b.n	8000976 <SDEnWideBus+0x1d2>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 80008b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b6:	f004 fd75 	bl	80053a4 <SDIO_GetFlagStatus>
 80008ba:	4606      	mov	r6, r0
 80008bc:	b128      	cbz	r0, 80008ca <SDEnWideBus+0x126>
  {
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 80008be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008c2:	f004 fd79 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
 80008c6:	2007      	movs	r0, #7
 80008c8:	e055      	b.n	8000976 <SDEnWideBus+0x1d2>
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80008ca:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80008ce:	f004 fd73 	bl	80053b8 <SDIO_ClearFlag>
 80008d2:	9b00      	ldr	r3, [sp, #0]
  {
    return(errorstatus);
  }

  /* If wide bus operation to be enabled */
  if (NewState == ENABLE)
 80008d4:	f1b9 0f01 	cmp.w	r9, #1
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80008d8:	ba1b      	rev	r3, r3
  {
    return(errorstatus);
  }

  /* If wide bus operation to be enabled */
  if (NewState == ENABLE)
 80008da:	d11e      	bne.n	800091a <SDEnWideBus+0x176>
  {
    /* If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 80008dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80008e0:	d048      	beq.n	8000974 <SDEnWideBus+0x1d0>
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80008e2:	f8d8 3000 	ldr.w	r3, [r8]
 80008e6:	4d25      	ldr	r5, [pc, #148]	; (800097c <SDEnWideBus+0x1d8>)
 80008e8:	041b      	lsls	r3, r3, #16
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 80008ea:	f109 0936 	add.w	r9, r9, #54	; 0x36
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80008ee:	f04f 0840 	mov.w	r8, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80008f2:	f44f 6780 	mov.w	r7, #1024	; 0x400
  {
    /* If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 80008f6:	6023      	str	r3, [r4, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80008f8:	4628      	mov	r0, r5
    /* If requested card supports wide bus operation */
    if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 80008fa:	f8c4 9004 	str.w	r9, [r4, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80008fe:	f8c4 8008 	str.w	r8, [r4, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000902:	60e6      	str	r6, [r4, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000904:	6127      	str	r7, [r4, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000906:	f004 fcaf 	bl	8005268 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SDIO_APP_CMD);
 800090a:	4648      	mov	r0, r9
 800090c:	f7ff fd96 	bl	800043c <CmdResp1Error>

      if (errorstatus != SD_OK)
 8000910:	282a      	cmp	r0, #42	; 0x2a
 8000912:	d130      	bne.n	8000976 <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
      }

      /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 8000914:	2302      	movs	r3, #2
 8000916:	602b      	str	r3, [r5, #0]
 8000918:	e01c      	b.n	8000954 <SDEnWideBus+0x1b0>
    }
  }   /* If wide bus operation to be disabled */
  else
  {
    /* If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 800091a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800091e:	d029      	beq.n	8000974 <SDEnWideBus+0x1d0>
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8000920:	f8d8 3000 	ldr.w	r3, [r8]
 8000924:	4d15      	ldr	r5, [pc, #84]	; (800097c <SDEnWideBus+0x1d8>)
 8000926:	041b      	lsls	r3, r3, #16
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000928:	f04f 0937 	mov.w	r9, #55	; 0x37
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800092c:	f04f 0840 	mov.w	r8, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000930:	f44f 6780 	mov.w	r7, #1024	; 0x400
  {
    /* If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8000934:	6023      	str	r3, [r4, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000936:	4628      	mov	r0, r5
    /* If requested card supports 1 bit mode operation */
    if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
    {
      /* Send CMD55 APP_CMD with argument as card's RCA.*/
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000938:	f8c4 9004 	str.w	r9, [r4, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800093c:	f8c4 8008 	str.w	r8, [r4, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000940:	60e6      	str	r6, [r4, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000942:	6127      	str	r7, [r4, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000944:	f004 fc90 	bl	8005268 <SDIO_SendCommand>


      errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000948:	4648      	mov	r0, r9
 800094a:	f7ff fd77 	bl	800043c <CmdResp1Error>

      if (errorstatus != SD_OK)
 800094e:	282a      	cmp	r0, #42	; 0x2a
 8000950:	d111      	bne.n	8000976 <SDEnWideBus+0x1d2>
      {
        return(errorstatus);
      }

      /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000952:	602e      	str	r6, [r5, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
 8000954:	2406      	movs	r4, #6
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000956:	4628      	mov	r0, r5
        return(errorstatus);
      }

      /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
 8000958:	606c      	str	r4, [r5, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800095a:	f8c5 8008 	str.w	r8, [r5, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800095e:	60ee      	str	r6, [r5, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000960:	612f      	str	r7, [r5, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000962:	f004 fc81 	bl	8005268 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
 8000966:	4620      	mov	r0, r4
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
      return(errorstatus);
    }
  }
}
 8000968:	b003      	add	sp, #12
 800096a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);

      errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
 800096e:	e565      	b.n	800043c <CmdResp1Error>
  uint32_t scr[2] = {0, 0};

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8000970:	200e      	movs	r0, #14
 8000972:	e000      	b.n	8000976 <SDEnWideBus+0x1d2>
      return(errorstatus);
    }
    else
    {
      errorstatus = SD_REQUEST_NOT_APPLICABLE;
      return(errorstatus);
 8000974:	2025      	movs	r0, #37	; 0x25
    }
  }
}
 8000976:	b003      	add	sp, #12
 8000978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800097c:	200004b8 	.word	0x200004b8
 8000980:	200004e8 	.word	0x200004e8
 8000984:	000fffff 	.word	0x000fffff
 8000988:	40018000 	.word	0x40018000
 800098c:	20000028 	.word	0x20000028

08000990 <SD_PowerON>:
  bool validvoltage = FALSE;
  uint32_t SDType = SD_STD_CAPACITY;

  /* Power ON Sequence -------------------------------------------------------*/
  /* Configure the SDIO peripheral */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
 8000990:	486d      	ldr	r0, [pc, #436]	; (8000b48 <SD_PowerON+0x1b8>)
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_PowerON(void)
{
 8000992:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t SDType = SD_STD_CAPACITY;

  /* Power ON Sequence -------------------------------------------------------*/
  /* Configure the SDIO peripheral */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8000996:	2500      	movs	r5, #0
  bool validvoltage = FALSE;
  uint32_t SDType = SD_STD_CAPACITY;

  /* Power ON Sequence -------------------------------------------------------*/
  /* Configure the SDIO peripheral */
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK = HCLK/(178 + 2) = 400 KHz */
 8000998:	23b2      	movs	r3, #178	; 0xb2
 800099a:	7503      	strb	r3, [r0, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800099c:	6005      	str	r5, [r0, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800099e:	6045      	str	r5, [r0, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 80009a0:	6085      	str	r5, [r0, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 80009a2:	60c5      	str	r5, [r0, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 80009a4:	6105      	str	r5, [r0, #16]
  /* Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);

  /* CMD0: GO_IDLE_STATE -------------------------------------------------------*/
  /* No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80009a6:	4c69      	ldr	r4, [pc, #420]	; (8000b4c <SD_PowerON+0x1bc>)
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
  SDIO_Init(&SDIO_InitStructure);
 80009a8:	f004 fc10 	bl	80051cc <SDIO_Init>

  /* Set Power State to ON */
  SDIO_SetPowerState(SDIO_PowerState_ON);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f004 fc35 	bl	800521c <SDIO_SetPowerState>

  /* Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f004 fc2c 	bl	8005210 <SDIO_ClockCmd>
  /* No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80009b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80009bc:	4620      	mov	r0, r4
  /* Enable SDIO Clock */
  SDIO_ClockCmd(ENABLE);

  /* CMD0: GO_IDLE_STATE -------------------------------------------------------*/
  /* No CMD response required */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 80009be:	6025      	str	r5, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
 80009c0:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 80009c2:	60a5      	str	r5, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80009c4:	60e5      	str	r5, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80009c6:	6123      	str	r3, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80009c8:	f242 7510 	movw	r5, #10000	; 0x2710
 80009cc:	f004 fc4c 	bl	8005268 <SDIO_SendCommand>
 80009d0:	e002      	b.n	80009d8 <SD_PowerON+0x48>
  SD_Error errorstatus = SD_OK;
  uint32_t timeout;

  timeout = SDIO_CMD0TIMEOUT; /* 10000 */

  while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 80009d2:	3d01      	subs	r5, #1
 80009d4:	f000 8093 	beq.w	8000afe <SD_PowerON+0x16e>
 80009d8:	2080      	movs	r0, #128	; 0x80
 80009da:	f004 fce3 	bl	80053a4 <SDIO_GetFlagStatus>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d0f7      	beq.n	80009d2 <SD_PowerON+0x42>
 80009e2:	e092      	b.n	8000b0a <SD_PowerON+0x17a>
  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
  {
    timeout--;
    status = SDIO->STA;
 80009e4:	4a5a      	ldr	r2, [pc, #360]	; (8000b50 <SD_PowerON+0x1c0>)

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
  {
    timeout--;
 80009e6:	3b01      	subs	r3, #1
    status = SDIO->STA;
 80009e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
 80009ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80009ee:	d102      	bne.n	80009f6 <SD_PowerON+0x66>
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1f7      	bne.n	80009e4 <SD_PowerON+0x54>
 80009f4:	e003      	b.n	80009fe <SD_PowerON+0x6e>
  {
    timeout--;
    status = SDIO->STA;
  }

  if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
 80009f6:	b113      	cbz	r3, 80009fe <SD_PowerON+0x6e>
 80009f8:	f012 0f04 	tst.w	r2, #4
 80009fc:	d014      	beq.n	8000a28 <SD_PowerON+0x98>
  {
    /* Card is not V2.0 complient or card does not support the set voltage range */
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 80009fe:	2004      	movs	r0, #4
 8000a00:	f004 fcda 	bl	80053b8 <SDIO_ClearFlag>
  else
  {
    /* CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a04:	2340      	movs	r3, #64	; 0x40
    SDType = SD_HIGH_CAPACITY;
  }
  else
  {
    /* CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a06:	2500      	movs	r5, #0
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a08:	2637      	movs	r6, #55	; 0x37
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a0a:	60a3      	str	r3, [r4, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a0c:	484f      	ldr	r0, [pc, #316]	; (8000b4c <SD_PowerON+0x1bc>)
    /* CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a12:	6123      	str	r3, [r4, #16]
    SDType = SD_HIGH_CAPACITY;
  }
  else
  {
    /* CMD55 */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a14:	6025      	str	r5, [r4, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a16:	6066      	str	r6, [r4, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000a18:	60e5      	str	r5, [r4, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a1a:	f004 fc25 	bl	8005268 <SDIO_SendCommand>
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f7ff fd0c 	bl	800043c <CmdResp1Error>
SD_Error SD_PowerON(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t response = 0, count = 0;
  bool validvoltage = FALSE;
  uint32_t SDType = SD_STD_CAPACITY;
 8000a24:	46a9      	mov	r9, r5
 8000a26:	e007      	b.n	8000a38 <SD_PowerON+0xa8>
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
    return(errorstatus);
  }

  if (status & SDIO_FLAG_CMDREND)
 8000a28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8000a2c:	f000 8085 	beq.w	8000b3a <SD_PowerON+0x1aa>
  {
    /* Card is SD V2.0 compliant */
    errorstatus = SD_OK;
    SDIO_ClearFlag(SDIO_FLAG_CMDREND);
 8000a30:	2040      	movs	r0, #64	; 0x40
 8000a32:	f004 fcc1 	bl	80053b8 <SDIO_ClearFlag>
 8000a36:	e080      	b.n	8000b3a <SD_PowerON+0x1aa>
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
  }
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a38:	2340      	movs	r3, #64	; 0x40
    SDIO_SendCommand(&SDIO_CmdInitStructure);
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
  }
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a3a:	2537      	movs	r5, #55	; 0x37
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
  }
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a3c:	2700      	movs	r7, #0
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a3e:	60a3      	str	r3, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a40:	4842      	ldr	r0, [pc, #264]	; (8000b4c <SD_PowerON+0x1bc>)
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_SendCommand(&SDIO_CmdInitStructure);
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
  }
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a46:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000a48:	6123      	str	r3, [r4, #16]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
    errorstatus = CmdResp1Error(SDIO_APP_CMD);
  }
  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a4a:	6027      	str	r7, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000a4c:	60e7      	str	r7, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a4e:	f004 fc0b 	bl	8005268 <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000a52:	4628      	mov	r0, r5
 8000a54:	f7ff fcf2 	bl	800043c <CmdResp1Error>

  /* If errorstatus is Command TimeOut, it is a MMC card */
  /* If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 8000a58:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
  errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000a5a:	4605      	mov	r5, r0

  /* If errorstatus is Command TimeOut, it is a MMC card */
  /* If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  if (errorstatus == SD_OK)
 8000a5c:	d152      	bne.n	8000b04 <SD_PowerON+0x174>
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /* SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a5e:	4e3b      	ldr	r6, [pc, #236]	; (8000b4c <SD_PowerON+0x1bc>)
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a60:	2537      	movs	r5, #55	; 0x37
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /* SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a62:	f04f 0800 	mov.w	r8, #0
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a66:	4630      	mov	r0, r6
    {

      /* SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a68:	f04f 0b40 	mov.w	fp, #64	; 0x40
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000a6c:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /* SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8000a70:	6065      	str	r5, [r4, #4]
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
    {

      /* SEND CMD55 APP_CMD with RCA as 0 */
      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000a72:	f8c4 8000 	str.w	r8, [r4]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000a76:	f8c4 b008 	str.w	fp, [r4, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000a7a:	f8c4 800c 	str.w	r8, [r4, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000a7e:	f8c4 a010 	str.w	sl, [r4, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000a82:	f004 fbf1 	bl	8005268 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000a86:	4628      	mov	r0, r5
 8000a88:	f7ff fcd8 	bl	800043c <CmdResp1Error>

      if (errorstatus != SD_OK)
 8000a8c:	282a      	cmp	r0, #42	; 0x2a
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
      SDIO_SendCommand(&SDIO_CmdInitStructure);

      errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8000a8e:	4605      	mov	r5, r0

      if (errorstatus != SD_OK)
 8000a90:	d138      	bne.n	8000b04 <SD_PowerON+0x174>
      {
        return(errorstatus);
      }
      SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 8000a92:	f049 4300 	orr.w	r3, r9, #2147483648	; 0x80000000
 8000a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a9a:	6033      	str	r3, [r6, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
 8000a9c:	2329      	movs	r3, #41	; 0x29
 8000a9e:	6073      	str	r3, [r6, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000aa0:	f8c6 b008 	str.w	fp, [r6, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000aa4:	f8c6 800c 	str.w	r8, [r6, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000aa8:	f8c6 a010 	str.w	sl, [r6, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000aac:	4630      	mov	r0, r6
 8000aae:	f004 fbdb 	bl	8005268 <SDIO_SendCommand>

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
  {
    status = SDIO->STA;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <SD_PowerON+0x1c0>)
 8000ab4:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  SD_Error errorstatus = SD_OK;
  uint32_t status;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 8000ab6:	f016 0f45 	tst.w	r6, #69	; 0x45
 8000aba:	d0fa      	beq.n	8000ab2 <SD_PowerON+0x122>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8000abc:	f016 0604 	ands.w	r6, r6, #4
 8000ac0:	d003      	beq.n	8000aca <SD_PowerON+0x13a>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f004 fc78 	bl	80053b8 <SDIO_ClearFlag>
 8000ac8:	e019      	b.n	8000afe <SD_PowerON+0x16e>
    return(errorstatus);
  }
  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8000aca:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8000ace:	f004 fc73 	bl	80053b8 <SDIO_ClearFlag>
      if (errorstatus != SD_OK)
      {
        return(errorstatus);
      }

      response = SDIO_GetResponse(SDIO_RESP1);
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f004 fbee 	bl	80052b4 <SDIO_GetResponse>
      validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
      count++;
 8000ad8:	3701      	adds	r7, #1
     or SD card 1.x */
  if (errorstatus == SD_OK)
  {
    /* SD CARD */
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 8000ada:	2800      	cmp	r0, #0
 8000adc:	db04      	blt.n	8000ae8 <SD_PowerON+0x158>
 8000ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae2:	429f      	cmp	r7, r3
 8000ae4:	d1bb      	bne.n	8000a5e <SD_PowerON+0xce>
 8000ae6:	e00c      	b.n	8000b02 <SD_PowerON+0x172>

      response = SDIO_GetResponse(SDIO_RESP1);
      validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
      count++;
    }
    if (count >= SD_MAX_VOLT_TRIAL)
 8000ae8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000aec:	429f      	cmp	r7, r3
 8000aee:	d808      	bhi.n	8000b02 <SD_PowerON+0x172>
    {
      errorstatus = SD_INVALID_VOLTRANGE;
      return(errorstatus);
    }

    if (response &= SD_HIGH_CAPACITY)
 8000af0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8000af4:	d006      	beq.n	8000b04 <SD_PowerON+0x174>
    {
      CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <SD_PowerON+0x1c4>)
 8000af8:	2202      	movs	r2, #2
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	e002      	b.n	8000b04 <SD_PowerON+0x174>
  }

  if (timeout == 0)
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    return(errorstatus);
 8000afe:	2503      	movs	r5, #3
 8000b00:	e000      	b.n	8000b04 <SD_PowerON+0x174>
      count++;
    }
    if (count >= SD_MAX_VOLT_TRIAL)
    {
      errorstatus = SD_INVALID_VOLTRANGE;
      return(errorstatus);
 8000b02:	251b      	movs	r5, #27
    }

  }/* else MMC Card */

  return(errorstatus);
}
 8000b04:	4628      	mov	r0, r5
 8000b06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorstatus = SD_CMD_RSP_TIMEOUT;
    return(errorstatus);
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8000b0a:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8000b0e:	f004 fc53 	bl	80053b8 <SDIO_ClearFlag>
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
               - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
               - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 8000b12:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8000b16:	6023      	str	r3, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	6063      	str	r3, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000b1c:	3338      	adds	r3, #56	; 0x38
 8000b1e:	60a3      	str	r3, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000b20:	3b40      	subs	r3, #64	; 0x40
 8000b22:	60e3      	str	r3, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <SD_PowerON+0x1bc>)
  /* CMD Response: R7 */
  SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2a:	6123      	str	r3, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000b2c:	f004 fb9c 	bl	8005268 <SDIO_SendCommand>
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;

  status = SDIO->STA;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <SD_PowerON+0x1c0>)
 8000b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
*******************************************************************************/
static SD_Error CmdResp7Error(void)
{
  SD_Error errorstatus = SD_OK;
  uint32_t status;
  uint32_t timeout = SDIO_CMD0TIMEOUT;
 8000b34:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b38:	e757      	b.n	80009ea <SD_PowerON+0x5a>

  errorstatus = CmdResp7Error();

  if (errorstatus == SD_OK)
  {
    CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /* SD Card 2.0 */
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SD_PowerON+0x1c4>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	605a      	str	r2, [r3, #4]
    SDType = SD_HIGH_CAPACITY;
 8000b40:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
 8000b44:	e778      	b.n	8000a38 <SD_PowerON+0xa8>
 8000b46:	bf00      	nop
 8000b48:	200004d0 	.word	0x200004d0
 8000b4c:	200004b8 	.word	0x200004b8
 8000b50:	40018000 	.word	0x40018000
 8000b54:	20000028 	.word	0x20000028

08000b58 <SD_PowerOFF>:
SD_Error SD_PowerOFF(void)
{
  SD_Error errorstatus = SD_OK;

  /* Set Power State to OFF */
  SDIO_SetPowerState(SDIO_PowerState_OFF);
 8000b58:	2000      	movs	r0, #0
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_PowerOFF(void)
{
 8000b5a:	b508      	push	{r3, lr}
  SD_Error errorstatus = SD_OK;

  /* Set Power State to OFF */
  SDIO_SetPowerState(SDIO_PowerState_OFF);
 8000b5c:	f004 fb5e 	bl	800521c <SDIO_SetPowerState>

  return(errorstatus);
}
 8000b60:	202a      	movs	r0, #42	; 0x2a
 8000b62:	bd08      	pop	{r3, pc}

08000b64 <SD_InitializeCards>:
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_InitializeCards(void)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SD_OK;
  uint16_t rca = 0x01;

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 8000b66:	f004 fb65 	bl	8005234 <SDIO_GetPowerState>
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	f000 8099 	beq.w	8000ca2 <SD_InitializeCards+0x13e>
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8000b70:	4d4e      	ldr	r5, [pc, #312]	; (8000cac <SD_InitializeCards+0x148>)
 8000b72:	686b      	ldr	r3, [r5, #4]
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d022      	beq.n	8000bbe <SD_InitializeCards+0x5a>
  {
    /* Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8000b78:	484d      	ldr	r0, [pc, #308]	; (8000cb0 <SD_InitializeCards+0x14c>)
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	6043      	str	r3, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8000b7e:	33be      	adds	r3, #190	; 0xbe
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    /* Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8000b80:	2600      	movs	r6, #0
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8000b82:	6083      	str	r3, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000b84:	f44f 6380 	mov.w	r3, #1024	; 0x400
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    /* Send CMD2 ALL_SEND_CID */
    SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8000b88:	6006      	str	r6, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000b8a:	60c6      	str	r6, [r0, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000b8c:	6103      	str	r3, [r0, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000b8e:	f004 fb6b 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 8000b92:	f7ff fc34 	bl	80003fe <CmdResp2Error>

    if (SD_OK != errorstatus)
 8000b96:	282a      	cmp	r0, #42	; 0x2a
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);

    errorstatus = CmdResp2Error();
 8000b98:	4604      	mov	r4, r0

    if (SD_OK != errorstatus)
 8000b9a:	f040 8085 	bne.w	8000ca8 <SD_InitializeCards+0x144>
    {
      return(errorstatus);
    }

    CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	f004 fb88 	bl	80052b4 <SDIO_GetResponse>
 8000ba4:	60a8      	str	r0, [r5, #8]
    CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f004 fb84 	bl	80052b4 <SDIO_GetResponse>
 8000bac:	60e8      	str	r0, [r5, #12]
    CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 8000bae:	2008      	movs	r0, #8
 8000bb0:	f004 fb80 	bl	80052b4 <SDIO_GetResponse>
 8000bb4:	6128      	str	r0, [r5, #16]
    CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 8000bb6:	200c      	movs	r0, #12
 8000bb8:	f004 fb7c 	bl	80052b4 <SDIO_GetResponse>
 8000bbc:	6168      	str	r0, [r5, #20]
  }
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
 8000bbe:	686b      	ldr	r3, [r5, #4]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d903      	bls.n	8000bcc <SD_InitializeCards+0x68>
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d001      	beq.n	8000bcc <SD_InitializeCards+0x68>
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d140      	bne.n	8000c4e <SD_InitializeCards+0xea>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000bcc:	4838      	ldr	r0, [pc, #224]	; (8000cb0 <SD_InitializeCards+0x14c>)
 8000bce:	2300      	movs	r3, #0
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
 8000bd0:	2203      	movs	r2, #3
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
      ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 8000bd2:	6003      	str	r3, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
 8000bd4:	6042      	str	r2, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000bd6:	60c3      	str	r3, [r0, #12]
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000bd8:	323d      	adds	r2, #61	; 0x3d
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    SDIO_CmdInitStructure.SDIO_Argument = 0x00;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8000bde:	6082      	str	r2, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000be0:	6103      	str	r3, [r0, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000be2:	f004 fb41 	bl	8005268 <SDIO_SendCommand>

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
  {
    status = SDIO->STA;
 8000be6:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <SD_InitializeCards+0x150>)
 8000be8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  uint32_t status;
  uint32_t response_r1;

  status = SDIO->STA;

  while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 8000bea:	f014 0f45 	tst.w	r4, #69	; 0x45
 8000bee:	d0fa      	beq.n	8000be6 <SD_InitializeCards+0x82>
  {
    status = SDIO->STA;
  }

  if (status & SDIO_FLAG_CTIMEOUT)
 8000bf0:	f014 0f04 	tst.w	r4, #4
 8000bf4:	d004      	beq.n	8000c00 <SD_InitializeCards+0x9c>
  {
    errorstatus = SD_CMD_RSP_TIMEOUT;
    SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f004 fbde 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000bfc:	2403      	movs	r4, #3
 8000bfe:	e053      	b.n	8000ca8 <SD_InitializeCards+0x144>
  }
  else if (status & SDIO_FLAG_CCRCFAIL)
 8000c00:	f014 0401 	ands.w	r4, r4, #1
 8000c04:	d004      	beq.n	8000c10 <SD_InitializeCards+0xac>
  {
    errorstatus = SD_CMD_CRC_FAIL;
    SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 8000c06:	2001      	movs	r0, #1
 8000c08:	f004 fbd6 	bl	80053b8 <SDIO_ClearFlag>
    return(errorstatus);
 8000c0c:	2401      	movs	r4, #1
 8000c0e:	e04b      	b.n	8000ca8 <SD_InitializeCards+0x144>
  }

  /* Check response received is of desired command */
  if (SDIO_GetCommandResponse() != cmd)
 8000c10:	f004 fb49 	bl	80052a6 <SDIO_GetCommandResponse>
 8000c14:	2803      	cmp	r0, #3
 8000c16:	d118      	bne.n	8000c4a <SD_InitializeCards+0xe6>
    errorstatus = SD_ILLEGAL_CMD;
    return(errorstatus);
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8000c18:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8000c1c:	f004 fbcc 	bl	80053b8 <SDIO_ClearFlag>

  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIO_RESP1);
 8000c20:	4620      	mov	r0, r4
 8000c22:	f004 fb47 	bl	80052b4 <SDIO_GetResponse>

  if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
 8000c26:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8000c2a:	d101      	bne.n	8000c30 <SD_InitializeCards+0xcc>
  {
    *prca = (uint16_t) (response_r1 >> 16);
 8000c2c:	0c03      	lsrs	r3, r0, #16
 8000c2e:	e00f      	b.n	8000c50 <SD_InitializeCards+0xec>
    return(errorstatus);
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
 8000c30:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8000c34:	d107      	bne.n	8000c46 <SD_InitializeCards+0xe2>
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
  }

  if (response_r1 & SD_R6_ILLEGAL_CMD)
 8000c36:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8000c3a:	d106      	bne.n	8000c4a <SD_InitializeCards+0xe6>
  {
    return(SD_ILLEGAL_CMD);
  }

  if (response_r1 & SD_R6_COM_CRC_FAILED)
 8000c3c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8000c40:	d005      	beq.n	8000c4e <SD_InitializeCards+0xea>
  {
    return(SD_COM_CRC_FAILED);
 8000c42:	240f      	movs	r4, #15
 8000c44:	e030      	b.n	8000ca8 <SD_InitializeCards+0x144>
    return(errorstatus);
  }

  if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
  {
    return(SD_GENERAL_UNKNOWN_ERROR);
 8000c46:	2413      	movs	r4, #19
 8000c48:	e02e      	b.n	8000ca8 <SD_InitializeCards+0x144>
  }

  if (response_r1 & SD_R6_ILLEGAL_CMD)
  {
    return(SD_ILLEGAL_CMD);
 8000c4a:	2410      	movs	r4, #16
 8000c4c:	e02c      	b.n	8000ca8 <SD_InitializeCards+0x144>
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_InitializeCards(void)
{
  SD_Error errorstatus = SD_OK;
  uint16_t rca = 0x01;
 8000c4e:	2301      	movs	r3, #1
    {
      return(errorstatus);
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 8000c50:	686a      	ldr	r2, [r5, #4]
 8000c52:	4e16      	ldr	r6, [pc, #88]	; (8000cac <SD_InitializeCards+0x148>)
 8000c54:	2a04      	cmp	r2, #4
 8000c56:	d026      	beq.n	8000ca6 <SD_InitializeCards+0x142>
  {
    RCA = rca;

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 8000c58:	4815      	ldr	r0, [pc, #84]	; (8000cb0 <SD_InitializeCards+0x14c>)
    }
  }

  if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
  {
    RCA = rca;
 8000c5a:	6033      	str	r3, [r6, #0]

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 8000c5c:	041b      	lsls	r3, r3, #16
 8000c5e:	6003      	str	r3, [r0, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
 8000c60:	2309      	movs	r3, #9
 8000c62:	6043      	str	r3, [r0, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 8000c64:	33b7      	adds	r3, #183	; 0xb7
 8000c66:	6083      	str	r3, [r0, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000c68:	2500      	movs	r5, #0
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000c6a:	f44f 6380 	mov.w	r3, #1024	; 0x400

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8000c6e:	60c5      	str	r5, [r0, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8000c70:	6103      	str	r3, [r0, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8000c72:	f004 faf9 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp2Error();
 8000c76:	f7ff fbc2 	bl	80003fe <CmdResp2Error>

    if (SD_OK != errorstatus)
 8000c7a:	282a      	cmp	r0, #42	; 0x2a
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);

    errorstatus = CmdResp2Error();
 8000c7c:	4604      	mov	r4, r0

    if (SD_OK != errorstatus)
 8000c7e:	d113      	bne.n	8000ca8 <SD_InitializeCards+0x144>
    {
      return(errorstatus);
    }

    CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 8000c80:	4628      	mov	r0, r5
 8000c82:	f004 fb17 	bl	80052b4 <SDIO_GetResponse>
 8000c86:	61b0      	str	r0, [r6, #24]
    CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 8000c88:	2004      	movs	r0, #4
 8000c8a:	f004 fb13 	bl	80052b4 <SDIO_GetResponse>
 8000c8e:	61f0      	str	r0, [r6, #28]
    CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 8000c90:	2008      	movs	r0, #8
 8000c92:	f004 fb0f 	bl	80052b4 <SDIO_GetResponse>
 8000c96:	6230      	str	r0, [r6, #32]
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 8000c98:	200c      	movs	r0, #12
 8000c9a:	f004 fb0b 	bl	80052b4 <SDIO_GetResponse>
 8000c9e:	6270      	str	r0, [r6, #36]	; 0x24
 8000ca0:	e002      	b.n	8000ca8 <SD_InitializeCards+0x144>
  uint16_t rca = 0x01;

  if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
 8000ca2:	2425      	movs	r4, #37	; 0x25
 8000ca4:	e000      	b.n	8000ca8 <SD_InitializeCards+0x144>
    CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
  }

  errorstatus = SD_OK; /* All cards get intialized */

  return(errorstatus);
 8000ca6:	242a      	movs	r4, #42	; 0x2a
}
 8000ca8:	4620      	mov	r0, r4
 8000caa:	bd70      	pop	{r4, r5, r6, pc}
 8000cac:	20000028 	.word	0x20000028
 8000cb0:	200004b8 	.word	0x200004b8
 8000cb4:	40018000 	.word	0x40018000

08000cb8 <SD_Init>:
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_Init(void)
{
 8000cb8:	b513      	push	{r0, r1, r4, lr}
static void GPIO_Configuration(void)
{
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
 8000cba:	2030      	movs	r0, #48	; 0x30
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	f004 f9ef 	bl	80050a0 <RCC_APB2PeriphClockCmd>

  /* Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
 8000cc2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000cc6:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	f88d 3006 	strb.w	r3, [sp, #6]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cd0:	4817      	ldr	r0, [pc, #92]	; (8000d30 <SD_Init+0x78>)
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);

  /* Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cd2:	3315      	adds	r3, #21
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cd4:	a901      	add	r1, sp, #4
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);

  /* Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cd6:	f88d 3007 	strb.w	r3, [sp, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000cda:	f003 fdf6 	bl	80048ca <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000cde:	2304      	movs	r3, #4
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ce0:	4814      	ldr	r0, [pc, #80]	; (8000d34 <SD_Init+0x7c>)
 8000ce2:	a901      	add	r1, sp, #4
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  GPIO_Init(GPIOC, &GPIO_InitStructure);

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000ce4:	f8ad 3004 	strh.w	r3, [sp, #4]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000ce8:	f003 fdef 	bl	80048ca <GPIO_Init>

  /* Configure SDIO interface GPIO */
  GPIO_Configuration();

  /* Enable the SDIO AHB Clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
 8000cec:	2101      	movs	r1, #1
 8000cee:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cf2:	f004 f9c9 	bl	8005088 <RCC_AHBPeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	f004 f9c5 	bl	8005088 <RCC_AHBPeriphClockCmd>

  SDIO_DeInit();
 8000cfe:	f004 fa53 	bl	80051a8 <SDIO_DeInit>

  errorstatus = SD_PowerON();
 8000d02:	f7ff fe45 	bl	8000990 <SD_PowerON>

  if (errorstatus != SD_OK)
 8000d06:	282a      	cmp	r0, #42	; 0x2a
  /* Enable the DMA2 Clock */
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);

  SDIO_DeInit();

  errorstatus = SD_PowerON();
 8000d08:	4604      	mov	r4, r0

  if (errorstatus != SD_OK)
 8000d0a:	d10f      	bne.n	8000d2c <SD_Init+0x74>
  {
    /* CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
  }

  errorstatus = SD_InitializeCards();
 8000d0c:	f7ff ff2a 	bl	8000b64 <SD_InitializeCards>

  if (errorstatus != SD_OK)
 8000d10:	282a      	cmp	r0, #42	; 0x2a
  {
    /* CMD Response TimeOut (wait for CMDSENT flag) */
    return(errorstatus);
  }

  errorstatus = SD_InitializeCards();
 8000d12:	4604      	mov	r4, r0

  if (errorstatus != SD_OK)
 8000d14:	d10a      	bne.n	8000d2c <SD_Init+0x74>
    return(errorstatus);
  }

  /* Configure the SDIO peripheral */
  /* HCLK = 72 MHz, SDIOCLK = 72 MHz, SDIO_CK = HCLK/(2 + 1) = 24 MHz */  
  SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 8000d16:	4808      	ldr	r0, [pc, #32]	; (8000d38 <SD_Init+0x80>)
 8000d18:	2301      	movs	r3, #1
 8000d1a:	7503      	strb	r3, [r0, #20]
  SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	6003      	str	r3, [r0, #0]
  SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8000d20:	6043      	str	r3, [r0, #4]
  SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8000d22:	6083      	str	r3, [r0, #8]
  SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8000d24:	60c3      	str	r3, [r0, #12]
  SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8000d26:	6103      	str	r3, [r0, #16]
  SDIO_Init(&SDIO_InitStructure);
 8000d28:	f004 fa50 	bl	80051cc <SDIO_Init>

  return(errorstatus);
}
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	bd1c      	pop	{r2, r3, r4, pc}
 8000d30:	40011000 	.word	0x40011000
 8000d34:	40011400 	.word	0x40011400
 8000d38:	200004d0 	.word	0x200004d0

08000d3c <SD_GetCardInfo>:
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
 8000d3c:	4a9f      	ldr	r2, [pc, #636]	; (8000fbc <SD_GetCardInfo+0x280>)
*                  that contains all SD card information.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
{
 8000d3e:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SD_OK;
  uint8_t tmp = 0;

  cardinfo->CardType = (uint8_t)CardType;
 8000d40:	6854      	ldr	r4, [r2, #4]
 8000d42:	f880 404e 	strb.w	r4, [r0, #78]	; 0x4e
  cardinfo->RCA = (uint16_t)RCA;
 8000d46:	8813      	ldrh	r3, [r2, #0]
 8000d48:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c

  /* Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 8000d4c:	6993      	ldr	r3, [r2, #24]
 8000d4e:	0e19      	lsrs	r1, r3, #24
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 8000d50:	098d      	lsrs	r5, r1, #6
 8000d52:	7005      	strb	r5, [r0, #0]
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8000d54:	f001 053c 	and.w	r5, r1, #60	; 0x3c
 8000d58:	08ad      	lsrs	r5, r5, #2
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8000d5a:	f001 0103 	and.w	r1, r1, #3
  cardinfo->RCA = (uint16_t)RCA;

  /* Byte 0 */
  tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
  cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 8000d5e:	7045      	strb	r5, [r0, #1]
  cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 8000d60:	7081      	strb	r1, [r0, #2]

  /* Byte 1 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 8000d62:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 8000d66:	0c09      	lsrs	r1, r1, #16
  cardinfo->SD_csd.TAAC = tmp;
 8000d68:	70c1      	strb	r1, [r0, #3]

  /* Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 8000d6a:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8000d6e:	0a09      	lsrs	r1, r1, #8
  cardinfo->SD_csd.NSAC = tmp;

  /* Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 8000d70:	b2db      	uxtb	r3, r3
  tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.TAAC = tmp;

  /* Byte 2 */
  tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.NSAC = tmp;
 8000d72:	7101      	strb	r1, [r0, #4]

  /* Byte 3 */
  tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
  cardinfo->SD_csd.MaxBusClkFrec = tmp;
 8000d74:	7143      	strb	r3, [r0, #5]

  /* Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 8000d76:	69d1      	ldr	r1, [r2, #28]
  cardinfo->SD_csd.CardComdClasses = tmp << 4;
 8000d78:	0e0b      	lsrs	r3, r1, #24
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	80c3      	strh	r3, [r0, #6]

  /* Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8000d7e:	88c5      	ldrh	r5, [r0, #6]
  /* Byte 4 */
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CardComdClasses = tmp << 4;

  /* Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 8000d80:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8000d84:	0c1b      	lsrs	r3, r3, #16
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8000d86:	b2ad      	uxth	r5, r5
 8000d88:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 8000d8c:	f003 030f 	and.w	r3, r3, #15
  tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_csd.CardComdClasses = tmp << 4;

  /* Byte 5 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 8000d90:	80c5      	strh	r5, [r0, #6]
  cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 8000d92:	7203      	strb	r3, [r0, #8]

  /* Byte 6 */
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 8000d94:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8000d98:	0a1b      	lsrs	r3, r3, #8
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 8000d9a:	09dd      	lsrs	r5, r3, #7
 8000d9c:	7245      	strb	r5, [r0, #9]
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 8000d9e:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8000da2:	7285      	strb	r5, [r0, #10]
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 8000da4:	f3c3 1540 	ubfx	r5, r3, #5, #1
 8000da8:	72c5      	strb	r5, [r0, #11]
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 8000daa:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8000dae:	7305      	strb	r5, [r0, #12]
  cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
 8000db0:	2500      	movs	r5, #0

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8000db2:	2c01      	cmp	r4, #1
  tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
 8000db4:	7345      	strb	r5, [r0, #13]

  if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 8000db6:	d837      	bhi.n	8000e28 <SD_GetCardInfo+0xec>
  {
    cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	029b      	lsls	r3, r3, #10
 8000dbe:	6103      	str	r3, [r0, #16]

    /* Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 8000dc0:	6903      	ldr	r3, [r0, #16]
 8000dc2:	b2c9      	uxtb	r1, r1
 8000dc4:	ea43 0181 	orr.w	r1, r3, r1, lsl #2
 8000dc8:	6101      	str	r1, [r0, #16]

    /* Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8000dca:	6a13      	ldr	r3, [r2, #32]
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8000dcc:	6904      	ldr	r4, [r0, #16]
    /* Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize |= (tmp) << 2;

    /* Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8000dce:	0e19      	lsrs	r1, r3, #24
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 8000dd0:	ea44 1491 	orr.w	r4, r4, r1, lsr #6
 8000dd4:	6104      	str	r4, [r0, #16]

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8000dd6:	f001 0438 	and.w	r4, r1, #56	; 0x38
 8000dda:	08e4      	lsrs	r4, r4, #3
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8000ddc:	f001 0107 	and.w	r1, r1, #7

    /* Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
    cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;

    cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8000de0:	7504      	strb	r4, [r0, #20]
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 8000de2:	7541      	strb	r1, [r0, #21]

    /* Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 8000de4:	f403 017f 	and.w	r1, r3, #16711680	; 0xff0000
 8000de8:	0c09      	lsrs	r1, r1, #16
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8000dea:	094c      	lsrs	r4, r1, #5
 8000dec:	7584      	strb	r4, [r0, #22]
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8000dee:	f001 041c 	and.w	r4, r1, #28
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8000df2:	f001 0103 	and.w	r1, r1, #3
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);

    /* Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8000df6:	08a4      	lsrs	r4, r4, #2
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8000df8:	0049      	lsls	r1, r1, #1
    cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);

    /* Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8000dfa:	75c4      	strb	r4, [r0, #23]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 8000dfc:	7601      	strb	r1, [r0, #24]
    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8000dfe:	7e01      	ldrb	r1, [r0, #24]
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
    cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
    cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8000e00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000e04:	0a1b      	lsrs	r3, r3, #8
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 8000e06:	ea41 11d3 	orr.w	r1, r1, r3, lsr #7
 8000e0a:	7601      	strb	r1, [r0, #24]
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8000e0c:	6905      	ldr	r5, [r0, #16]
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8000e0e:	7e04      	ldrb	r4, [r0, #24]
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8000e10:	2601      	movs	r6, #1
 8000e12:	7a01      	ldrb	r1, [r0, #8]
    cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 8000e14:	19ad      	adds	r5, r5, r6
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8000e16:	3402      	adds	r4, #2
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8000e18:	fa16 f101 	lsls.w	r1, r6, r1
    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
    cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 8000e1c:	fa15 f404 	lsls.w	r4, r5, r4
    cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 8000e20:	6481      	str	r1, [r0, #72]	; 0x48
    cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 8000e22:	4361      	muls	r1, r4
 8000e24:	6441      	str	r1, [r0, #68]	; 0x44
 8000e26:	e01b      	b.n	8000e60 <SD_GetCardInfo+0x124>
  }
  else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8000e28:	2c02      	cmp	r4, #2
 8000e2a:	d119      	bne.n	8000e60 <SD_GetCardInfo+0x124>
  {
    /* Byte 7 */
    tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
    cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 8000e2c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000e30:	0409      	lsls	r1, r1, #16
 8000e32:	6101      	str	r1, [r0, #16]

    /* Byte 8 */
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 8000e34:	6a13      	ldr	r3, [r2, #32]

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 8000e36:	6901      	ldr	r1, [r0, #16]
 8000e38:	0e1c      	lsrs	r4, r3, #24
 8000e3a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8000e3e:	6101      	str	r1, [r0, #16]

    /* Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);

    cardinfo->SD_csd.DeviceSize |= (tmp);
 8000e40:	6901      	ldr	r1, [r0, #16]
    tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);

    cardinfo->SD_csd.DeviceSize |= (tmp << 8);

    /* Byte 9 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 8000e42:	f403 047f 	and.w	r4, r3, #16711680	; 0xff0000

    cardinfo->SD_csd.DeviceSize |= (tmp);
 8000e46:	ea41 4114 	orr.w	r1, r1, r4, lsr #16
 8000e4a:	6101      	str	r1, [r0, #16]

    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8000e4c:	6901      	ldr	r1, [r0, #16]
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);

    cardinfo->SD_csd.DeviceSize |= (tmp);

    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8000e4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 8000e52:	3101      	adds	r1, #1
 8000e54:	04c9      	lsls	r1, r1, #19
 8000e56:	6441      	str	r1, [r0, #68]	; 0x44
    cardinfo->CardBlockSize = 512;    
 8000e58:	f44f 7100 	mov.w	r1, #512	; 0x200
    tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);

    cardinfo->SD_csd.DeviceSize |= (tmp);

    /* Byte 10 */
    tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 8000e5c:	0a1b      	lsrs	r3, r3, #8
    
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
    cardinfo->CardBlockSize = 512;    
 8000e5e:	6481      	str	r1, [r0, #72]	; 0x48
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8000e60:	f3c3 1180 	ubfx	r1, r3, #6, #1
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8000e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e68:	005b      	lsls	r3, r3, #1
    cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
    cardinfo->CardBlockSize = 512;    
  }


  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 8000e6a:	7641      	strb	r1, [r0, #25]
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 8000e6c:	7683      	strb	r3, [r0, #26]

  /* Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 8000e6e:	7e81      	ldrb	r1, [r0, #26]

  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;

  /* Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 8000e70:	f892 3020 	ldrb.w	r3, [r2, #32]
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 8000e74:	ea41 11d3 	orr.w	r1, r1, r3, lsr #7
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8000e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;

  /* Byte 11 */
  tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
  cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 8000e7c:	7681      	strb	r1, [r0, #26]
  cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 8000e7e:	76c3      	strb	r3, [r0, #27]

  /* Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 8000e80:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000e82:	0e0b      	lsrs	r3, r1, #24
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 8000e84:	09dc      	lsrs	r4, r3, #7
 8000e86:	7704      	strb	r4, [r0, #28]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 8000e88:	f003 0460 	and.w	r4, r3, #96	; 0x60
 8000e8c:	0964      	lsrs	r4, r4, #5
 8000e8e:	7744      	strb	r4, [r0, #29]
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8000e90:	f003 041c 	and.w	r4, r3, #28
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8000e94:	f003 0303 	and.w	r3, r3, #3

  /* Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8000e98:	08a4      	lsrs	r4, r4, #2
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8000e9a:	009b      	lsls	r3, r3, #2

  /* Byte 12 */
  tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 8000e9c:	7784      	strb	r4, [r0, #30]
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 8000e9e:	77c3      	strb	r3, [r0, #31]

  /* Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8000ea0:	7fc4      	ldrb	r4, [r0, #31]
  cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
  cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
  cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;

  /* Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 8000ea2:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
 8000ea6:	0c1b      	lsrs	r3, r3, #16
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 8000ea8:	ea44 1493 	orr.w	r4, r4, r3, lsr #6
 8000eac:	77c4      	strb	r4, [r0, #31]
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8000eae:	f3c3 1440 	ubfx	r4, r3, #5, #1
 8000eb2:	f880 4020 	strb.w	r4, [r0, #32]
  cardinfo->SD_csd.Reserved3 = 0;
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8000eb6:	f003 0301 	and.w	r3, r3, #1

  /* Byte 13 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
  cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.Reserved3 = 0;
 8000eba:	2400      	movs	r4, #0
 8000ebc:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 8000ec0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22

  /* Byte 14 */
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 8000ec4:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
 8000ec8:	0a1b      	lsrs	r3, r3, #8
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 8000eca:	09dc      	lsrs	r4, r3, #7
 8000ecc:	f880 4023 	strb.w	r4, [r0, #35]	; 0x23
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 8000ed0:	f3c3 1480 	ubfx	r4, r3, #6, #1
 8000ed4:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 8000ed8:	f3c3 1440 	ubfx	r4, r3, #5, #1
 8000edc:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 8000ee0:	f3c3 1400 	ubfx	r4, r3, #4, #1
 8000ee4:	f880 4026 	strb.w	r4, [r0, #38]	; 0x26
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
  cardinfo->SD_csd.ECC = (tmp & 0x03);

  /* Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8000ee8:	b2c9      	uxtb	r1, r1
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 8000eea:	f003 040c 	and.w	r4, r3, #12
 8000eee:	08a4      	lsrs	r4, r4, #2
  cardinfo->SD_csd.ECC = (tmp & 0x03);

  /* Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8000ef0:	0849      	lsrs	r1, r1, #1
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8000ef2:	f003 0303 	and.w	r3, r3, #3
  tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
  cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
  cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
  cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
  cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 8000ef6:	f880 4027 	strb.w	r4, [r0, #39]	; 0x27
  cardinfo->SD_csd.ECC = (tmp & 0x03);
 8000efa:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

  /* Byte 15 */
  tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
  cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 8000efe:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
  cardinfo->SD_csd.Reserved4 = 1;
 8000f02:	2101      	movs	r1, #1
 8000f04:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a


  /* Byte 0 */
  tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 8000f08:	6893      	ldr	r3, [r2, #8]
 8000f0a:	0e1c      	lsrs	r4, r3, #24
  cardinfo->SD_cid.ManufacturerID = tmp;
 8000f0c:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c

  /* Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
 8000f10:	f403 047f 	and.w	r4, r3, #16711680	; 0xff0000
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 8000f14:	0a24      	lsrs	r4, r4, #8
 8000f16:	85c4      	strh	r4, [r0, #46]	; 0x2e

  /* Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8000f18:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
  /* Byte 1 */
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;

  /* Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
 8000f1a:	f403 457f 	and.w	r5, r3, #65280	; 0xff00
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	ea44 2415 	orr.w	r4, r4, r5, lsr #8

  /* Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 8000f24:	061b      	lsls	r3, r3, #24
  tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.OEM_AppliID = tmp << 8;

  /* Byte 2 */
  tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
  cardinfo->SD_cid.OEM_AppliID |= tmp;
 8000f26:	85c4      	strh	r4, [r0, #46]	; 0x2e

  /* Byte 3 */
  tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
  cardinfo->SD_cid.ProdName1 = tmp << 24;
 8000f28:	6303      	str	r3, [r0, #48]	; 0x30

  /* Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 8000f2a:	68d3      	ldr	r3, [r2, #12]
  cardinfo->SD_cid.ProdName1 |= tmp << 16;
 8000f2c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000f2e:	0e1d      	lsrs	r5, r3, #24
 8000f30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f34:	6304      	str	r4, [r0, #48]	; 0x30

  /* Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 8000f36:	6b04      	ldr	r4, [r0, #48]	; 0x30
  /* Byte 4 */
  tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdName1 |= tmp << 16;

  /* Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
 8000f38:	f403 057f 	and.w	r5, r3, #16711680	; 0xff0000
  cardinfo->SD_cid.ProdName1 |= tmp << 8;
 8000f3c:	ea44 2415 	orr.w	r4, r4, r5, lsr #8
 8000f40:	6304      	str	r4, [r0, #48]	; 0x30

  /* Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdName1 |= tmp;
 8000f42:	6b04      	ldr	r4, [r0, #48]	; 0x30
  /* Byte 5 */
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;

  /* Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
 8000f44:	f403 457f 	and.w	r5, r3, #65280	; 0xff00
  cardinfo->SD_cid.ProdName1 |= tmp;
 8000f48:	ea44 2415 	orr.w	r4, r4, r5, lsr #8

  /* Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 8000f4c:	b2db      	uxtb	r3, r3
  tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdName1 |= tmp << 8;

  /* Byte 6 */
  tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdName1 |= tmp;
 8000f4e:	6304      	str	r4, [r0, #48]	; 0x30

  /* Byte 7 */
  tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
  cardinfo->SD_cid.ProdName2 = tmp;
 8000f50:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34

  /* Byte 8 */
  tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 8000f54:	6913      	ldr	r3, [r2, #16]
 8000f56:	0e1c      	lsrs	r4, r3, #24
  cardinfo->SD_cid.ProdRev = tmp;
 8000f58:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35

  /* Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 8000f5c:	f403 047f 	and.w	r4, r3, #16711680	; 0xff0000
  cardinfo->SD_cid.ProdSN = tmp << 24;
 8000f60:	0224      	lsls	r4, r4, #8
 8000f62:	6384      	str	r4, [r0, #56]	; 0x38

  /* Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8000f64:	6b84      	ldr	r4, [r0, #56]	; 0x38
  /* Byte 9 */
  tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.ProdSN = tmp << 24;

  /* Byte 10 */
  tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
 8000f66:	f403 457f 	and.w	r5, r3, #65280	; 0xff00
  cardinfo->SD_cid.ProdSN |= tmp << 16;
 8000f6a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8000f6e:	6384      	str	r4, [r0, #56]	; 0x38

  /* Byte 11 */
  tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
  cardinfo->SD_cid.ProdSN |= tmp << 8;
 8000f70:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8000f78:	6383      	str	r3, [r0, #56]	; 0x38

  /* Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 8000f7a:	6953      	ldr	r3, [r2, #20]
  cardinfo->SD_cid.ProdSN |= tmp;
 8000f7c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000f7e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8000f82:	6382      	str	r2, [r0, #56]	; 0x38

  /* Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8000f84:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
  /* Byte 12 */
  tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
  cardinfo->SD_cid.ProdSN |= tmp;

  /* Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 8000f88:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000f8c:	0c12      	lsrs	r2, r2, #16
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 8000f8e:	ea44 1412 	orr.w	r4, r4, r2, lsr #4
 8000f92:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;

  /* Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
 8000f96:	f403 447f 	and.w	r4, r3, #65280	; 0xff00
  cardinfo->SD_cid.ManufactDate |= tmp;

  /* Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	40cb      	lsrs	r3, r1
  cardinfo->SD_cid.ProdSN |= tmp;

  /* Byte 13 */
  tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
  cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
  cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 8000f9e:	f002 020f 	and.w	r2, r2, #15
 8000fa2:	0212      	lsls	r2, r2, #8
 8000fa4:	87c2      	strh	r2, [r0, #62]	; 0x3e

  /* Byte 14 */
  tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
  cardinfo->SD_cid.ManufactDate |= tmp;
 8000fa6:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8000fa8:	b292      	uxth	r2, r2
 8000faa:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8000fae:	87c2      	strh	r2, [r0, #62]	; 0x3e

  /* Byte 15 */
  tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
  cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 8000fb0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  cardinfo->SD_cid.Reserved2 = 1;
 8000fb4:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
  
  return(errorstatus);
}
 8000fb8:	202a      	movs	r0, #42	; 0x2a
 8000fba:	bd70      	pop	{r4, r5, r6, pc}
 8000fbc:	20000028 	.word	0x20000028

08000fc0 <SD_EnableWideBusOperation>:
*                       - SDIO_BusWide_1b: 1-bit data transfer
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  SD_Error errorstatus = SD_OK;

  /* MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <SD_EnableWideBusOperation+0x68>)
*                       - SDIO_BusWide_1b: 1-bit data transfer
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
 8000fc4:	4605      	mov	r5, r0
  SD_Error errorstatus = SD_OK;

  /* MMC Card doesn't support this feature */
  if (SDIO_MULTIMEDIA_CARD == CardType)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d02a      	beq.n	8001022 <SD_EnableWideBusOperation+0x62>
  {
    errorstatus = SD_UNSUPPORTED_FEATURE;
    return(errorstatus);
  }
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d826      	bhi.n	800101e <SD_EnableWideBusOperation+0x5e>
  {
    if (SDIO_BusWide_8b == WideMode)
 8000fd0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8000fd4:	d025      	beq.n	8001022 <SD_EnableWideBusOperation+0x62>
    {
      errorstatus = SD_UNSUPPORTED_FEATURE;
      return(errorstatus);
    }
    else if (SDIO_BusWide_4b == WideMode)
 8000fd6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000fda:	d10e      	bne.n	8000ffa <SD_EnableWideBusOperation+0x3a>
    {
      errorstatus = SDEnWideBus(ENABLE);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff fbe1 	bl	80007a4 <SDEnWideBus>

      if (SD_OK == errorstatus)
 8000fe2:	282a      	cmp	r0, #42	; 0x2a
      errorstatus = SD_UNSUPPORTED_FEATURE;
      return(errorstatus);
    }
    else if (SDIO_BusWide_4b == WideMode)
    {
      errorstatus = SDEnWideBus(ENABLE);
 8000fe4:	4604      	mov	r4, r0

      if (SD_OK == errorstatus)
 8000fe6:	d11d      	bne.n	8001024 <SD_EnableWideBusOperation+0x64>
      {
        /* Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 8000fe8:	4810      	ldr	r0, [pc, #64]	; (800102c <SD_EnableWideBusOperation+0x6c>)
 8000fea:	2301      	movs	r3, #1
 8000fec:	7503      	strb	r3, [r0, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6003      	str	r3, [r0, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8000ff2:	6043      	str	r3, [r0, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8000ff4:	6083      	str	r3, [r0, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 8000ff6:	60c5      	str	r5, [r0, #12]
 8000ff8:	e00d      	b.n	8001016 <SD_EnableWideBusOperation+0x56>
        SDIO_Init(&SDIO_InitStructure);
      }
    }
    else
    {
      errorstatus = SDEnWideBus(DISABLE);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff fbd2 	bl	80007a4 <SDEnWideBus>

      if (SD_OK == errorstatus)
 8001000:	282a      	cmp	r0, #42	; 0x2a
        SDIO_Init(&SDIO_InitStructure);
      }
    }
    else
    {
      errorstatus = SDEnWideBus(DISABLE);
 8001002:	4604      	mov	r4, r0

      if (SD_OK == errorstatus)
 8001004:	d10e      	bne.n	8001024 <SD_EnableWideBusOperation+0x64>
      {
        /* Configure the SDIO peripheral */
        SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <SD_EnableWideBusOperation+0x6c>)
 8001008:	2301      	movs	r3, #1
 800100a:	7503      	strb	r3, [r0, #20]
        SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800100c:	3b01      	subs	r3, #1
 800100e:	6003      	str	r3, [r0, #0]
        SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8001010:	6043      	str	r3, [r0, #4]
        SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8001012:	6083      	str	r3, [r0, #8]
        SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 8001014:	60c3      	str	r3, [r0, #12]
        SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 8001016:	6103      	str	r3, [r0, #16]
        SDIO_Init(&SDIO_InitStructure);
 8001018:	f004 f8d8 	bl	80051cc <SDIO_Init>
 800101c:	e002      	b.n	8001024 <SD_EnableWideBusOperation+0x64>
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
{
  SD_Error errorstatus = SD_OK;
 800101e:	242a      	movs	r4, #42	; 0x2a
 8001020:	e000      	b.n	8001024 <SD_EnableWideBusOperation+0x64>
  else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
  {
    if (SDIO_BusWide_8b == WideMode)
    {
      errorstatus = SD_UNSUPPORTED_FEATURE;
      return(errorstatus);
 8001022:	2427      	movs	r4, #39	; 0x27
      }
    }
  }

  return(errorstatus);
}
 8001024:	4620      	mov	r0, r4
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	20000028 	.word	0x20000028
 800102c:	200004d0 	.word	0x200004d0

08001030 <SD_SetDeviceMode>:
*******************************************************************************/
SD_Error SD_SetDeviceMode(uint32_t Mode)
{
  SD_Error errorstatus = SD_OK;

  if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
 8001030:	2802      	cmp	r0, #2
 8001032:	d803      	bhi.n	800103c <SD_SetDeviceMode+0xc>
  {
    DeviceMode = Mode;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <SD_SetDeviceMode+0x10>)
 8001036:	6018      	str	r0, [r3, #0]
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_SetDeviceMode(uint32_t Mode)
{
  SD_Error errorstatus = SD_OK;
 8001038:	202a      	movs	r0, #42	; 0x2a
 800103a:	4770      	bx	lr
  {
    DeviceMode = Mode;
  }
  else
  {
    errorstatus = SD_INVALID_PARAMETER;
 800103c:	2026      	movs	r0, #38	; 0x26
  }
  return(errorstatus);

}
 800103e:	4770      	bx	lr
 8001040:	20000008 	.word	0x20000008

08001044 <SD_SelectDeselect>:
SD_Error SD_SelectDeselect(uint32_t addr)
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <SD_SelectDeselect+0x28>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001046:	2240      	movs	r2, #64	; 0x40
* Input          : addr: Address of the Card to be selected.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_SelectDeselect(uint32_t addr)
{
 8001048:	b510      	push	{r4, lr}
  SD_Error errorstatus = SD_OK;

  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800104a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800104c:	3a40      	subs	r2, #64	; 0x40
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
 800104e:	2407      	movs	r4, #7
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001050:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001052:	f44f 6280 	mov.w	r2, #1024	; 0x400
SD_Error SD_SelectDeselect(uint32_t addr)
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
 8001056:	6018      	str	r0, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
 8001058:	605c      	str	r4, [r3, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800105a:	4618      	mov	r0, r3
  /* Send CMD7 SDIO_SEL_DESEL_CARD */
  SDIO_CmdInitStructure.SDIO_Argument =  addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800105c:	611a      	str	r2, [r3, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800105e:	f004 f903 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
 8001062:	4620      	mov	r0, r4

  return(errorstatus);
}
 8001064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
 8001068:	f7ff b9e8 	b.w	800043c <CmdResp1Error>
 800106c:	200004b8 	.word	0x200004b8

08001070 <SD_ReadBlock>:
*                  - blocksize: the SD card Data block size.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_ReadBlock(uint32_t addr, uint32_t *readbuff, uint16_t BlockSize)
{
 8001070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001074:	4604      	mov	r4, r0
 8001076:	4616      	mov	r6, r2
  SD_Error errorstatus = SD_OK;
  uint32_t count = 0, *tempbuff = readbuff;
  uint8_t power = 0;

  if (NULL == readbuff)
 8001078:	460f      	mov	r7, r1
 800107a:	2900      	cmp	r1, #0
 800107c:	f000 8102 	beq.w	8001284 <SD_ReadBlock+0x214>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 8001080:	f8df a218 	ldr.w	sl, [pc, #536]	; 800129c <SD_ReadBlock+0x22c>
 8001084:	232a      	movs	r3, #42	; 0x2a
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001086:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8001290 <SD_ReadBlock+0x220>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 800108a:	f88a 3004 	strb.w	r3, [sl, #4]
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800108e:	4b7f      	ldr	r3, [pc, #508]	; (800128c <SD_ReadBlock+0x21c>)
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 8001090:	2500      	movs	r5, #0
 8001092:	f8df 8210 	ldr.w	r8, [pc, #528]	; 80012a4 <SD_ReadBlock+0x234>
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001096:	f8c9 3000 	str.w	r3, [r9]
  SDIO_DataInitStructure.SDIO_DataLength = 0;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 800109a:	4648      	mov	r0, r9
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 0;
 800109c:	f8c9 5004 	str.w	r5, [r9, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 80010a0:	f8c9 5008 	str.w	r5, [r9, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 80010a4:	f8c9 500c 	str.w	r5, [r9, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 80010a8:	f8c9 5010 	str.w	r5, [r9, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 80010ac:	f8c9 5014 	str.w	r5, [r9, #20]
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 80010b0:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
  TotalNumberOfBytes = 0;
 80010b4:	f8c8 502c 	str.w	r5, [r8, #44]	; 0x2c
  SDIO_DataInitStructure.SDIO_DataLength = 0;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 80010b8:	f004 f908 	bl	80052cc <SDIO_DataConfig>
  SDIO_DMACmd(DISABLE);
 80010bc:	4628      	mov	r0, r5
 80010be:	f004 f8cd 	bl	800525c <SDIO_DMACmd>

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 80010c2:	4628      	mov	r0, r5
 80010c4:	f004 f8f6 	bl	80052b4 <SDIO_GetResponse>
 80010c8:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80010cc:	464b      	mov	r3, r9
 80010ce:	f040 80d7 	bne.w	8001280 <SD_ReadBlock+0x210>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }
  
  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80010d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80010d6:	2a02      	cmp	r2, #2
 80010d8:	d102      	bne.n	80010e0 <SD_ReadBlock+0x70>
  {
    BlockSize = 512;
    addr /= 512;
 80010da:	0a64      	lsrs	r4, r4, #9
    return(errorstatus);
  }
  
  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 80010dc:	f44f 7600 	mov.w	r6, #512	; 0x200
    addr /= 512;
  }
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 80010e0:	1e72      	subs	r2, r6, #1
 80010e2:	b291      	uxth	r1, r2
 80010e4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80010e8:	f080 80cc 	bcs.w	8001284 <SD_ReadBlock+0x214>
 80010ec:	4032      	ands	r2, r6
 80010ee:	9201      	str	r2, [sp, #4]
 80010f0:	f040 80c8 	bne.w	8001284 <SD_ReadBlock+0x214>
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 80010f4:	4630      	mov	r0, r6
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	f7ff f978 	bl	80003ec <convert_from_bytes_to_power_of_two>

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80010fc:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 80012a8 <SD_ReadBlock+0x238>
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001100:	2240      	movs	r2, #64	; 0x40
 8001102:	f8cb 2008 	str.w	r2, [fp, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001106:	9a01      	ldr	r2, [sp, #4]
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 8001108:	2510      	movs	r5, #16
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800110a:	f8cb 200c 	str.w	r2, [fp, #12]
    BlockSize = 512;
    addr /= 512;
  }
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 800110e:	4681      	mov	r9, r0
    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001110:	f44f 6280 	mov.w	r2, #1024	; 0x400
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001114:	4658      	mov	r0, fp
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 8001116:	f8cb 5004 	str.w	r5, [fp, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800111a:	f8cb 2010 	str.w	r2, [fp, #16]
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 800111e:	f8cb 6000 	str.w	r6, [fp]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001122:	f004 f8a1 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff f988 	bl	800043c <CmdResp1Error>

    if (SD_OK != errorstatus)
 800112c:	282a      	cmp	r0, #42	; 0x2a
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 800112e:	4605      	mov	r5, r0

    if (SD_OK != errorstatus)
 8001130:	9b00      	ldr	r3, [sp, #0]
 8001132:	f040 80a8 	bne.w	8001286 <SD_ReadBlock+0x216>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001136:	4a55      	ldr	r2, [pc, #340]	; (800128c <SD_ReadBlock+0x21c>)
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 8001138:	605e      	str	r6, [r3, #4]
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800113a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 800113c:	ea4f 1209 	mov.w	r2, r9, lsl #4
 8001140:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8001142:	2202      	movs	r2, #2
 8001144:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001146:	9a01      	ldr	r2, [sp, #4]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8001148:	f04f 0901 	mov.w	r9, #1

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 800114c:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 800114e:	f8c3 9014 	str.w	r9, [r3, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8001152:	484f      	ldr	r0, [pc, #316]	; (8001290 <SD_ReadBlock+0x220>)
 8001154:	f004 f8ba 	bl	80052cc <SDIO_DataConfig>

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
 8001158:	9b01      	ldr	r3, [sp, #4]
  DestBuffer = readbuff;

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800115a:	2240      	movs	r2, #64	; 0x40
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
 800115c:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
  DestBuffer = readbuff;
 8001160:	4b4c      	ldr	r3, [pc, #304]	; (8001294 <SD_ReadBlock+0x224>)

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 8001162:	f8cb 4000 	str.w	r4, [fp]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
  DestBuffer = readbuff;
 8001166:	601f      	str	r7, [r3, #0]

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001168:	9b01      	ldr	r3, [sp, #4]
  StopCondition = 0;
  DestBuffer = readbuff;

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
 800116a:	2411      	movs	r4, #17
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800116c:	f8cb 2008 	str.w	r2, [fp, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001170:	4658      	mov	r0, fp
  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001172:	f44f 6280 	mov.w	r2, #1024	; 0x400

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001176:	f8cb 300c 	str.w	r3, [fp, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800117a:	f8cb 2010 	str.w	r2, [fp, #16]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);

  TotalNumberOfBytes = BlockSize;
 800117e:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
  StopCondition = 0;
  DestBuffer = readbuff;

  /* Send CMD17 READ_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
 8001182:	f8cb 4004 	str.w	r4, [fp, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001186:	f004 f86f 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
 800118a:	4620      	mov	r0, r4
 800118c:	f7ff f956 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001190:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
 8001192:	4605      	mov	r5, r0

  if (errorstatus != SD_OK)
 8001194:	d177      	bne.n	8001286 <SD_ReadBlock+0x216>
  {
    return(errorstatus);
  }
  /* In case of single block transfer, no need of stop transfer at all.*/
  if (DeviceMode == SD_POLLING_MODE)
 8001196:	f8da 1000 	ldr.w	r1, [sl]
 800119a:	2902      	cmp	r1, #2
 800119c:	d149      	bne.n	8001232 <SD_ReadBlock+0x1c2>
 800119e:	e00b      	b.n	80011b8 <SD_ReadBlock+0x148>
  {
    /* Polling mode */
    while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
    {
      if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 80011a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011a4:	f004 f8fe 	bl	80053a4 <SDIO_GetFlagStatus>
 80011a8:	b130      	cbz	r0, 80011b8 <SD_ReadBlock+0x148>
      {
        for (count = 0; count < 8; count++)
        {
          *(tempbuff + count) = SDIO_ReadData();
 80011aa:	f004 f8b5 	bl	8005318 <SDIO_ReadData>
 80011ae:	5138      	str	r0, [r7, r4]
 80011b0:	3404      	adds	r4, #4
    /* Polling mode */
    while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
    {
      if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
      {
        for (count = 0; count < 8; count++)
 80011b2:	2c20      	cmp	r4, #32
 80011b4:	d1f9      	bne.n	80011aa <SD_ReadBlock+0x13a>
        {
          *(tempbuff + count) = SDIO_ReadData();
        }
        tempbuff += 8;
 80011b6:	3720      	adds	r7, #32
  }
  /* In case of single block transfer, no need of stop transfer at all.*/
  if (DeviceMode == SD_POLLING_MODE)
  {
    /* Polling mode */
    while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <SD_ReadBlock+0x228>)
 80011ba:	f240 642a 	movw	r4, #1578	; 0x62a
 80011be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c0:	ea03 0404 	and.w	r4, r3, r4
 80011c4:	2c00      	cmp	r4, #0
 80011c6:	d0eb      	beq.n	80011a0 <SD_ReadBlock+0x130>
        }
        tempbuff += 8;
      }
    }

    if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 80011c8:	2008      	movs	r0, #8
 80011ca:	f004 f8eb 	bl	80053a4 <SDIO_GetFlagStatus>
 80011ce:	b120      	cbz	r0, 80011da <SD_ReadBlock+0x16a>
    {
      SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 80011d0:	2008      	movs	r0, #8
 80011d2:	f004 f8f1 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_DATA_TIMEOUT;
      return(errorstatus);
 80011d6:	2504      	movs	r5, #4
 80011d8:	e055      	b.n	8001286 <SD_ReadBlock+0x216>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 80011da:	2002      	movs	r0, #2
 80011dc:	f004 f8e2 	bl	80053a4 <SDIO_GetFlagStatus>
 80011e0:	b120      	cbz	r0, 80011ec <SD_ReadBlock+0x17c>
    {
      SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 80011e2:	2002      	movs	r0, #2
 80011e4:	f004 f8e8 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_DATA_CRC_FAIL;
      return(errorstatus);
 80011e8:	2502      	movs	r5, #2
 80011ea:	e04c      	b.n	8001286 <SD_ReadBlock+0x216>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 80011ec:	2020      	movs	r0, #32
 80011ee:	f004 f8d9 	bl	80053a4 <SDIO_GetFlagStatus>
 80011f2:	b120      	cbz	r0, 80011fe <SD_ReadBlock+0x18e>
    {
      SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 80011f4:	2020      	movs	r0, #32
 80011f6:	f004 f8df 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_RX_OVERRUN;
      return(errorstatus);
 80011fa:	2506      	movs	r5, #6
 80011fc:	e043      	b.n	8001286 <SD_ReadBlock+0x216>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 80011fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001202:	f004 f8cf 	bl	80053a4 <SDIO_GetFlagStatus>
 8001206:	b148      	cbz	r0, 800121c <SD_ReadBlock+0x1ac>
    {
      SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8001208:	f44f 7000 	mov.w	r0, #512	; 0x200
 800120c:	f004 f8d4 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_START_BIT_ERR;
      return(errorstatus);
 8001210:	2507      	movs	r5, #7
 8001212:	e038      	b.n	8001286 <SD_ReadBlock+0x216>
    }
    while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
    {
      *tempbuff = SDIO_ReadData();
 8001214:	f004 f880 	bl	8005318 <SDIO_ReadData>
 8001218:	f847 0b04 	str.w	r0, [r7], #4
    {
      SDIO_ClearFlag(SDIO_FLAG_STBITERR);
      errorstatus = SD_START_BIT_ERR;
      return(errorstatus);
    }
    while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 800121c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001220:	f004 f8c0 	bl	80053a4 <SDIO_GetFlagStatus>
 8001224:	2800      	cmp	r0, #0
 8001226:	d1f5      	bne.n	8001214 <SD_ReadBlock+0x1a4>
      *tempbuff = SDIO_ReadData();
      tempbuff++;
    }

    /* Clear all the static flags */
    SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001228:	f240 50ff 	movw	r0, #1535	; 0x5ff
 800122c:	f004 f8c4 	bl	80053b8 <SDIO_ClearFlag>
 8001230:	e029      	b.n	8001286 <SD_ReadBlock+0x216>
  }
  else if (DeviceMode == SD_INTERRUPT_MODE)
 8001232:	2901      	cmp	r1, #1
 8001234:	d111      	bne.n	800125a <SD_ReadBlock+0x1ea>
  {
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
 8001236:	f248 302a 	movw	r0, #33578	; 0x832a
 800123a:	f004 f803 	bl	8005244 <SDIO_ITConfig>
    while ((TransferEnd == 0) && (TransferError == SD_OK))
 800123e:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 8001242:	b91b      	cbnz	r3, 800124c <SD_ReadBlock+0x1dc>
 8001244:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8001248:	2b2a      	cmp	r3, #42	; 0x2a
 800124a:	d0f8      	beq.n	800123e <SD_ReadBlock+0x1ce>
    {}
    if (TransferError != SD_OK)
 800124c:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8001250:	2b2a      	cmp	r3, #42	; 0x2a
 8001252:	d018      	beq.n	8001286 <SD_ReadBlock+0x216>
    {
      return(TransferError);
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <SD_ReadBlock+0x22c>)
 8001256:	791d      	ldrb	r5, [r3, #4]
 8001258:	e015      	b.n	8001286 <SD_ReadBlock+0x216>
    }
  }
  else if (DeviceMode == SD_DMA_MODE)
 800125a:	b9a1      	cbnz	r1, 8001286 <SD_ReadBlock+0x216>
  {
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 800125c:	4649      	mov	r1, r9
 800125e:	f240 302a 	movw	r0, #810	; 0x32a
 8001262:	f003 ffef 	bl	8005244 <SDIO_ITConfig>
    SDIO_DMACmd(ENABLE);
 8001266:	4648      	mov	r0, r9
 8001268:	f003 fff8 	bl	800525c <SDIO_DMACmd>
    //SDIO->DCTRL |= 0b1000;
    DMA_RxConfiguration(readbuff, BlockSize);
 800126c:	4638      	mov	r0, r7
 800126e:	4631      	mov	r1, r6
 8001270:	f7ff fa68 	bl	8000744 <DMA_RxConfiguration>
    while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <SD_ReadBlock+0x230>)
 8001276:	f002 ffda 	bl	800422e <DMA_GetFlagStatus>
 800127a:	2800      	cmp	r0, #0
 800127c:	d0fa      	beq.n	8001274 <SD_ReadBlock+0x204>
 800127e:	e002      	b.n	8001286 <SD_ReadBlock+0x216>
  SDIO_DMACmd(DISABLE);

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001280:	250e      	movs	r5, #14
 8001282:	e000      	b.n	8001286 <SD_ReadBlock+0x216>
    }
  }
  else
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
 8001284:	2526      	movs	r5, #38	; 0x26
    DMA_RxConfiguration(readbuff, BlockSize);
    while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
    {}
  }
  return(errorstatus);
}
 8001286:	4628      	mov	r0, r5
 8001288:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800128c:	000fffff 	.word	0x000fffff
 8001290:	200004e8 	.word	0x200004e8
 8001294:	200004cc 	.word	0x200004cc
 8001298:	40018000 	.word	0x40018000
 800129c:	20000008 	.word	0x20000008
 80012a0:	10002000 	.word	0x10002000
 80012a4:	20000028 	.word	0x20000028
 80012a8:	200004b8 	.word	0x200004b8

080012ac <SD_ReadMultiBlocks>:
*                  - NumberOfBlocks: number of blocks to be read.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_ReadMultiBlocks(uint32_t addr, uint32_t *readbuff, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 80012ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012b0:	b085      	sub	sp, #20
 80012b2:	9002      	str	r0, [sp, #8]
 80012b4:	4614      	mov	r4, r2
 80012b6:	4699      	mov	r9, r3
  SD_Error errorstatus = SD_OK;
  uint32_t count = 0, *tempbuff = readbuff;
  uint8_t power = 0;

  if (NULL == readbuff)
 80012b8:	4688      	mov	r8, r1
 80012ba:	2900      	cmp	r1, #0
 80012bc:	f000 8130 	beq.w	8001520 <SD_ReadMultiBlocks+0x274>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 80012c0:	4f9b      	ldr	r7, [pc, #620]	; (8001530 <SD_ReadMultiBlocks+0x284>)
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80012c2:	f8df b27c 	ldr.w	fp, [pc, #636]	; 8001540 <SD_ReadMultiBlocks+0x294>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 80012c6:	232a      	movs	r3, #42	; 0x2a
 80012c8:	713b      	strb	r3, [r7, #4]
  TransferEnd = 0;
 80012ca:	4e9a      	ldr	r6, [pc, #616]	; (8001534 <SD_ReadMultiBlocks+0x288>)
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80012cc:	4b9a      	ldr	r3, [pc, #616]	; (8001538 <SD_ReadMultiBlocks+0x28c>)
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 80012ce:	2500      	movs	r5, #0
  SDIO_DataInitStructure.SDIO_DataLength = 0;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 80012d0:	4658      	mov	r0, fp
  TransferError = SD_OK;
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80012d2:	f8cb 3000 	str.w	r3, [fp]
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 80012d6:	62b5      	str	r5, [r6, #40]	; 0x28
  TotalNumberOfBytes = 0;
 80012d8:	62f5      	str	r5, [r6, #44]	; 0x2c

  /* Clear all DPSM configuration */
  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 0;
 80012da:	f8cb 5004 	str.w	r5, [fp, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 80012de:	f8cb 5008 	str.w	r5, [fp, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 80012e2:	f8cb 500c 	str.w	r5, [fp, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 80012e6:	f8cb 5010 	str.w	r5, [fp, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 80012ea:	f8cb 5014 	str.w	r5, [fp, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 80012ee:	f003 ffed 	bl	80052cc <SDIO_DataConfig>
  SDIO_DMACmd(DISABLE);
 80012f2:	4628      	mov	r0, r5
 80012f4:	f003 ffb2 	bl	800525c <SDIO_DMACmd>

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 80012f8:	4628      	mov	r0, r5
 80012fa:	f003 ffdb 	bl	80052b4 <SDIO_GetResponse>
 80012fe:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001302:	f040 810b 	bne.w	800151c <SD_ReadMultiBlocks+0x270>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8001306:	6873      	ldr	r3, [r6, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d104      	bne.n	8001316 <SD_ReadMultiBlocks+0x6a>
  {
    BlockSize = 512;
    addr /= 512;
 800130c:	9a02      	ldr	r2, [sp, #8]
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 800130e:	f44f 7400 	mov.w	r4, #512	; 0x200
    addr /= 512;
 8001312:	0a52      	lsrs	r2, r2, #9
 8001314:	9202      	str	r2, [sp, #8]
  }
  
  if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
 8001316:	1e63      	subs	r3, r4, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800131e:	f080 80ff 	bcs.w	8001520 <SD_ReadMultiBlocks+0x274>
 8001322:	4023      	ands	r3, r4
 8001324:	9303      	str	r3, [sp, #12]
 8001326:	f040 80fb 	bne.w	8001520 <SD_ReadMultiBlocks+0x274>
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff f85e 	bl	80003ec <convert_from_bytes_to_power_of_two>

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8001330:	f8df a214 	ldr.w	sl, [pc, #532]	; 8001548 <SD_ReadMultiBlocks+0x29c>
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	f8ca 2008 	str.w	r2, [sl, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800133a:	9a03      	ldr	r2, [sp, #12]
    addr /= 512;
  }
  
  if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 800133c:	4603      	mov	r3, r0

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 800133e:	2510      	movs	r5, #16
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001340:	f8ca 200c 	str.w	r2, [sl, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001344:	4650      	mov	r0, sl
    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001346:	f44f 6280 	mov.w	r2, #1024	; 0x400
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 800134a:	9301      	str	r3, [sp, #4]
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 800134c:	f8ca 5004 	str.w	r5, [sl, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001350:	f8ca 2010 	str.w	r2, [sl, #16]
  if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    /* Set Block Size for Card */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8001354:	f8ca 4000 	str.w	r4, [sl]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001358:	f003 ff86 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 800135c:	4628      	mov	r0, r5
 800135e:	f7ff f86d 	bl	800043c <CmdResp1Error>

    if (SD_OK != errorstatus)
 8001362:	282a      	cmp	r0, #42	; 0x2a
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 8001364:	4605      	mov	r5, r0

    if (SD_OK != errorstatus)
 8001366:	9b01      	ldr	r3, [sp, #4]
 8001368:	f040 80dd 	bne.w	8001526 <SD_ReadMultiBlocks+0x27a>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  if (NumberOfBlocks > 1)
 800136c:	f1b9 0f01 	cmp.w	r9, #1
 8001370:	f240 80d9 	bls.w	8001526 <SD_ReadMultiBlocks+0x27a>
  {
    /* Common to all modes */
    if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
 8001374:	fb09 f404 	mul.w	r4, r9, r4
 8001378:	f1b4 7f00 	cmp.w	r4, #33554432	; 0x2000000
 800137c:	f080 80d0 	bcs.w	8001520 <SD_ReadMultiBlocks+0x274>
    StopCondition = 1;
    DestBuffer = readbuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001380:	011b      	lsls	r3, r3, #4
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    DestBuffer = readbuff;
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <SD_ReadMultiBlocks+0x290>)

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001384:	f8cb 3008 	str.w	r3, [fp, #8]
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8001388:	2302      	movs	r3, #2
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    DestBuffer = readbuff;
 800138a:	f8c2 8000 	str.w	r8, [r2]

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 800138e:	f8cb 300c 	str.w	r3, [fp, #12]

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    DestBuffer = readbuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001392:	4a69      	ldr	r2, [pc, #420]	; (8001538 <SD_ReadMultiBlocks+0x28c>)
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001394:	9b03      	ldr	r3, [sp, #12]
      errorstatus = SD_INVALID_PARAMETER;
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
 8001396:	f04f 0901 	mov.w	r9, #1
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
    SDIO_DataConfig(&SDIO_DataInitStructure);
 800139a:	4869      	ldr	r0, [pc, #420]	; (8001540 <SD_ReadMultiBlocks+0x294>)

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    DestBuffer = readbuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800139c:	f8cb 2000 	str.w	r2, [fp]
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 80013a0:	f8cb 3010 	str.w	r3, [fp, #16]
    {
      errorstatus = SD_INVALID_PARAMETER;
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 80013a4:	62f4      	str	r4, [r6, #44]	; 0x2c
    StopCondition = 1;
 80013a6:	f8c6 9030 	str.w	r9, [r6, #48]	; 0x30
    DestBuffer = readbuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 80013aa:	f8cb 4004 	str.w	r4, [fp, #4]
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 80013ae:	f8cb 9014 	str.w	r9, [fp, #20]
    SDIO_DataConfig(&SDIO_DataInitStructure);
 80013b2:	f003 ff8b 	bl	80052cc <SDIO_DataConfig>

    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 80013b6:	9a02      	ldr	r2, [sp, #8]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80013b8:	2340      	movs	r3, #64	; 0x40
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
    SDIO_DataConfig(&SDIO_DataInitStructure);

    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 80013ba:	f8ca 2000 	str.w	r2, [sl]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80013be:	9a03      	ldr	r2, [sp, #12]
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
    SDIO_DataConfig(&SDIO_DataInitStructure);

    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
 80013c0:	3d18      	subs	r5, #24
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80013c2:	f8ca 3008 	str.w	r3, [sl, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 80013c6:	4650      	mov	r0, sl
    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80013c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
    SDIO_DataConfig(&SDIO_DataInitStructure);

    /* Send CMD18 READ_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
 80013cc:	f8ca 5004 	str.w	r5, [sl, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80013d0:	f8ca 200c 	str.w	r2, [sl, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80013d4:	f8ca 3010 	str.w	r3, [sl, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 80013d8:	f003 ff46 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
 80013dc:	4628      	mov	r0, r5
 80013de:	f7ff f82d 	bl	800043c <CmdResp1Error>

    if (errorstatus != SD_OK)
 80013e2:	282a      	cmp	r0, #42	; 0x2a
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);

    errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
 80013e4:	4605      	mov	r5, r0

    if (errorstatus != SD_OK)
 80013e6:	f040 809e 	bne.w	8001526 <SD_ReadMultiBlocks+0x27a>
    {
      return(errorstatus);
    }

    if (DeviceMode == SD_POLLING_MODE)
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	2902      	cmp	r1, #2
 80013ee:	d16c      	bne.n	80014ca <SD_ReadMultiBlocks+0x21e>
 80013f0:	4644      	mov	r4, r8
 80013f2:	e00b      	b.n	800140c <SD_ReadMultiBlocks+0x160>
    {
      /* Polling mode */
      while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
      {
        if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 80013f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013f8:	f003 ffd4 	bl	80053a4 <SDIO_GetFlagStatus>
 80013fc:	b130      	cbz	r0, 800140c <SD_ReadMultiBlocks+0x160>
        {
          for (count = 0; count < SD_HALFFIFO; count++)
          {
            *(tempbuff + count) = SDIO_ReadData();
 80013fe:	f003 ff8b 	bl	8005318 <SDIO_ReadData>
 8001402:	51e0      	str	r0, [r4, r7]
 8001404:	3704      	adds	r7, #4
      /* Polling mode */
      while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
      {
        if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
        {
          for (count = 0; count < SD_HALFFIFO; count++)
 8001406:	2f20      	cmp	r7, #32
 8001408:	d1f9      	bne.n	80013fe <SD_ReadMultiBlocks+0x152>
          {
            *(tempbuff + count) = SDIO_ReadData();
          }
          tempbuff += SD_HALFFIFO;
 800140a:	3420      	adds	r4, #32
    }

    if (DeviceMode == SD_POLLING_MODE)
    {
      /* Polling mode */
      while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <SD_ReadMultiBlocks+0x298>)
 800140e:	f240 372a 	movw	r7, #810	; 0x32a
 8001412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001414:	ea03 0707 	and.w	r7, r3, r7
 8001418:	2f00      	cmp	r7, #0
 800141a:	d0eb      	beq.n	80013f4 <SD_ReadMultiBlocks+0x148>
          }
          tempbuff += SD_HALFFIFO;
        }
      }

      if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 800141c:	2008      	movs	r0, #8
 800141e:	f003 ffc1 	bl	80053a4 <SDIO_GetFlagStatus>
 8001422:	b120      	cbz	r0, 800142e <SD_ReadMultiBlocks+0x182>
      {
        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8001424:	2008      	movs	r0, #8
 8001426:	f003 ffc7 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_DATA_TIMEOUT;
        return(errorstatus);
 800142a:	2504      	movs	r5, #4
 800142c:	e07b      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 800142e:	2002      	movs	r0, #2
 8001430:	f003 ffb8 	bl	80053a4 <SDIO_GetFlagStatus>
 8001434:	b120      	cbz	r0, 8001440 <SD_ReadMultiBlocks+0x194>
      {
        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8001436:	2002      	movs	r0, #2
 8001438:	f003 ffbe 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_DATA_CRC_FAIL;
        return(errorstatus);
 800143c:	2502      	movs	r5, #2
 800143e:	e072      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 8001440:	2020      	movs	r0, #32
 8001442:	f003 ffaf 	bl	80053a4 <SDIO_GetFlagStatus>
 8001446:	b120      	cbz	r0, 8001452 <SD_ReadMultiBlocks+0x1a6>
      {
        SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 8001448:	2020      	movs	r0, #32
 800144a:	f003 ffb5 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_RX_OVERRUN;
        return(errorstatus);
 800144e:	2506      	movs	r5, #6
 8001450:	e069      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8001452:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001456:	f003 ffa5 	bl	80053a4 <SDIO_GetFlagStatus>
 800145a:	b148      	cbz	r0, 8001470 <SD_ReadMultiBlocks+0x1c4>
      {
        SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 800145c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001460:	f003 ffaa 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_START_BIT_ERR;
        return(errorstatus);
 8001464:	2507      	movs	r5, #7
 8001466:	e05e      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
      }
      while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
      {
        *tempbuff = SDIO_ReadData();
 8001468:	f003 ff56 	bl	8005318 <SDIO_ReadData>
 800146c:	f844 0b04 	str.w	r0, [r4], #4
      {
        SDIO_ClearFlag(SDIO_FLAG_STBITERR);
        errorstatus = SD_START_BIT_ERR;
        return(errorstatus);
      }
      while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 8001470:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001474:	f003 ff96 	bl	80053a4 <SDIO_GetFlagStatus>
 8001478:	2800      	cmp	r0, #0
 800147a:	d1f5      	bne.n	8001468 <SD_ReadMultiBlocks+0x1bc>
      {
        *tempbuff = SDIO_ReadData();
        tempbuff++;
      }

      if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
 800147c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001480:	f003 ff90 	bl	80053a4 <SDIO_GetFlagStatus>
 8001484:	b1e0      	cbz	r0, 80014c0 <SD_ReadMultiBlocks+0x214>
      {
        /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
 8001486:	6873      	ldr	r3, [r6, #4]
 8001488:	b11b      	cbz	r3, 8001492 <SD_ReadMultiBlocks+0x1e6>
 800148a:	2b02      	cmp	r3, #2
 800148c:	d001      	beq.n	8001492 <SD_ReadMultiBlocks+0x1e6>
 800148e:	2b01      	cmp	r3, #1
 8001490:	d116      	bne.n	80014c0 <SD_ReadMultiBlocks+0x214>
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001492:	2300      	movs	r3, #0
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001494:	2240      	movs	r2, #64	; 0x40
        /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 8001496:	240c      	movs	r4, #12
      {
        /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001498:	f8ca 3000 	str.w	r3, [sl]
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800149c:	f8ca 300c 	str.w	r3, [sl, #12]
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
          SDIO_SendCommand(&SDIO_CmdInitStructure);
 80014a0:	4829      	ldr	r0, [pc, #164]	; (8001548 <SD_ReadMultiBlocks+0x29c>)
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80014a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80014a6:	f8ca 2008 	str.w	r2, [sl, #8]
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80014aa:	f8ca 3010 	str.w	r3, [sl, #16]
        /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 80014ae:	f8ca 4004 	str.w	r4, [sl, #4]
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
          SDIO_SendCommand(&SDIO_CmdInitStructure);
 80014b2:	f003 fed9 	bl	8005268 <SDIO_SendCommand>

          errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7fe ffc0 	bl	800043c <CmdResp1Error>

          if (errorstatus != SD_OK)
 80014bc:	282a      	cmp	r0, #42	; 0x2a
 80014be:	d131      	bne.n	8001524 <SD_ReadMultiBlocks+0x278>
            return(errorstatus);
          }
        }
      }
      /* Clear all the static flags */
      SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 80014c0:	f240 50ff 	movw	r0, #1535	; 0x5ff
 80014c4:	f003 ff78 	bl	80053b8 <SDIO_ClearFlag>
 80014c8:	e02d      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
    }
    else if (DeviceMode == SD_INTERRUPT_MODE)
 80014ca:	2901      	cmp	r1, #1
 80014cc:	d109      	bne.n	80014e2 <SD_ReadMultiBlocks+0x236>
    {
      SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR, ENABLE);
 80014ce:	f248 302a 	movw	r0, #33578	; 0x832a
 80014d2:	f003 feb7 	bl	8005244 <SDIO_ITConfig>
      while ((TransferEnd == 0) && (TransferError == SD_OK))
 80014d6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80014d8:	b9d3      	cbnz	r3, 8001510 <SD_ReadMultiBlocks+0x264>
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	2b2a      	cmp	r3, #42	; 0x2a
 80014de:	d0fa      	beq.n	80014d6 <SD_ReadMultiBlocks+0x22a>
 80014e0:	e016      	b.n	8001510 <SD_ReadMultiBlocks+0x264>
      if (TransferError != SD_OK)
      {
        return(TransferError);
      }
    }
    else if (DeviceMode == SD_DMA_MODE)
 80014e2:	bb01      	cbnz	r1, 8001526 <SD_ReadMultiBlocks+0x27a>
    {
      SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
 80014e4:	4649      	mov	r1, r9
 80014e6:	f240 302a 	movw	r0, #810	; 0x32a
 80014ea:	f003 feab 	bl	8005244 <SDIO_ITConfig>
      SDIO_DMACmd(ENABLE);
 80014ee:	4648      	mov	r0, r9
 80014f0:	f003 feb4 	bl	800525c <SDIO_DMACmd>
      DMA_RxConfiguration(readbuff, (NumberOfBlocks * BlockSize));
 80014f4:	4640      	mov	r0, r8
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff f924 	bl	8000744 <DMA_RxConfiguration>
      while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 80014fc:	4813      	ldr	r0, [pc, #76]	; (800154c <SD_ReadMultiBlocks+0x2a0>)
 80014fe:	f002 fe96 	bl	800422e <DMA_GetFlagStatus>
 8001502:	2800      	cmp	r0, #0
 8001504:	d0fa      	beq.n	80014fc <SD_ReadMultiBlocks+0x250>
      {}
      while ((TransferEnd == 0) && (TransferError == SD_OK))
 8001506:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8001508:	b913      	cbnz	r3, 8001510 <SD_ReadMultiBlocks+0x264>
 800150a:	793b      	ldrb	r3, [r7, #4]
 800150c:	2b2a      	cmp	r3, #42	; 0x2a
 800150e:	d0fa      	beq.n	8001506 <SD_ReadMultiBlocks+0x25a>
      {}
      if (TransferError != SD_OK)
 8001510:	793b      	ldrb	r3, [r7, #4]
 8001512:	2b2a      	cmp	r3, #42	; 0x2a
 8001514:	d007      	beq.n	8001526 <SD_ReadMultiBlocks+0x27a>
      {
        return(TransferError);
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SD_ReadMultiBlocks+0x284>)
 8001518:	791d      	ldrb	r5, [r3, #4]
 800151a:	e004      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
  SDIO_DMACmd(DISABLE);

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 800151c:	250e      	movs	r5, #14
 800151e:	e002      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
  {
    /* Common to all modes */
    if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
    {
      errorstatus = SD_INVALID_PARAMETER;
      return(errorstatus);
 8001520:	2526      	movs	r5, #38	; 0x26
 8001522:	e000      	b.n	8001526 <SD_ReadMultiBlocks+0x27a>
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
          SDIO_SendCommand(&SDIO_CmdInitStructure);

          errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);

          if (errorstatus != SD_OK)
 8001524:	4605      	mov	r5, r0
        return(TransferError);
      }
    }
  }
  return(errorstatus);
}
 8001526:	4628      	mov	r0, r5
 8001528:	b005      	add	sp, #20
 800152a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000028 	.word	0x20000028
 8001538:	000fffff 	.word	0x000fffff
 800153c:	200004cc 	.word	0x200004cc
 8001540:	200004e8 	.word	0x200004e8
 8001544:	40018000 	.word	0x40018000
 8001548:	200004b8 	.word	0x200004b8
 800154c:	10002000 	.word	0x10002000

08001550 <SD_WriteBlock>:
*                  - BlockSize: the SD card Data block size.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteBlock(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize)
{
 8001550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SD_Error errorstatus = SD_OK;
  uint8_t  power = 0, cardstate = 0;
 8001554:	2600      	movs	r6, #0
*                  - BlockSize: the SD card Data block size.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteBlock(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize)
{
 8001556:	b087      	sub	sp, #28
 8001558:	4604      	mov	r4, r0
 800155a:	4615      	mov	r5, r2
  SD_Error errorstatus = SD_OK;
  uint8_t  power = 0, cardstate = 0;
 800155c:	f88d 6017 	strb.w	r6, [sp, #23]
  uint32_t timeout = 0, bytestransferred = 0;
  uint32_t cardstatus = 0, count = 0, restwords = 0;
  uint32_t *tempbuff = writebuff;

  if (writebuff == NULL)
 8001560:	4688      	mov	r8, r1
 8001562:	2900      	cmp	r1, #0
 8001564:	f000 8170 	beq.w	8001848 <SD_WriteBlock+0x2f8>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 8001568:	4fb8      	ldr	r7, [pc, #736]	; (800184c <SD_WriteBlock+0x2fc>)
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800156a:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800185c <SD_WriteBlock+0x30c>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 800156e:	232a      	movs	r3, #42	; 0x2a
  TransferEnd = 0;
 8001570:	f8df 92f4 	ldr.w	r9, [pc, #756]	; 8001868 <SD_WriteBlock+0x318>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 8001574:	713b      	strb	r3, [r7, #4]
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001576:	4bb6      	ldr	r3, [pc, #728]	; (8001850 <SD_WriteBlock+0x300>)
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 8001578:	f8c9 6028 	str.w	r6, [r9, #40]	; 0x28
  TotalNumberOfBytes = 0;
 800157c:	f8c9 602c 	str.w	r6, [r9, #44]	; 0x2c
  SDIO_DataInitStructure.SDIO_DataLength = 0;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8001580:	4650      	mov	r0, sl

  TransferError = SD_OK;
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001582:	f8ca 3000 	str.w	r3, [sl]
  SDIO_DataInitStructure.SDIO_DataLength = 0;
 8001586:	f8ca 6004 	str.w	r6, [sl, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800158a:	f8ca 6008 	str.w	r6, [sl, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800158e:	f8ca 600c 	str.w	r6, [sl, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001592:	f8ca 6010 	str.w	r6, [sl, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 8001596:	f8ca 6014 	str.w	r6, [sl, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 800159a:	f003 fe97 	bl	80052cc <SDIO_DataConfig>
  SDIO_DMACmd(DISABLE);
 800159e:	4630      	mov	r0, r6
 80015a0:	f003 fe5c 	bl	800525c <SDIO_DMACmd>

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 80015a4:	4630      	mov	r0, r6
 80015a6:	f003 fe85 	bl	80052b4 <SDIO_GetResponse>
 80015aa:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80015ae:	464e      	mov	r6, r9
 80015b0:	f040 8148 	bne.w	8001844 <SD_WriteBlock+0x2f4>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80015b4:	6873      	ldr	r3, [r6, #4]
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d102      	bne.n	80015c0 <SD_WriteBlock+0x70>
  {
    BlockSize = 512;
    addr /= 512;
 80015ba:	0a64      	lsrs	r4, r4, #9
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 80015bc:	f44f 7500 	mov.w	r5, #512	; 0x200
    addr /= 512;
  }
  
  /* Set the block size, both on controller and card */
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 80015c0:	f105 3bff 	add.w	fp, r5, #4294967295
 80015c4:	fa1f f38b 	uxth.w	r3, fp
 80015c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015cc:	f080 813c 	bcs.w	8001848 <SD_WriteBlock+0x2f8>
 80015d0:	ea1b 0b05 	ands.w	fp, fp, r5
 80015d4:	f040 8138 	bne.w	8001848 <SD_WriteBlock+0x2f8>
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 80015d8:	4628      	mov	r0, r5
 80015da:	f7fe ff07 	bl	80003ec <convert_from_bytes_to_power_of_two>

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80015de:	f8df 9274 	ldr.w	r9, [pc, #628]	; 8001854 <SD_WriteBlock+0x304>
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80015e2:	2340      	movs	r3, #64	; 0x40
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 80015e4:	2210      	movs	r2, #16
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80015ea:	f8c9 3008 	str.w	r3, [r9, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80015ee:	f8c9 1010 	str.w	r1, [r9, #16]
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 80015f2:	f8c9 2004 	str.w	r2, [r9, #4]
  /* Set the block size, both on controller and card */
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 80015f6:	f8c9 5000 	str.w	r5, [r9]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80015fa:	f8c9 b00c 	str.w	fp, [r9, #12]
  }
  
  /* Set the block size, both on controller and card */
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 80015fe:	9003      	str	r0, [sp, #12]
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001600:	4648      	mov	r0, r9
 8001602:	9102      	str	r1, [sp, #8]
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	f003 fe2e 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 800160c:	9a01      	ldr	r2, [sp, #4]
 800160e:	4610      	mov	r0, r2
 8001610:	f7fe ff14 	bl	800043c <CmdResp1Error>

    if (errorstatus != SD_OK)
 8001614:	282a      	cmp	r0, #42	; 0x2a
 8001616:	9902      	ldr	r1, [sp, #8]
 8001618:	9b00      	ldr	r3, [sp, #0]
 800161a:	f040 8128 	bne.w	800186e <SD_WriteBlock+0x31e>
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  /* Wait till card is ready for data Added */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 800161e:	6832      	ldr	r2, [r6, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001620:	f8c9 3008 	str.w	r3, [r9, #8]
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  /* Wait till card is ready for data Added */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8001624:	0412      	lsls	r2, r2, #16
 8001626:	f8c9 2000 	str.w	r2, [r9]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 800162a:	220d      	movs	r2, #13
 800162c:	f8c9 2004 	str.w	r2, [r9, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001630:	f8c9 1010 	str.w	r1, [r9, #16]

  /* Wait till card is ready for data Added */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001634:	f8c9 b00c 	str.w	fp, [r9, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001638:	4648      	mov	r0, r9
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	f003 fe14 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 8001640:	9a01      	ldr	r2, [sp, #4]
 8001642:	4610      	mov	r0, r2
 8001644:	f7fe fefa 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001648:	282a      	cmp	r0, #42	; 0x2a
 800164a:	f040 8110 	bne.w	800186e <SD_WriteBlock+0x31e>
  {
    return(errorstatus);
  }

  cardstatus = SDIO_GetResponse(SDIO_RESP1);
 800164e:	4658      	mov	r0, fp
 8001650:	f003 fe30 	bl	80052b4 <SDIO_GetResponse>

  timeout = SD_DATATIMEOUT;
 8001654:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8001850 <SD_WriteBlock+0x300>

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
 8001658:	e021      	b.n	800169e <SD_WriteBlock+0x14e>
  {
    timeout--;
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 800165a:	6832      	ldr	r2, [r6, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800165c:	2140      	movs	r1, #64	; 0x40
  timeout = SD_DATATIMEOUT;

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
  {
    timeout--;
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 800165e:	0412      	lsls	r2, r2, #16
 8001660:	f8c9 2000 	str.w	r2, [r9]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001664:	f8c9 1008 	str.w	r1, [r9, #8]

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
  {
    timeout--;
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 8001668:	220d      	movs	r2, #13
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800166a:	f44f 6180 	mov.w	r1, #1024	; 0x400
  {
    timeout--;
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 800166e:	f8c9 300c 	str.w	r3, [r9, #12]

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
  {
    timeout--;
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 8001672:	f8c9 2004 	str.w	r2, [r9, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001676:	f8c9 1010 	str.w	r1, [r9, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 800167a:	4876      	ldr	r0, [pc, #472]	; (8001854 <SD_WriteBlock+0x304>)
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	9201      	str	r2, [sp, #4]
 8001680:	f003 fdf2 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 8001684:	9a01      	ldr	r2, [sp, #4]
 8001686:	4610      	mov	r0, r2
 8001688:	f7fe fed8 	bl	800043c <CmdResp1Error>

    if (errorstatus != SD_OK)
 800168c:	282a      	cmp	r0, #42	; 0x2a
 800168e:	9b00      	ldr	r3, [sp, #0]
 8001690:	f040 80ed 	bne.w	800186e <SD_WriteBlock+0x31e>
    {
      return(errorstatus);
    }
    cardstatus = SDIO_GetResponse(SDIO_RESP1);
 8001694:	4618      	mov	r0, r3

  timeout = SD_DATATIMEOUT;

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
  {
    timeout--;
 8001696:	f10b 3bff 	add.w	fp, fp, #4294967295

    if (errorstatus != SD_OK)
    {
      return(errorstatus);
    }
    cardstatus = SDIO_GetResponse(SDIO_RESP1);
 800169a:	f003 fe0b 	bl	80052b4 <SDIO_GetResponse>

  cardstatus = SDIO_GetResponse(SDIO_RESP1);

  timeout = SD_DATATIMEOUT;

  while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
 800169e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80016a2:	d103      	bne.n	80016ac <SD_WriteBlock+0x15c>
 80016a4:	f1bb 0f00 	cmp.w	fp, #0
 80016a8:	d1d7      	bne.n	800165a <SD_WriteBlock+0x10a>
 80016aa:	e0df      	b.n	800186c <SD_WriteBlock+0x31c>
      return(errorstatus);
    }
    cardstatus = SDIO_GetResponse(SDIO_RESP1);
  }

  if (timeout == 0)
 80016ac:	f1bb 0f00 	cmp.w	fp, #0
 80016b0:	f000 80dc 	beq.w	800186c <SD_WriteBlock+0x31c>
  }

  /* Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80016b4:	2340      	movs	r3, #64	; 0x40
  {
    return(SD_ERROR);
  }

  /* Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = addr;
 80016b6:	f8c9 4000 	str.w	r4, [r9]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80016ba:	f8c9 3008 	str.w	r3, [r9, #8]
    return(SD_ERROR);
  }

  /* Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
 80016be:	2418      	movs	r4, #24
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80016c0:	f44f 6380 	mov.w	r3, #1024	; 0x400

  /* Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80016c4:	f04f 0b00 	mov.w	fp, #0
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80016c8:	f8c9 3010 	str.w	r3, [r9, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80016cc:	4861      	ldr	r0, [pc, #388]	; (8001854 <SD_WriteBlock+0x304>)
    return(SD_ERROR);
  }

  /* Send CMD24 WRITE_SINGLE_BLOCK */
  SDIO_CmdInitStructure.SDIO_Argument = addr;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
 80016ce:	f8c9 4004 	str.w	r4, [r9, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80016d2:	f8c9 b00c 	str.w	fp, [r9, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 80016d6:	f003 fdc7 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_WRITE_SINGLE_BLOCK);
 80016da:	4620      	mov	r0, r4
 80016dc:	f7fe feae 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 80016e0:	282a      	cmp	r0, #42	; 0x2a
 80016e2:	f040 80c4 	bne.w	800186e <SD_WriteBlock+0x31e>
    return(errorstatus);
  }

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
  SrcBuffer = writebuff;
 80016e6:	4b5c      	ldr	r3, [pc, #368]	; (8001858 <SD_WriteBlock+0x308>)

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 80016e8:	9a03      	ldr	r2, [sp, #12]
    return(errorstatus);
  }

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
  SrcBuffer = writebuff;
 80016ea:	f8c3 8000 	str.w	r8, [r3]

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80016ee:	4b58      	ldr	r3, [pc, #352]	; (8001850 <SD_WriteBlock+0x300>)
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 80016f0:	3c17      	subs	r4, #23

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
  SrcBuffer = writebuff;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80016f2:	f8ca 3000 	str.w	r3, [sl]
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  TotalNumberOfBytes = BlockSize;
 80016f6:	62f5      	str	r5, [r6, #44]	; 0x2c
  StopCondition = 0;
  SrcBuffer = writebuff;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 80016f8:	0113      	lsls	r3, r2, #4
  {
    return(errorstatus);
  }

  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
 80016fa:	f8c6 b030 	str.w	fp, [r6, #48]	; 0x30
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 80016fe:	4857      	ldr	r0, [pc, #348]	; (800185c <SD_WriteBlock+0x30c>)
  TotalNumberOfBytes = BlockSize;
  StopCondition = 0;
  SrcBuffer = writebuff;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 8001700:	f8ca 5004 	str.w	r5, [sl, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001704:	f8ca 3008 	str.w	r3, [sl, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8001708:	f8ca b00c 	str.w	fp, [sl, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 800170c:	f8ca b010 	str.w	fp, [sl, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8001710:	f8ca 4014 	str.w	r4, [sl, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8001714:	f003 fdda 	bl	80052cc <SDIO_DataConfig>

  /* In case of single data block transfer no need of stop command at all */
  if (DeviceMode == SD_POLLING_MODE)
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	2902      	cmp	r1, #2
 800171c:	d158      	bne.n	80017d0 <SD_WriteBlock+0x280>
 800171e:	e028      	b.n	8001772 <SD_WriteBlock+0x222>
  {
    while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
    {
      if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
 8001720:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001724:	f003 fe3e 	bl	80053a4 <SDIO_GetFlagStatus>
 8001728:	b318      	cbz	r0, 8001772 <SD_WriteBlock+0x222>
      {
        if ((TotalNumberOfBytes - bytestransferred) < 32)
 800172a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800172c:	ebcb 0303 	rsb	r3, fp, r3
 8001730:	2b1f      	cmp	r3, #31
 8001732:	d813      	bhi.n	800175c <SD_WriteBlock+0x20c>
        {
          restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);
 8001734:	f013 0f03 	tst.w	r3, #3
 8001738:	ea4f 0493 	mov.w	r4, r3, lsr #2
 800173c:	bf18      	it	ne
 800173e:	3401      	addne	r4, #1

          for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 8001740:	4647      	mov	r7, r8
 8001742:	2500      	movs	r5, #0
 8001744:	e004      	b.n	8001750 <SD_WriteBlock+0x200>
          {
            SDIO_WriteData(*tempbuff);
 8001746:	f857 0b04 	ldr.w	r0, [r7], #4
 800174a:	f003 fdeb 	bl	8005324 <SDIO_WriteData>
      {
        if ((TotalNumberOfBytes - bytestransferred) < 32)
        {
          restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) : (( TotalNumberOfBytes -  bytestransferred) / 4 + 1);

          for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 800174e:	3501      	adds	r5, #1
 8001750:	42a5      	cmp	r5, r4
 8001752:	d3f8      	bcc.n	8001746 <SD_WriteBlock+0x1f6>
*                    transferred.
*                  - BlockSize: the SD card Data block size.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteBlock(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize)
 8001754:	00a4      	lsls	r4, r4, #2
 8001756:	44a3      	add	fp, r4
 8001758:	44a0      	add	r8, r4
 800175a:	e00a      	b.n	8001772 <SD_WriteBlock+0x222>
        }
        else
        {
          for (count = 0; count < 8; count++)
          {
            SDIO_WriteData(*(tempbuff + count));
 800175c:	f858 0004 	ldr.w	r0, [r8, r4]
 8001760:	3404      	adds	r4, #4
 8001762:	f003 fddf 	bl	8005324 <SDIO_WriteData>
            SDIO_WriteData(*tempbuff);
          }
        }
        else
        {
          for (count = 0; count < 8; count++)
 8001766:	2c20      	cmp	r4, #32
 8001768:	d1f8      	bne.n	800175c <SD_WriteBlock+0x20c>
          {
            SDIO_WriteData(*(tempbuff + count));
          }
          tempbuff += 8;
 800176a:	f108 0820 	add.w	r8, r8, #32
          bytestransferred += 32;
 800176e:	f10b 0b20 	add.w	fp, fp, #32
  SDIO_DataConfig(&SDIO_DataInitStructure);

  /* In case of single data block transfer no need of stop command at all */
  if (DeviceMode == SD_POLLING_MODE)
  {
    while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
 8001772:	4b3b      	ldr	r3, [pc, #236]	; (8001860 <SD_WriteBlock+0x310>)
 8001774:	f240 641a 	movw	r4, #1562	; 0x61a
 8001778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800177a:	ea03 0404 	and.w	r4, r3, r4
 800177e:	2c00      	cmp	r4, #0
 8001780:	d0ce      	beq.n	8001720 <SD_WriteBlock+0x1d0>
          tempbuff += 8;
          bytestransferred += 32;
        }
      }
    }
    if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8001782:	2008      	movs	r0, #8
 8001784:	f003 fe0e 	bl	80053a4 <SDIO_GetFlagStatus>
 8001788:	b120      	cbz	r0, 8001794 <SD_WriteBlock+0x244>
    {
      SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 800178a:	2008      	movs	r0, #8
 800178c:	f003 fe14 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_DATA_TIMEOUT;
      return(errorstatus);
 8001790:	2004      	movs	r0, #4
 8001792:	e06c      	b.n	800186e <SD_WriteBlock+0x31e>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8001794:	2002      	movs	r0, #2
 8001796:	f003 fe05 	bl	80053a4 <SDIO_GetFlagStatus>
 800179a:	b120      	cbz	r0, 80017a6 <SD_WriteBlock+0x256>
    {
      SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 800179c:	2002      	movs	r0, #2
 800179e:	f003 fe0b 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_DATA_CRC_FAIL;
      return(errorstatus);
 80017a2:	2002      	movs	r0, #2
 80017a4:	e063      	b.n	800186e <SD_WriteBlock+0x31e>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
 80017a6:	2010      	movs	r0, #16
 80017a8:	f003 fdfc 	bl	80053a4 <SDIO_GetFlagStatus>
 80017ac:	b120      	cbz	r0, 80017b8 <SD_WriteBlock+0x268>
    {
      SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
 80017ae:	2010      	movs	r0, #16
 80017b0:	f003 fe02 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_TX_UNDERRUN;
      return(errorstatus);
 80017b4:	2005      	movs	r0, #5
 80017b6:	e05a      	b.n	800186e <SD_WriteBlock+0x31e>
    }
    else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 80017b8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017bc:	f003 fdf2 	bl	80053a4 <SDIO_GetFlagStatus>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d02e      	beq.n	8001822 <SD_WriteBlock+0x2d2>
    {
      SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 80017c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017c8:	f003 fdf6 	bl	80053b8 <SDIO_ClearFlag>
      errorstatus = SD_START_BIT_ERR;
      return(errorstatus);
 80017cc:	2007      	movs	r0, #7
 80017ce:	e04e      	b.n	800186e <SD_WriteBlock+0x31e>
    }
  }
  else if (DeviceMode == SD_INTERRUPT_MODE)
 80017d0:	2901      	cmp	r1, #1
 80017d2:	d109      	bne.n	80017e8 <SD_WriteBlock+0x298>
  {
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
 80017d4:	f244 301a 	movw	r0, #17178	; 0x431a
 80017d8:	f003 fd34 	bl	8005244 <SDIO_ITConfig>
    while ((TransferEnd == 0) && (TransferError == SD_OK))
 80017dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80017de:	b9d3      	cbnz	r3, 8001816 <SD_WriteBlock+0x2c6>
 80017e0:	793b      	ldrb	r3, [r7, #4]
 80017e2:	2b2a      	cmp	r3, #42	; 0x2a
 80017e4:	d0fa      	beq.n	80017dc <SD_WriteBlock+0x28c>
 80017e6:	e016      	b.n	8001816 <SD_WriteBlock+0x2c6>
    if (TransferError != SD_OK)
    {
      return(TransferError);
    }
  }
  else if (DeviceMode == SD_DMA_MODE)
 80017e8:	b9d9      	cbnz	r1, 8001822 <SD_WriteBlock+0x2d2>
  {
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
 80017ea:	f240 301a 	movw	r0, #794	; 0x31a
 80017ee:	4621      	mov	r1, r4
 80017f0:	f003 fd28 	bl	8005244 <SDIO_ITConfig>
    DMA_TxConfiguration(writebuff, BlockSize);
 80017f4:	4640      	mov	r0, r8
 80017f6:	4629      	mov	r1, r5
 80017f8:	f7fe ff72 	bl	80006e0 <DMA_TxConfiguration>
    SDIO_DMACmd(ENABLE);
 80017fc:	4620      	mov	r0, r4
 80017fe:	f003 fd2d 	bl	800525c <SDIO_DMACmd>
    while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 8001802:	4818      	ldr	r0, [pc, #96]	; (8001864 <SD_WriteBlock+0x314>)
 8001804:	f002 fd13 	bl	800422e <DMA_GetFlagStatus>
 8001808:	2800      	cmp	r0, #0
 800180a:	d0fa      	beq.n	8001802 <SD_WriteBlock+0x2b2>
    {}
    while ((TransferEnd == 0) && (TransferError == SD_OK))
 800180c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800180e:	b913      	cbnz	r3, 8001816 <SD_WriteBlock+0x2c6>
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	2b2a      	cmp	r3, #42	; 0x2a
 8001814:	d0fa      	beq.n	800180c <SD_WriteBlock+0x2bc>
    {}
    if (TransferError != SD_OK)
 8001816:	793b      	ldrb	r3, [r7, #4]
 8001818:	2b2a      	cmp	r3, #42	; 0x2a
 800181a:	d002      	beq.n	8001822 <SD_WriteBlock+0x2d2>
    {
      return(TransferError);
 800181c:	4b0b      	ldr	r3, [pc, #44]	; (800184c <SD_WriteBlock+0x2fc>)
 800181e:	7918      	ldrb	r0, [r3, #4]
 8001820:	e025      	b.n	800186e <SD_WriteBlock+0x31e>
    }
  }

  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001822:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001826:	f003 fdc7 	bl	80053b8 <SDIO_ClearFlag>
  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
  {
    errorstatus = IsCardProgramming(&cardstate);
 800182a:	f10d 0017 	add.w	r0, sp, #23
 800182e:	f7fe fe93 	bl	8000558 <IsCardProgramming>
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);

  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8001832:	282a      	cmp	r0, #42	; 0x2a
 8001834:	d11b      	bne.n	800186e <SD_WriteBlock+0x31e>
 8001836:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800183a:	3b06      	subs	r3, #6
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b01      	cmp	r3, #1
 8001840:	d9f3      	bls.n	800182a <SD_WriteBlock+0x2da>
 8001842:	e014      	b.n	800186e <SD_WriteBlock+0x31e>
  SDIO_DMACmd(DISABLE);

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001844:	200e      	movs	r0, #14
 8001846:	e012      	b.n	800186e <SD_WriteBlock+0x31e>
    }
  }
  else
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
 8001848:	2026      	movs	r0, #38	; 0x26
 800184a:	e010      	b.n	800186e <SD_WriteBlock+0x31e>
 800184c:	20000008 	.word	0x20000008
 8001850:	000fffff 	.word	0x000fffff
 8001854:	200004b8 	.word	0x200004b8
 8001858:	20000500 	.word	0x20000500
 800185c:	200004e8 	.word	0x200004e8
 8001860:	40018000 	.word	0x40018000
 8001864:	10002000 	.word	0x10002000
 8001868:	20000028 	.word	0x20000028
    cardstatus = SDIO_GetResponse(SDIO_RESP1);
  }

  if (timeout == 0)
  {
    return(SD_ERROR);
 800186c:	2029      	movs	r0, #41	; 0x29
  {
    errorstatus = IsCardProgramming(&cardstate);
  }

  return(errorstatus);
}
 800186e:	b007      	add	sp, #28
 8001870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001874 <SD_WriteMultiBlocks>:
*                  - NumberOfBlocks: number of blocks to be written.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteMultiBlocks(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 8001874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SD_Error errorstatus = SD_OK;
  uint8_t  power = 0, cardstate = 0;
 8001878:	2500      	movs	r5, #0
*                  - NumberOfBlocks: number of blocks to be written.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteMultiBlocks(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize, uint32_t NumberOfBlocks)
{
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	9003      	str	r0, [sp, #12]
 800187e:	4614      	mov	r4, r2
 8001880:	9304      	str	r3, [sp, #16]
  SD_Error errorstatus = SD_OK;
  uint8_t  power = 0, cardstate = 0;
 8001882:	f88d 501f 	strb.w	r5, [sp, #31]
  uint32_t bytestransferred = 0;
  uint32_t count = 0, restwords = 0;
  uint32_t *tempbuff = writebuff;

  if (writebuff == NULL)
 8001886:	460f      	mov	r7, r1
 8001888:	2900      	cmp	r1, #0
 800188a:	f000 81ab 	beq.w	8001be4 <SD_WriteMultiBlocks+0x370>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 800188e:	4eb6      	ldr	r6, [pc, #728]	; (8001b68 <SD_WriteMultiBlocks+0x2f4>)
 8001890:	232a      	movs	r3, #42	; 0x2a
  TransferEnd = 0;
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001892:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8001b7c <SD_WriteMultiBlocks+0x308>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
 8001896:	7133      	strb	r3, [r6, #4]
  TransferEnd = 0;
 8001898:	f8df 82d4 	ldr.w	r8, [pc, #724]	; 8001b70 <SD_WriteMultiBlocks+0x2fc>
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 800189c:	4bb3      	ldr	r3, [pc, #716]	; (8001b6c <SD_WriteMultiBlocks+0x2f8>)
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
 800189e:	f8c8 5028 	str.w	r5, [r8, #40]	; 0x28
  TotalNumberOfBytes = 0;

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 80018a2:	f8c9 3000 	str.w	r3, [r9]
    return(errorstatus);
  }

  TransferError = SD_OK;
  TransferEnd = 0;
  TotalNumberOfBytes = 0;
 80018a6:	f8c8 502c 	str.w	r5, [r8, #44]	; 0x2c

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 0;
 80018aa:	f8c9 5004 	str.w	r5, [r9, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 80018ae:	f8c9 5008 	str.w	r5, [r9, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 80018b2:	f8c9 500c 	str.w	r5, [r9, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 80018b6:	f8c9 5010 	str.w	r5, [r9, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 80018ba:	f8c9 5014 	str.w	r5, [r9, #20]
  SDIO_DataConfig(&SDIO_DataInitStructure);
 80018be:	4648      	mov	r0, r9
 80018c0:	f003 fd04 	bl	80052cc <SDIO_DataConfig>
  SDIO_DMACmd(DISABLE);
 80018c4:	4628      	mov	r0, r5
 80018c6:	f003 fcc9 	bl	800525c <SDIO_DMACmd>

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 80018ca:	4628      	mov	r0, r5
 80018cc:	f003 fcf2 	bl	80052b4 <SDIO_GetResponse>
 80018d0:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80018d4:	4645      	mov	r5, r8
 80018d6:	f040 8183 	bne.w	8001be0 <SD_WriteMultiBlocks+0x36c>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 80018da:	686b      	ldr	r3, [r5, #4]
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d104      	bne.n	80018ea <SD_WriteMultiBlocks+0x76>
  {
    BlockSize = 512;
    addr /= 512;
 80018e0:	9903      	ldr	r1, [sp, #12]
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
  {
    BlockSize = 512;
 80018e2:	f44f 7400 	mov.w	r4, #512	; 0x200
    addr /= 512;
 80018e6:	0a49      	lsrs	r1, r1, #9
 80018e8:	9103      	str	r1, [sp, #12]
  }
  
  /* Set the block size, both on controller and card */
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 80018ea:	f104 3bff 	add.w	fp, r4, #4294967295
 80018ee:	fa1f f38b 	uxth.w	r3, fp
 80018f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f6:	f080 8175 	bcs.w	8001be4 <SD_WriteMultiBlocks+0x370>
 80018fa:	ea1b 0b04 	ands.w	fp, fp, r4
 80018fe:	f040 8171 	bne.w	8001be4 <SD_WriteMultiBlocks+0x370>
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 8001902:	4620      	mov	r0, r4
 8001904:	f7fe fd72 	bl	80003ec <convert_from_bytes_to_power_of_two>

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 8001908:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8001b74 <SD_WriteMultiBlocks+0x300>
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 800190c:	2310      	movs	r3, #16
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800190e:	2240      	movs	r2, #64	; 0x40
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001910:	f44f 6a80 	mov.w	sl, #1024	; 0x400
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 8001914:	f8c8 3004 	str.w	r3, [r8, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001918:	f8c8 2008 	str.w	r2, [r8, #8]
  }
  
  /* Set the block size, both on controller and card */
  if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
  {
    power = convert_from_bytes_to_power_of_two(BlockSize);
 800191c:	9005      	str	r0, [sp, #20]

    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 800191e:	f8c8 4000 	str.w	r4, [r8]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001922:	f8c8 b00c 	str.w	fp, [r8, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001926:	f8c8 a010 	str.w	sl, [r8, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 800192a:	4640      	mov	r0, r8
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	f003 fc9b 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 8001932:	9b01      	ldr	r3, [sp, #4]
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fd81 	bl	800043c <CmdResp1Error>

    if (errorstatus != SD_OK)
 800193a:	282a      	cmp	r0, #42	; 0x2a
 800193c:	f040 8153 	bne.w	8001be6 <SD_WriteMultiBlocks+0x372>
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  /* Wait till card is ready for data Added */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8001940:	682a      	ldr	r2, [r5, #0]
 8001942:	4b8b      	ldr	r3, [pc, #556]	; (8001b70 <SD_WriteMultiBlocks+0x2fc>)
 8001944:	0412      	lsls	r2, r2, #16
 8001946:	f8c8 2000 	str.w	r2, [r8]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 800194a:	2140      	movs	r1, #64	; 0x40
    return(errorstatus);
  }

  /* Wait till card is ready for data Added */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 800194c:	220d      	movs	r2, #13
 800194e:	f8c8 2004 	str.w	r2, [r8, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001952:	f8c8 1008 	str.w	r1, [r8, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001956:	f8c8 b00c 	str.w	fp, [r8, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 800195a:	f8c8 a010 	str.w	sl, [r8, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 800195e:	4640      	mov	r0, r8
 8001960:	9301      	str	r3, [sp, #4]
 8001962:	9202      	str	r2, [sp, #8]
 8001964:	f003 fc80 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 8001968:	9a02      	ldr	r2, [sp, #8]
 800196a:	4610      	mov	r0, r2
 800196c:	f7fe fd66 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001970:	282a      	cmp	r0, #42	; 0x2a
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	f040 8137 	bne.w	8001be6 <SD_WriteMultiBlocks+0x372>
  {
    return(errorstatus);
  }

  if (NumberOfBlocks > 1)
 8001978:	9a04      	ldr	r2, [sp, #16]
 800197a:	2a01      	cmp	r2, #1
 800197c:	f240 811f 	bls.w	8001bbe <SD_WriteMultiBlocks+0x34a>
  {
    /* Common to all modes */
    if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
 8001980:	4354      	muls	r4, r2
 8001982:	f1b4 7f00 	cmp.w	r4, #33554432	; 0x2000000
 8001986:	f080 812d 	bcs.w	8001be4 <SD_WriteMultiBlocks+0x370>
    {
      errorstatus = SD_INVALID_PARAMETER;
      return(errorstatus);
    }

    if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	2a02      	cmp	r2, #2
 800198e:	d830      	bhi.n	80019f2 <SD_WriteMultiBlocks+0x17e>
    {
      /* To improve performance */
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8001990:	681b      	ldr	r3, [r3, #0]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001992:	2140      	movs	r1, #64	; 0x40
    }

    if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
    {
      /* To improve performance */
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 8001994:	041b      	lsls	r3, r3, #16
 8001996:	f8c8 3000 	str.w	r3, [r8]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 800199a:	2337      	movs	r3, #55	; 0x37
 800199c:	f8c8 3004 	str.w	r3, [r8, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80019a0:	f8c8 1008 	str.w	r1, [r8, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80019a4:	f8c8 b00c 	str.w	fp, [r8, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80019a8:	f8c8 a010 	str.w	sl, [r8, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80019ac:	4640      	mov	r0, r8
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	f003 fc5a 	bl	8005268 <SDIO_SendCommand>


      errorstatus = CmdResp1Error(SDIO_APP_CMD);
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7fe fd40 	bl	800043c <CmdResp1Error>

      if (errorstatus != SD_OK)
 80019bc:	282a      	cmp	r0, #42	; 0x2a
 80019be:	f040 8112 	bne.w	8001be6 <SD_WriteMultiBlocks+0x372>
      {
        return(errorstatus);
      }
      /* To improve performance */
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 80019c2:	9a04      	ldr	r2, [sp, #16]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
 80019c4:	2317      	movs	r3, #23
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80019c6:	2140      	movs	r1, #64	; 0x40
      if (errorstatus != SD_OK)
      {
        return(errorstatus);
      }
      /* To improve performance */
      SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 80019c8:	f8c8 2000 	str.w	r2, [r8]
      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
 80019cc:	f8c8 3004 	str.w	r3, [r8, #4]
      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80019d0:	f8c8 1008 	str.w	r1, [r8, #8]
      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80019d4:	f8c8 b00c 	str.w	fp, [r8, #12]
      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 80019d8:	f8c8 a010 	str.w	sl, [r8, #16]
      SDIO_SendCommand(&SDIO_CmdInitStructure);
 80019dc:	4640      	mov	r0, r8
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	f003 fc42 	bl	8005268 <SDIO_SendCommand>

      errorstatus = CmdResp1Error(SDIO_SET_BLOCK_COUNT);
 80019e4:	9b01      	ldr	r3, [sp, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fd28 	bl	800043c <CmdResp1Error>

      if (errorstatus != SD_OK)
 80019ec:	282a      	cmp	r0, #42	; 0x2a
 80019ee:	f040 80fa 	bne.w	8001be6 <SD_WriteMultiBlocks+0x372>
        return(errorstatus);
      }
    }

    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 80019f2:	9a03      	ldr	r2, [sp, #12]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80019f4:	2340      	movs	r3, #64	; 0x40
      }
    }

    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
 80019f6:	f04f 0a19 	mov.w	sl, #25
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 80019fa:	f8c8 3008 	str.w	r3, [r8, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 80019fe:	f04f 0b00 	mov.w	fp, #0
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
        return(errorstatus);
      }
    }

    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 8001a06:	f8c8 2000 	str.w	r2, [r8]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001a0a:	f8c8 3010 	str.w	r3, [r8, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001a0e:	4859      	ldr	r0, [pc, #356]	; (8001b74 <SD_WriteMultiBlocks+0x300>)
      }
    }

    /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
    SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
 8001a10:	f8c8 a004 	str.w	sl, [r8, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001a14:	f8c8 b00c 	str.w	fp, [r8, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001a18:	f003 fc26 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_WRITE_MULT_BLOCK);
 8001a1c:	4650      	mov	r0, sl
 8001a1e:	f7fe fd0d 	bl	800043c <CmdResp1Error>

    if (SD_OK != errorstatus)
 8001a22:	282a      	cmp	r0, #42	; 0x2a
 8001a24:	f040 80df 	bne.w	8001be6 <SD_WriteMultiBlocks+0x372>
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    SrcBuffer = writebuff;
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <SD_WriteMultiBlocks+0x304>)

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001a2a:	9905      	ldr	r1, [sp, #20]
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
    SrcBuffer = writebuff;
 8001a2c:	601f      	str	r7, [r3, #0]

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001a2e:	4b4f      	ldr	r3, [pc, #316]	; (8001b6c <SD_WriteMultiBlocks+0x2f8>)
    {
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
    StopCondition = 1;
 8001a30:	f1aa 0a18 	sub.w	sl, sl, #24
    SrcBuffer = writebuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001a34:	f8c9 3000 	str.w	r3, [r9]
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001a38:	010b      	lsls	r3, r1, #4
    if (SD_OK != errorstatus)
    {
      return(errorstatus);
    }

    TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 8001a3a:	62ec      	str	r4, [r5, #44]	; 0x2c
    StopCondition = 1;
 8001a3c:	f8c5 a030 	str.w	sl, [r5, #48]	; 0x30
    SrcBuffer = writebuff;

    SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
    SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 8001a40:	f8c9 4004 	str.w	r4, [r9, #4]
    SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 8001a44:	f8c9 3008 	str.w	r3, [r9, #8]
    SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8001a48:	f8c9 b00c 	str.w	fp, [r9, #12]
    SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001a4c:	f8c9 b010 	str.w	fp, [r9, #16]
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8001a50:	f8c9 a014 	str.w	sl, [r9, #20]
    SDIO_DataConfig(&SDIO_DataInitStructure);
 8001a54:	4849      	ldr	r0, [pc, #292]	; (8001b7c <SD_WriteMultiBlocks+0x308>)
 8001a56:	f003 fc39 	bl	80052cc <SDIO_DataConfig>

    if (DeviceMode == SD_POLLING_MODE)
 8001a5a:	6831      	ldr	r1, [r6, #0]
 8001a5c:	2902      	cmp	r1, #2
 8001a5e:	d176      	bne.n	8001b4e <SD_WriteMultiBlocks+0x2da>
 8001a60:	e026      	b.n	8001ab0 <SD_WriteMultiBlocks+0x23c>
    {
      while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
      {
        if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
 8001a62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001a66:	f003 fc9d 	bl	80053a4 <SDIO_GetFlagStatus>
 8001a6a:	b308      	cbz	r0, 8001ab0 <SD_WriteMultiBlocks+0x23c>
        {
          if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
 8001a6c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001a6e:	ebcb 0303 	rsb	r3, fp, r3
 8001a72:	2b1f      	cmp	r3, #31
 8001a74:	d909      	bls.n	8001a8a <SD_WriteMultiBlocks+0x216>
          {
            for (count = 0; count < SD_HALFFIFO; count++)
            {
              SDIO_WriteData(*(tempbuff + count));
 8001a76:	5938      	ldr	r0, [r7, r4]
 8001a78:	3404      	adds	r4, #4
 8001a7a:	f003 fc53 	bl	8005324 <SDIO_WriteData>
      {
        if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
        {
          if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
          {
            for (count = 0; count < SD_HALFFIFO; count++)
 8001a7e:	2c20      	cmp	r4, #32
 8001a80:	d1f9      	bne.n	8001a76 <SD_WriteMultiBlocks+0x202>
            {
              SDIO_WriteData(*(tempbuff + count));
            }
            tempbuff += SD_HALFFIFO;
 8001a82:	3720      	adds	r7, #32
            bytestransferred += SD_HALFFIFOBYTES;
 8001a84:	f10b 0b20 	add.w	fp, fp, #32
 8001a88:	e012      	b.n	8001ab0 <SD_WriteMultiBlocks+0x23c>
          }
          else
          {
            restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
 8001a8a:	f013 0f03 	tst.w	r3, #3
 8001a8e:	ea4f 0493 	mov.w	r4, r3, lsr #2
 8001a92:	bf18      	it	ne
 8001a94:	3401      	addne	r4, #1
                        ((TotalNumberOfBytes - bytestransferred) / 4 + 1);

            for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 8001a96:	46b9      	mov	r9, r7
 8001a98:	2600      	movs	r6, #0
 8001a9a:	e004      	b.n	8001aa6 <SD_WriteMultiBlocks+0x232>
            {
              SDIO_WriteData(*tempbuff);
 8001a9c:	f859 0b04 	ldr.w	r0, [r9], #4
 8001aa0:	f003 fc40 	bl	8005324 <SDIO_WriteData>
          else
          {
            restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - bytestransferred) / 4) :
                        ((TotalNumberOfBytes - bytestransferred) / 4 + 1);

            for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 8001aa4:	3601      	adds	r6, #1
 8001aa6:	42a6      	cmp	r6, r4
 8001aa8:	d3f8      	bcc.n	8001a9c <SD_WriteMultiBlocks+0x228>
*                  - BlockSize: the SD card Data block size.
*                  - NumberOfBlocks: number of blocks to be written.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_WriteMultiBlocks(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize, uint32_t NumberOfBlocks)
 8001aaa:	00a4      	lsls	r4, r4, #2
 8001aac:	44a3      	add	fp, r4
 8001aae:	193f      	adds	r7, r7, r4
    SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
    SDIO_DataConfig(&SDIO_DataInitStructure);

    if (DeviceMode == SD_POLLING_MODE)
    {
      while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
 8001ab0:	4b33      	ldr	r3, [pc, #204]	; (8001b80 <SD_WriteMultiBlocks+0x30c>)
 8001ab2:	f240 341a 	movw	r4, #794	; 0x31a
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	ea03 0404 	and.w	r4, r3, r4
 8001abc:	2c00      	cmp	r4, #0
 8001abe:	d0d0      	beq.n	8001a62 <SD_WriteMultiBlocks+0x1ee>
            }
          }
        }
      }

      if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8001ac0:	2008      	movs	r0, #8
 8001ac2:	f003 fc6f 	bl	80053a4 <SDIO_GetFlagStatus>
 8001ac6:	b120      	cbz	r0, 8001ad2 <SD_WriteMultiBlocks+0x25e>
      {
        SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8001ac8:	2008      	movs	r0, #8
 8001aca:	f003 fc75 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_DATA_TIMEOUT;
        return(errorstatus);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	e089      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8001ad2:	2002      	movs	r0, #2
 8001ad4:	f003 fc66 	bl	80053a4 <SDIO_GetFlagStatus>
 8001ad8:	b120      	cbz	r0, 8001ae4 <SD_WriteMultiBlocks+0x270>
      {
        SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8001ada:	2002      	movs	r0, #2
 8001adc:	f003 fc6c 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_DATA_CRC_FAIL;
        return(errorstatus);
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	e080      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
 8001ae4:	2010      	movs	r0, #16
 8001ae6:	f003 fc5d 	bl	80053a4 <SDIO_GetFlagStatus>
 8001aea:	b120      	cbz	r0, 8001af6 <SD_WriteMultiBlocks+0x282>
      {
        SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
 8001aec:	2010      	movs	r0, #16
 8001aee:	f003 fc63 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_TX_UNDERRUN;
        return(errorstatus);
 8001af2:	2005      	movs	r0, #5
 8001af4:	e077      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
      }
      else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8001af6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001afa:	f003 fc53 	bl	80053a4 <SDIO_GetFlagStatus>
 8001afe:	4604      	mov	r4, r0
 8001b00:	b128      	cbz	r0, 8001b0e <SD_WriteMultiBlocks+0x29a>
      {
        SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8001b02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b06:	f003 fc57 	bl	80053b8 <SDIO_ClearFlag>
        errorstatus = SD_START_BIT_ERR;
        return(errorstatus);
 8001b0a:	2007      	movs	r0, #7
 8001b0c:	e06b      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
      }

      if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
 8001b0e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001b12:	f003 fc47 	bl	80053a4 <SDIO_GetFlagStatus>
 8001b16:	2800      	cmp	r0, #0
 8001b18:	d051      	beq.n	8001bbe <SD_WriteMultiBlocks+0x34a>
      {
       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8001b1a:	686b      	ldr	r3, [r5, #4]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d84e      	bhi.n	8001bbe <SD_WriteMultiBlocks+0x34a>
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001b20:	2340      	movs	r3, #64	; 0x40
      {
       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 8001b22:	250c      	movs	r5, #12
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001b24:	f8c8 3008 	str.w	r3, [r8, #8]
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2c:	f8c8 3010 	str.w	r3, [r8, #16]
          SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <SD_WriteMultiBlocks+0x300>)
      if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
      {
       if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
        {
          /* Send CMD12 STOP_TRANSMISSION */
          SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001b32:	f8c8 4000 	str.w	r4, [r8]
          SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 8001b36:	f8c8 5004 	str.w	r5, [r8, #4]
          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001b3a:	f8c8 400c 	str.w	r4, [r8, #12]
          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
          SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001b3e:	f003 fb93 	bl	8005268 <SDIO_SendCommand>


          errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 8001b42:	4628      	mov	r0, r5
 8001b44:	f7fe fc7a 	bl	800043c <CmdResp1Error>

          if (errorstatus != SD_OK)
 8001b48:	282a      	cmp	r0, #42	; 0x2a
 8001b4a:	d14c      	bne.n	8001be6 <SD_WriteMultiBlocks+0x372>
 8001b4c:	e037      	b.n	8001bbe <SD_WriteMultiBlocks+0x34a>
            return(errorstatus);
          }
        }
      }
    }
    else if (DeviceMode == SD_INTERRUPT_MODE)
 8001b4e:	2901      	cmp	r1, #1
 8001b50:	d118      	bne.n	8001b84 <SD_WriteMultiBlocks+0x310>
    {
      SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
 8001b52:	f244 301a 	movw	r0, #17178	; 0x431a
 8001b56:	f003 fb75 	bl	8005244 <SDIO_ITConfig>
      while ((TransferEnd == 0) && (TransferError == SD_OK))
 8001b5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b5c:	bb4b      	cbnz	r3, 8001bb2 <SD_WriteMultiBlocks+0x33e>
 8001b5e:	7933      	ldrb	r3, [r6, #4]
 8001b60:	2b2a      	cmp	r3, #42	; 0x2a
 8001b62:	d0fa      	beq.n	8001b5a <SD_WriteMultiBlocks+0x2e6>
 8001b64:	e025      	b.n	8001bb2 <SD_WriteMultiBlocks+0x33e>
 8001b66:	bf00      	nop
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	000fffff 	.word	0x000fffff
 8001b70:	20000028 	.word	0x20000028
 8001b74:	200004b8 	.word	0x200004b8
 8001b78:	20000500 	.word	0x20000500
 8001b7c:	200004e8 	.word	0x200004e8
 8001b80:	40018000 	.word	0x40018000
      if (TransferError != SD_OK)
      {
        return(TransferError);
      }
    }
    else if (DeviceMode == SD_DMA_MODE)
 8001b84:	b9d9      	cbnz	r1, 8001bbe <SD_WriteMultiBlocks+0x34a>
    {
      SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR, ENABLE);
 8001b86:	4651      	mov	r1, sl
 8001b88:	f240 301a 	movw	r0, #794	; 0x31a
 8001b8c:	f003 fb5a 	bl	8005244 <SDIO_ITConfig>
      SDIO_DMACmd(ENABLE);
 8001b90:	4650      	mov	r0, sl
 8001b92:	f003 fb63 	bl	800525c <SDIO_DMACmd>
      DMA_TxConfiguration(writebuff, (NumberOfBlocks * BlockSize));
 8001b96:	4638      	mov	r0, r7
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f7fe fda1 	bl	80006e0 <DMA_TxConfiguration>
      while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 8001b9e:	4813      	ldr	r0, [pc, #76]	; (8001bec <SD_WriteMultiBlocks+0x378>)
 8001ba0:	f002 fb45 	bl	800422e <DMA_GetFlagStatus>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d0fa      	beq.n	8001b9e <SD_WriteMultiBlocks+0x32a>
      {}
      while ((TransferEnd == 0) && (TransferError == SD_OK))
 8001ba8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001baa:	b913      	cbnz	r3, 8001bb2 <SD_WriteMultiBlocks+0x33e>
 8001bac:	7933      	ldrb	r3, [r6, #4]
 8001bae:	2b2a      	cmp	r3, #42	; 0x2a
 8001bb0:	d0fa      	beq.n	8001ba8 <SD_WriteMultiBlocks+0x334>
      {}
      if (TransferError != SD_OK)
 8001bb2:	7933      	ldrb	r3, [r6, #4]
 8001bb4:	2b2a      	cmp	r3, #42	; 0x2a
 8001bb6:	d002      	beq.n	8001bbe <SD_WriteMultiBlocks+0x34a>
      {
        return(TransferError);
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <SD_WriteMultiBlocks+0x37c>)
 8001bba:	7918      	ldrb	r0, [r3, #4]
 8001bbc:	e013      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
      }
    }
  }
  /* Clear all the static flags */
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001bbe:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001bc2:	f003 fbf9 	bl	80053b8 <SDIO_ClearFlag>
  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
  {
    errorstatus = IsCardProgramming(&cardstate);
 8001bc6:	f10d 001f 	add.w	r0, sp, #31
 8001bca:	f7fe fcc5 	bl	8000558 <IsCardProgramming>
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);

  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_RECEIVING)))
 8001bce:	282a      	cmp	r0, #42	; 0x2a
 8001bd0:	d109      	bne.n	8001be6 <SD_WriteMultiBlocks+0x372>
 8001bd2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8001bd6:	3b06      	subs	r3, #6
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d9f3      	bls.n	8001bc6 <SD_WriteMultiBlocks+0x352>
 8001bde:	e002      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
  SDIO_DMACmd(DISABLE);

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001be0:	200e      	movs	r0, #14
 8001be2:	e000      	b.n	8001be6 <SD_WriteMultiBlocks+0x372>
  {
    /* Common to all modes */
    if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
    {
      errorstatus = SD_INVALID_PARAMETER;
      return(errorstatus);
 8001be4:	2026      	movs	r0, #38	; 0x26
  {
    errorstatus = IsCardProgramming(&cardstate);
  }

  return(errorstatus);
}
 8001be6:	b009      	add	sp, #36	; 0x24
 8001be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bec:	10002000 	.word	0x10002000
 8001bf0:	20000008 	.word	0x20000008

08001bf4 <SD_GetTransferState>:
*                   - SD_NO_TRANSFER: No data transfer is acting
*                   - SD_TRANSFER_IN_PROGRESS: Data transfer is acting
*******************************************************************************/
SDTransferState SD_GetTransferState(void)
{
  if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <SD_GetTransferState+0x10>)
 8001bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    return(SD_TRANSFER_IN_PROGRESS);
 8001bf8:	f413 5f40 	tst.w	r3, #12288	; 0x3000
  }
  else
  {
    return(SD_NO_TRANSFER);
  }
}
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2000      	moveq	r0, #0
 8001c00:	2001      	movne	r0, #1
 8001c02:	4770      	bx	lr
 8001c04:	40018000 	.word	0x40018000

08001c08 <SD_StopTransfer>:
SD_Error SD_StopTransfer(void)
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001c08:	4809      	ldr	r0, [pc, #36]	; (8001c30 <SD_StopTransfer+0x28>)
 8001c0a:	2300      	movs	r3, #0
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_StopTransfer(void)
{
 8001c0c:	b510      	push	{r4, lr}
  SD_Error errorstatus = SD_OK;

  /* Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001c0e:	2240      	movs	r2, #64	; 0x40
SD_Error SD_StopTransfer(void)
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 8001c10:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 8001c12:	240c      	movs	r4, #12
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001c14:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
  SD_Error errorstatus = SD_OK;

  /* Send CMD12 STOP_TRANSMISSION  */
  SDIO_CmdInitStructure.SDIO_Argument = 0x0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 8001c1a:	6044      	str	r4, [r0, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001c1c:	6082      	str	r2, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001c1e:	6103      	str	r3, [r0, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001c20:	f003 fb22 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 8001c24:	4620      	mov	r0, r4

  return(errorstatus);
}
 8001c26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 8001c2a:	f7fe bc07 	b.w	800043c <CmdResp1Error>
 8001c2e:	bf00      	nop
 8001c30:	200004b8 	.word	0x200004b8

08001c34 <SD_Erase>:
*                  - endaddr: the end address.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
{
 8001c34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t delay = 0;
  __IO uint32_t maxdelay = 0;
  uint8_t cardstate = 0;

  /* Check if the card coomnd class supports erase command */
  if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 8001c38:	4d39      	ldr	r5, [pc, #228]	; (8001d20 <SD_Erase+0xec>)
*                  - endaddr: the end address.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
{
 8001c3a:	4604      	mov	r4, r0
  uint32_t delay = 0;
  __IO uint32_t maxdelay = 0;
  uint8_t cardstate = 0;

  /* Check if the card coomnd class supports erase command */
  if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 8001c3c:	69eb      	ldr	r3, [r5, #28]
*******************************************************************************/
SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
{
  SD_Error errorstatus = SD_OK;
  uint32_t delay = 0;
  __IO uint32_t maxdelay = 0;
 8001c3e:	2000      	movs	r0, #0
  uint8_t cardstate = 0;

  /* Check if the card coomnd class supports erase command */
  if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 8001c40:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
*                  - endaddr: the end address.
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
{
 8001c44:	460f      	mov	r7, r1
  SD_Error errorstatus = SD_OK;
  uint32_t delay = 0;
  __IO uint32_t maxdelay = 0;
 8001c46:	9000      	str	r0, [sp, #0]
  uint8_t cardstate = 0;
 8001c48:	f88d 0007 	strb.w	r0, [sp, #7]

  /* Check if the card coomnd class supports erase command */
  if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 8001c4c:	d062      	beq.n	8001d14 <SD_Erase+0xe0>
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
  }

  maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);
 8001c4e:	4b35      	ldr	r3, [pc, #212]	; (8001d24 <SD_Erase+0xf0>)
 8001c50:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <SD_Erase+0xf4>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001c58:	3302      	adds	r3, #2
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	9300      	str	r3, [sp, #0]

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 8001c60:	f003 fb28 	bl	80052b4 <SDIO_GetResponse>
 8001c64:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001c68:	d156      	bne.n	8001d18 <SD_Erase+0xe4>
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 8001c6a:	686b      	ldr	r3, [r5, #4]
 8001c6c:	4d2f      	ldr	r5, [pc, #188]	; (8001d2c <SD_Erase+0xf8>)
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d102      	bne.n	8001c78 <SD_Erase+0x44>
  {
    startaddr /= 512;
 8001c72:	0a64      	lsrs	r4, r4, #9
    endaddr /= 512;
 8001c74:	0a7f      	lsrs	r7, r7, #9
 8001c76:	e000      	b.n	8001c7a <SD_Erase+0x46>
  }
  
  /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 8001c78:	d828      	bhi.n	8001ccc <SD_Erase+0x98>
  {
    /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
    SDIO_CmdInitStructure.SDIO_Argument = startaddr;
 8001c7a:	4e2c      	ldr	r6, [pc, #176]	; (8001d2c <SD_Erase+0xf8>)
 8001c7c:	602c      	str	r4, [r5, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001c7e:	f04f 0a40 	mov.w	sl, #64	; 0x40
  /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
  {
    /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
    SDIO_CmdInitStructure.SDIO_Argument = startaddr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
 8001c82:	2420      	movs	r4, #32
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001c84:	f04f 0900 	mov.w	r9, #0
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001c88:	f44f 6880 	mov.w	r8, #1024	; 0x400
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001c8c:	4630      	mov	r0, r6
  /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
  if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
  {
    /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
    SDIO_CmdInitStructure.SDIO_Argument = startaddr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
 8001c8e:	606c      	str	r4, [r5, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001c90:	f8c5 a008 	str.w	sl, [r5, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001c94:	f8c5 900c 	str.w	r9, [r5, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001c98:	f8c5 8010 	str.w	r8, [r5, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001c9c:	f003 fae4 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_START);
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f7fe fbcb 	bl	800043c <CmdResp1Error>
    if (errorstatus != SD_OK)
 8001ca6:	282a      	cmp	r0, #42	; 0x2a
 8001ca8:	d137      	bne.n	8001d1a <SD_Erase+0xe6>
      return(errorstatus);
    }

    /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
    SDIO_CmdInitStructure.SDIO_Argument = endaddr;
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
 8001caa:	3401      	adds	r4, #1
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001cac:	4630      	mov	r0, r6
    {
      return(errorstatus);
    }

    /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
    SDIO_CmdInitStructure.SDIO_Argument = endaddr;
 8001cae:	6037      	str	r7, [r6, #0]
    SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
 8001cb0:	6074      	str	r4, [r6, #4]
    SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001cb2:	f8c6 a008 	str.w	sl, [r6, #8]
    SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001cb6:	f8c6 900c 	str.w	r9, [r6, #12]
    SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001cba:	f8c6 8010 	str.w	r8, [r6, #16]
    SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001cbe:	f003 fad3 	bl	8005268 <SDIO_SendCommand>

    errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_END);
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f7fe fbba 	bl	800043c <CmdResp1Error>
    if (errorstatus != SD_OK)
 8001cc8:	282a      	cmp	r0, #42	; 0x2a
 8001cca:	d126      	bne.n	8001d1a <SD_Erase+0xe6>
  }

  /* Send CMD38 ERASE */
  SDIO_CmdInitStructure.SDIO_Argument = 0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001ccc:	2340      	movs	r3, #64	; 0x40
      return(errorstatus);
    }
  }

  /* Send CMD38 ERASE */
  SDIO_CmdInitStructure.SDIO_Argument = 0;
 8001cce:	2400      	movs	r4, #0
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
 8001cd0:	2626      	movs	r6, #38	; 0x26
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001cd2:	60ab      	str	r3, [r5, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001cd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cd8:	612b      	str	r3, [r5, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001cda:	4814      	ldr	r0, [pc, #80]	; (8001d2c <SD_Erase+0xf8>)
      return(errorstatus);
    }
  }

  /* Send CMD38 ERASE */
  SDIO_CmdInitStructure.SDIO_Argument = 0;
 8001cdc:	602c      	str	r4, [r5, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
 8001cde:	606e      	str	r6, [r5, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001ce0:	60ec      	str	r4, [r5, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001ce2:	f003 fac1 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_ERASE);
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7fe fba8 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001cec:	282a      	cmp	r0, #42	; 0x2a
 8001cee:	d114      	bne.n	8001d1a <SD_Erase+0xe6>
 8001cf0:	e000      	b.n	8001cf4 <SD_Erase+0xc0>
  {
    return(errorstatus);
  }

  for (delay = 0; delay < maxdelay; delay++)
 8001cf2:	3401      	adds	r4, #1
 8001cf4:	9b00      	ldr	r3, [sp, #0]
 8001cf6:	429c      	cmp	r4, r3
 8001cf8:	d3fb      	bcc.n	8001cf2 <SD_Erase+0xbe>
  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
  {
    errorstatus = IsCardProgramming(&cardstate);
 8001cfa:	f10d 0007 	add.w	r0, sp, #7
 8001cfe:	f7fe fc2b 	bl	8000558 <IsCardProgramming>
  {}

  /* Wait till the card is in programming state */
  errorstatus = IsCardProgramming(&cardstate);

  while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
 8001d02:	282a      	cmp	r0, #42	; 0x2a
 8001d04:	d109      	bne.n	8001d1a <SD_Erase+0xe6>
 8001d06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d0a:	3b06      	subs	r3, #6
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d9f3      	bls.n	8001cfa <SD_Erase+0xc6>
 8001d12:	e002      	b.n	8001d1a <SD_Erase+0xe6>

  /* Check if the card coomnd class supports erase command */
  if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
  {
    errorstatus = SD_REQUEST_NOT_APPLICABLE;
    return(errorstatus);
 8001d14:	2025      	movs	r0, #37	; 0x25
 8001d16:	e000      	b.n	8001d1a <SD_Erase+0xe6>
  maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001d18:	200e      	movs	r0, #14
  {
    errorstatus = IsCardProgramming(&cardstate);
  }

  return(errorstatus);
}
 8001d1a:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000028 	.word	0x20000028
 8001d24:	40018000 	.word	0x40018000
 8001d28:	00011940 	.word	0x00011940
 8001d2c:	200004b8 	.word	0x200004b8

08001d30 <SD_SendStatus>:
*                  card status (Card Status register).
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_SendStatus(uint32_t *pcardstatus)
{
 8001d30:	b570      	push	{r4, r5, r6, lr}
  SD_Error errorstatus = SD_OK;

  if (pcardstatus == NULL)
 8001d32:	4605      	mov	r5, r0
 8001d34:	b1d0      	cbz	r0, 8001d6c <SD_SendStatus+0x3c>
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <SD_SendStatus+0x44>)
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <SD_SendStatus+0x48>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 8001d3c:	240d      	movs	r4, #13
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001d3e:	041b      	lsls	r3, r3, #16
 8001d40:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001d42:	2340      	movs	r3, #64	; 0x40
 8001d44:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001d46:	2600      	movs	r6, #0
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 8001d4c:	6044      	str	r4, [r0, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001d4e:	6103      	str	r3, [r0, #16]
  }

  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001d50:	60c6      	str	r6, [r0, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001d52:	f003 fa89 	bl	8005268 <SDIO_SendCommand>


  errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 8001d56:	4620      	mov	r0, r4
 8001d58:	f7fe fb70 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001d5c:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);


  errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 8001d5e:	4604      	mov	r4, r0

  if (errorstatus != SD_OK)
 8001d60:	d105      	bne.n	8001d6e <SD_SendStatus+0x3e>
  {
    return(errorstatus);
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
 8001d62:	4630      	mov	r0, r6
 8001d64:	f003 faa6 	bl	80052b4 <SDIO_GetResponse>
 8001d68:	6028      	str	r0, [r5, #0]

  return(errorstatus);
 8001d6a:	e000      	b.n	8001d6e <SD_SendStatus+0x3e>
  SD_Error errorstatus = SD_OK;

  if (pcardstatus == NULL)
  {
    errorstatus = SD_INVALID_PARAMETER;
    return(errorstatus);
 8001d6c:	2426      	movs	r4, #38	; 0x26
  }

  *pcardstatus = SDIO_GetResponse(SDIO_RESP1);

  return(errorstatus);
}
 8001d6e:	4620      	mov	r0, r4
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	bf00      	nop
 8001d74:	20000028 	.word	0x20000028
 8001d78:	200004b8 	.word	0x200004b8

08001d7c <SD_SendSDStatus>:
*                  card status (SD Status register).
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_SendSDStatus(uint32_t *psdstatus)
{
 8001d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d80:	4606      	mov	r6, r0
  SD_Error errorstatus = SD_OK;
  uint32_t count = 0;

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 8001d82:	2000      	movs	r0, #0
 8001d84:	f003 fa96 	bl	80052b4 <SDIO_GetResponse>
 8001d88:	f010 7700 	ands.w	r7, r0, #33554432	; 0x2000000
 8001d8c:	f040 809d 	bne.w	8001eca <SD_SendSDStatus+0x14e>
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  /* Set block size for card if it is not equal to current block size for card. */
  SDIO_CmdInitStructure.SDIO_Argument = 64;
 8001d90:	4c50      	ldr	r4, [pc, #320]	; (8001ed4 <SD_SendSDStatus+0x158>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 8001d92:	2510      	movs	r5, #16
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  /* Set block size for card if it is not equal to current block size for card. */
  SDIO_CmdInitStructure.SDIO_Argument = 64;
 8001d94:	f04f 0840 	mov.w	r8, #64	; 0x40
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001d98:	f44f 6980 	mov.w	r9, #1024	; 0x400
    return(errorstatus);
  }

  /* Set block size for card if it is not equal to current block size for card. */
  SDIO_CmdInitStructure.SDIO_Argument = 64;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 8001d9c:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001d9e:	4620      	mov	r0, r4
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
  }

  /* Set block size for card if it is not equal to current block size for card. */
  SDIO_CmdInitStructure.SDIO_Argument = 64;
 8001da0:	f8c4 8000 	str.w	r8, [r4]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001da4:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001da8:	60e7      	str	r7, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001daa:	f8c4 9010 	str.w	r9, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001dae:	f003 fa5b 	bl	8005268 <SDIO_SendCommand>

  errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 8001db2:	4628      	mov	r0, r5
 8001db4:	f7fe fb42 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001db8:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);

  errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 8001dba:	4605      	mov	r5, r0

  if (errorstatus != SD_OK)
 8001dbc:	f040 8086 	bne.w	8001ecc <SD_SendSDStatus+0x150>
  {
    return(errorstatus);
  }

  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <SD_SendSDStatus+0x15c>)
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8001dc2:	350d      	adds	r5, #13
  {
    return(errorstatus);
  }

  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001dc4:	681b      	ldr	r3, [r3, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 8001dc6:	6065      	str	r5, [r4, #4]
  {
    return(errorstatus);
  }

  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	6023      	str	r3, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001dcc:	4620      	mov	r0, r4
  }

  /* CMD55 */
  SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001dce:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001dd2:	60e7      	str	r7, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001dd4:	f8c4 9010 	str.w	r9, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001dd8:	f003 fa46 	bl	8005268 <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f7fe fb2d 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001de2:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
  errorstatus = CmdResp1Error(SDIO_APP_CMD);
 8001de4:	4605      	mov	r5, r0

  if (errorstatus != SD_OK)
 8001de6:	d171      	bne.n	8001ecc <SD_SendSDStatus+0x150>
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001de8:	483c      	ldr	r0, [pc, #240]	; (8001edc <SD_SendSDStatus+0x160>)
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <SD_SendSDStatus+0x164>)
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
  SDIO_CmdInitStructure.SDIO_Argument = 0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
 8001dec:	3d1d      	subs	r5, #29
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 8001dee:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStructure.SDIO_DataLength = 64;
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 8001df4:	3b5e      	subs	r3, #94	; 0x5e
 8001df6:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	6143      	str	r3, [r0, #20]
  {
    return(errorstatus);
  }

  SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
  SDIO_DataInitStructure.SDIO_DataLength = 64;
 8001dfc:	f8c0 8004 	str.w	r8, [r0, #4]
  SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
  SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
  SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 8001e00:	6107      	str	r7, [r0, #16]
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);
 8001e02:	f003 fa63 	bl	80052cc <SDIO_DataConfig>


  /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
  SDIO_CmdInitStructure.SDIO_Argument = 0;
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
 8001e06:	6065      	str	r5, [r4, #4]
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001e08:	4620      	mov	r0, r4
  SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
  SDIO_DataConfig(&SDIO_DataInitStructure);


  /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
  SDIO_CmdInitStructure.SDIO_Argument = 0;
 8001e0a:	6027      	str	r7, [r4, #0]
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 8001e0c:	f8c4 8008 	str.w	r8, [r4, #8]
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 8001e10:	60e7      	str	r7, [r4, #12]
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 8001e12:	f8c4 9010 	str.w	r9, [r4, #16]
  SDIO_SendCommand(&SDIO_CmdInitStructure);
 8001e16:	f003 fa27 	bl	8005268 <SDIO_SendCommand>
  errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
 8001e1a:	4628      	mov	r0, r5
 8001e1c:	f7fe fb0e 	bl	800043c <CmdResp1Error>

  if (errorstatus != SD_OK)
 8001e20:	282a      	cmp	r0, #42	; 0x2a
  SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
  SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
  SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
  SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
  SDIO_SendCommand(&SDIO_CmdInitStructure);
  errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
 8001e22:	4605      	mov	r5, r0

  if (errorstatus != SD_OK)
 8001e24:	d152      	bne.n	8001ecc <SD_SendSDStatus+0x150>
 8001e26:	e00b      	b.n	8001e40 <SD_SendSDStatus+0xc4>
    return(errorstatus);
  }

  while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 8001e28:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e2c:	f003 faba 	bl	80053a4 <SDIO_GetFlagStatus>
 8001e30:	b130      	cbz	r0, 8001e40 <SD_SendSDStatus+0xc4>
    {
      for (count = 0; count < 8; count++)
      {
        *(psdstatus + count) = SDIO_ReadData();
 8001e32:	f003 fa71 	bl	8005318 <SDIO_ReadData>
 8001e36:	5130      	str	r0, [r6, r4]
 8001e38:	3404      	adds	r4, #4

  while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
  {
    if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
    {
      for (count = 0; count < 8; count++)
 8001e3a:	2c20      	cmp	r4, #32
 8001e3c:	d1f9      	bne.n	8001e32 <SD_SendSDStatus+0xb6>
      {
        *(psdstatus + count) = SDIO_ReadData();
      }
      psdstatus += 8;
 8001e3e:	3620      	adds	r6, #32
  if (errorstatus != SD_OK)
  {
    return(errorstatus);
  }

  while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <SD_SendSDStatus+0x168>)
 8001e42:	f240 642a 	movw	r4, #1578	; 0x62a
 8001e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e48:	ea03 0404 	and.w	r4, r3, r4
 8001e4c:	2c00      	cmp	r4, #0
 8001e4e:	d0eb      	beq.n	8001e28 <SD_SendSDStatus+0xac>
      }
      psdstatus += 8;
    }
  }

  if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 8001e50:	2008      	movs	r0, #8
 8001e52:	f003 faa7 	bl	80053a4 <SDIO_GetFlagStatus>
 8001e56:	b120      	cbz	r0, 8001e62 <SD_SendSDStatus+0xe6>
  {
    SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 8001e58:	2008      	movs	r0, #8
 8001e5a:	f003 faad 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_TIMEOUT;
    return(errorstatus);
 8001e5e:	2504      	movs	r5, #4
 8001e60:	e034      	b.n	8001ecc <SD_SendSDStatus+0x150>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 8001e62:	2002      	movs	r0, #2
 8001e64:	f003 fa9e 	bl	80053a4 <SDIO_GetFlagStatus>
 8001e68:	b120      	cbz	r0, 8001e74 <SD_SendSDStatus+0xf8>
  {
    SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	f003 faa4 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_DATA_CRC_FAIL;
    return(errorstatus);
 8001e70:	2502      	movs	r5, #2
 8001e72:	e02b      	b.n	8001ecc <SD_SendSDStatus+0x150>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 8001e74:	2020      	movs	r0, #32
 8001e76:	f003 fa95 	bl	80053a4 <SDIO_GetFlagStatus>
 8001e7a:	b120      	cbz	r0, 8001e86 <SD_SendSDStatus+0x10a>
  {
    SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 8001e7c:	2020      	movs	r0, #32
 8001e7e:	f003 fa9b 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_RX_OVERRUN;
    return(errorstatus);
 8001e82:	2506      	movs	r5, #6
 8001e84:	e022      	b.n	8001ecc <SD_SendSDStatus+0x150>
  }
  else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 8001e86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e8a:	f003 fa8b 	bl	80053a4 <SDIO_GetFlagStatus>
 8001e8e:	b148      	cbz	r0, 8001ea4 <SD_SendSDStatus+0x128>
  {
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 8001e90:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e94:	f003 fa90 	bl	80053b8 <SDIO_ClearFlag>
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
 8001e98:	2507      	movs	r5, #7
 8001e9a:	e017      	b.n	8001ecc <SD_SendSDStatus+0x150>
  }

  while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
  {
    *psdstatus = SDIO_ReadData();
 8001e9c:	f003 fa3c 	bl	8005318 <SDIO_ReadData>
 8001ea0:	f846 0b04 	str.w	r0, [r6], #4
    SDIO_ClearFlag(SDIO_FLAG_STBITERR);
    errorstatus = SD_START_BIT_ERR;
    return(errorstatus);
  }

  while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 8001ea4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001ea8:	f003 fa7c 	bl	80053a4 <SDIO_GetFlagStatus>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1f5      	bne.n	8001e9c <SD_SendSDStatus+0x120>
    *psdstatus = SDIO_ReadData();
    psdstatus++;
  }

  /* Clear all the static status flags*/
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 8001eb0:	f240 50ff 	movw	r0, #1535	; 0x5ff
 8001eb4:	f003 fa80 	bl	80053b8 <SDIO_ClearFlag>
  psdstatus -= 16;
 8001eb8:	f1a6 0340 	sub.w	r3, r6, #64	; 0x40
  for (count = 0; count < 16; count++)
  {
    psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	ba12      	rev	r2, r2
 8001ec0:	f843 2b04 	str.w	r2, [r3], #4
  }

  /* Clear all the static status flags*/
  SDIO_ClearFlag(SDIO_STATIC_FLAGS);
  psdstatus -= 16;
  for (count = 0; count < 16; count++)
 8001ec4:	42b3      	cmp	r3, r6
 8001ec6:	d1f9      	bne.n	8001ebc <SD_SendSDStatus+0x140>
 8001ec8:	e000      	b.n	8001ecc <SD_SendSDStatus+0x150>
  uint32_t count = 0;

  if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
  {
    errorstatus = SD_LOCK_UNLOCK_FAILED;
    return(errorstatus);
 8001eca:	250e      	movs	r5, #14
  {
    psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS) << 8) |
                       ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BITS) >> 24);
  }
  return(errorstatus);
}
 8001ecc:	4628      	mov	r0, r5
 8001ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200004b8 	.word	0x200004b8
 8001ed8:	20000028 	.word	0x20000028
 8001edc:	200004e8 	.word	0x200004e8
 8001ee0:	000fffff 	.word	0x000fffff
 8001ee4:	40018000 	.word	0x40018000

08001ee8 <SD_ProcessIRQSrc>:
* Input          : None
* Output         : None
* Return         : SD_Error: SD Card Error code.
*******************************************************************************/
SD_Error SD_ProcessIRQSrc(void)
{
 8001ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t count = 0, restwords = 0;

  if (DeviceMode == SD_INTERRUPT_MODE)
 8001eec:	4c73      	ldr	r4, [pc, #460]	; (80020bc <SD_ProcessIRQSrc+0x1d4>)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d14d      	bne.n	8001f90 <SD_ProcessIRQSrc+0xa8>
  {
    if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
 8001ef4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001ef8:	f003 fa64 	bl	80053c4 <SDIO_GetITStatus>
 8001efc:	4606      	mov	r6, r0
 8001efe:	b180      	cbz	r0, 8001f22 <SD_ProcessIRQSrc+0x3a>
 8001f00:	2500      	movs	r5, #0
    {
      for (count = 0; count < SD_HALFFIFO; count++)
      {
        *(DestBuffer + count) = SDIO_ReadData();
 8001f02:	4e6f      	ldr	r6, [pc, #444]	; (80020c0 <SD_ProcessIRQSrc+0x1d8>)
 8001f04:	6837      	ldr	r7, [r6, #0]
 8001f06:	f003 fa07 	bl	8005318 <SDIO_ReadData>
 8001f0a:	5178      	str	r0, [r7, r5]
 8001f0c:	3504      	adds	r5, #4

  if (DeviceMode == SD_INTERRUPT_MODE)
  {
    if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
    {
      for (count = 0; count < SD_HALFFIFO; count++)
 8001f0e:	2d20      	cmp	r5, #32
 8001f10:	d1f7      	bne.n	8001f02 <SD_ProcessIRQSrc+0x1a>
      {
        *(DestBuffer + count) = SDIO_ReadData();
      }
      DestBuffer += SD_HALFFIFO;
 8001f12:	6833      	ldr	r3, [r6, #0]
 8001f14:	3320      	adds	r3, #32
 8001f16:	6033      	str	r3, [r6, #0]
      NumberOfBytes += SD_HALFFIFOBYTES;
 8001f18:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
 8001f1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1c:	3220      	adds	r2, #32
 8001f1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f20:	e036      	b.n	8001f90 <SD_ProcessIRQSrc+0xa8>
    }
    else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
 8001f22:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001f26:	f003 fa4d 	bl	80053c4 <SDIO_GetITStatus>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d030      	beq.n	8001f90 <SD_ProcessIRQSrc+0xa8>
    {
      if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
 8001f2e:	4d65      	ldr	r5, [pc, #404]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
 8001f30:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001f32:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f34:	1a9a      	subs	r2, r3, r2
 8001f36:	2a1f      	cmp	r2, #31
 8001f38:	d81c      	bhi.n	8001f74 <SD_ProcessIRQSrc+0x8c>
      {
        restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
 8001f3a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f3c:	1a9a      	subs	r2, r3, r2
                    ((TotalNumberOfBytes - NumberOfBytes) / 4) :
 8001f3e:	f012 0f03 	tst.w	r2, #3
 8001f42:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001f44:	ebc2 0803 	rsb	r8, r2, r3
 8001f48:	ea4f 0898 	mov.w	r8, r8, lsr #2
 8001f4c:	bf18      	it	ne
 8001f4e:	f108 0801 	addne.w	r8, r8, #1
                    ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);

        for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 8001f52:	2600      	movs	r6, #0
 8001f54:	e00b      	b.n	8001f6e <SD_ProcessIRQSrc+0x86>
        {
          SDIO_WriteData(*SrcBuffer);
 8001f56:	4f5c      	ldr	r7, [pc, #368]	; (80020c8 <SD_ProcessIRQSrc+0x1e0>)
      {
        restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
                    ((TotalNumberOfBytes - NumberOfBytes) / 4) :
                    ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);

        for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 8001f58:	3601      	adds	r6, #1
        {
          SDIO_WriteData(*SrcBuffer);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	f003 f9e1 	bl	8005324 <SDIO_WriteData>
      {
        restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
                    ((TotalNumberOfBytes - NumberOfBytes) / 4) :
                    ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);

        for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3304      	adds	r3, #4
 8001f66:	603b      	str	r3, [r7, #0]
 8001f68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f6a:	3304      	adds	r3, #4
 8001f6c:	636b      	str	r3, [r5, #52]	; 0x34
 8001f6e:	4546      	cmp	r6, r8
 8001f70:	d3f1      	bcc.n	8001f56 <SD_ProcessIRQSrc+0x6e>
 8001f72:	e00d      	b.n	8001f90 <SD_ProcessIRQSrc+0xa8>
      }
      else
      {
        for (count = 0; count < SD_HALFFIFO; count++)
        {
          SDIO_WriteData(*(SrcBuffer + count));
 8001f74:	4f54      	ldr	r7, [pc, #336]	; (80020c8 <SD_ProcessIRQSrc+0x1e0>)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	5998      	ldr	r0, [r3, r6]
 8001f7a:	3604      	adds	r6, #4
 8001f7c:	f003 f9d2 	bl	8005324 <SDIO_WriteData>
          SDIO_WriteData(*SrcBuffer);
        }
      }
      else
      {
        for (count = 0; count < SD_HALFFIFO; count++)
 8001f80:	2e20      	cmp	r6, #32
 8001f82:	d1f7      	bne.n	8001f74 <SD_ProcessIRQSrc+0x8c>
        {
          SDIO_WriteData(*(SrcBuffer + count));
        }

        SrcBuffer += SD_HALFFIFO;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3320      	adds	r3, #32
 8001f88:	603b      	str	r3, [r7, #0]
        NumberOfBytes += SD_HALFFIFOBYTES;
 8001f8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001f8c:	3320      	adds	r3, #32
 8001f8e:	636b      	str	r3, [r5, #52]	; 0x34
      }
    }
  }

  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
 8001f90:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f94:	f003 fa16 	bl	80053c4 <SDIO_GetITStatus>
 8001f98:	4605      	mov	r5, r0
 8001f9a:	2800      	cmp	r0, #0
 8001f9c:	d033      	beq.n	8002006 <SD_ProcessIRQSrc+0x11e>
  {
    if (DeviceMode != SD_DMA_MODE)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	4d48      	ldr	r5, [pc, #288]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
 8001fa2:	b96b      	cbnz	r3, 8001fc0 <SD_ProcessIRQSrc+0xd8>
 8001fa4:	e016      	b.n	8001fd4 <SD_ProcessIRQSrc+0xec>
    {
      while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
      {
        *DestBuffer = SDIO_ReadData();
 8001fa6:	4e46      	ldr	r6, [pc, #280]	; (80020c0 <SD_ProcessIRQSrc+0x1d8>)
 8001fa8:	f8d6 8000 	ldr.w	r8, [r6]
 8001fac:	f003 f9b4 	bl	8005318 <SDIO_ReadData>
        DestBuffer++;
 8001fb0:	6833      	ldr	r3, [r6, #0]
  {
    if (DeviceMode != SD_DMA_MODE)
    {
      while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
      {
        *DestBuffer = SDIO_ReadData();
 8001fb2:	f8c8 0000 	str.w	r0, [r8]
        DestBuffer++;
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	6033      	str	r3, [r6, #0]
        NumberOfBytes += 4;
 8001fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34

  if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
  {
    if (DeviceMode != SD_DMA_MODE)
    {
      while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfBytes))
 8001fc0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001fc4:	f003 f9ee 	bl	80053a4 <SDIO_GetFlagStatus>
 8001fc8:	b120      	cbz	r0, 8001fd4 <SD_ProcessIRQSrc+0xec>
 8001fca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001fcc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8001fce:	4f3d      	ldr	r7, [pc, #244]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3e8      	bcc.n	8001fa6 <SD_ProcessIRQSrc+0xbe>
        DestBuffer++;
        NumberOfBytes += 4;
      }
    }

    if (StopCondition == 1)
 8001fd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d103      	bne.n	8001fe2 <SD_ProcessIRQSrc+0xfa>
    {
      TransferError = SD_StopTransfer();
 8001fda:	f7ff fe15 	bl	8001c08 <SD_StopTransfer>
 8001fde:	7120      	strb	r0, [r4, #4]
 8001fe0:	e001      	b.n	8001fe6 <SD_ProcessIRQSrc+0xfe>
    }
    else
    {
      TransferError = SD_OK;
 8001fe2:	232a      	movs	r3, #42	; 0x2a
 8001fe4:	7123      	strb	r3, [r4, #4]
    }
    SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 8001fe6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fea:	f003 f9f5 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 8001fee:	f24c 303a 	movw	r0, #49978	; 0xc33a
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	f003 f926 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    TransferEnd = 1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	62ab      	str	r3, [r5, #40]	; 0x28
    NumberOfBytes = 0;
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	636b      	str	r3, [r5, #52]	; 0x34
    return(TransferError);
 8002000:	7920      	ldrb	r0, [r4, #4]
 8002002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
 8002006:	2002      	movs	r0, #2
 8002008:	f003 f9dc 	bl	80053c4 <SDIO_GetITStatus>
 800200c:	4606      	mov	r6, r0
 800200e:	b158      	cbz	r0, 8002028 <SD_ProcessIRQSrc+0x140>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
 8002010:	2002      	movs	r0, #2
 8002012:	f003 f9e1 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 8002016:	f24c 303a 	movw	r0, #49978	; 0xc33a
 800201a:	4629      	mov	r1, r5
 800201c:	f003 f912 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002020:	4b28      	ldr	r3, [pc, #160]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
    TransferError = SD_DATA_CRC_FAIL;
 8002022:	2002      	movs	r0, #2
  {
    SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002024:	635d      	str	r5, [r3, #52]	; 0x34
 8002026:	e043      	b.n	80020b0 <SD_ProcessIRQSrc+0x1c8>
    TransferError = SD_DATA_CRC_FAIL;
    return(SD_DATA_CRC_FAIL);
  }

  if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
 8002028:	2008      	movs	r0, #8
 800202a:	f003 f9cb 	bl	80053c4 <SDIO_GetITStatus>
 800202e:	4605      	mov	r5, r0
 8002030:	b158      	cbz	r0, 800204a <SD_ProcessIRQSrc+0x162>
  {
    SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
 8002032:	2008      	movs	r0, #8
 8002034:	f003 f9d0 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 8002038:	f24c 303a 	movw	r0, #49978	; 0xc33a
 800203c:	4631      	mov	r1, r6
 800203e:	f003 f901 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002042:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
    TransferError = SD_DATA_TIMEOUT;
 8002044:	2004      	movs	r0, #4
  {
    SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002046:	635e      	str	r6, [r3, #52]	; 0x34
 8002048:	e032      	b.n	80020b0 <SD_ProcessIRQSrc+0x1c8>
    TransferError = SD_DATA_TIMEOUT;
    return(SD_DATA_TIMEOUT);
  }

  if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
 800204a:	2020      	movs	r0, #32
 800204c:	f003 f9ba 	bl	80053c4 <SDIO_GetITStatus>
 8002050:	4606      	mov	r6, r0
 8002052:	b158      	cbz	r0, 800206c <SD_ProcessIRQSrc+0x184>
  {
    SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
 8002054:	2020      	movs	r0, #32
 8002056:	f003 f9bf 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 800205a:	f24c 303a 	movw	r0, #49978	; 0xc33a
 800205e:	4629      	mov	r1, r5
 8002060:	f003 f8f0 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
    TransferError = SD_RX_OVERRUN;
 8002066:	2006      	movs	r0, #6
  {
    SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002068:	635d      	str	r5, [r3, #52]	; 0x34
 800206a:	e021      	b.n	80020b0 <SD_ProcessIRQSrc+0x1c8>
    TransferError = SD_RX_OVERRUN;
    return(SD_RX_OVERRUN);
  }

  if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
 800206c:	2010      	movs	r0, #16
 800206e:	f003 f9a9 	bl	80053c4 <SDIO_GetITStatus>
 8002072:	4605      	mov	r5, r0
 8002074:	b158      	cbz	r0, 800208e <SD_ProcessIRQSrc+0x1a6>
  {
    SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
 8002076:	2010      	movs	r0, #16
 8002078:	f003 f9ae 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 800207c:	f24c 303a 	movw	r0, #49978	; 0xc33a
 8002080:	4631      	mov	r1, r6
 8002082:	f003 f8df 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 8002086:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
    TransferError = SD_TX_UNDERRUN;
 8002088:	2005      	movs	r0, #5
  {
    SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 800208a:	635e      	str	r6, [r3, #52]	; 0x34
 800208c:	e010      	b.n	80020b0 <SD_ProcessIRQSrc+0x1c8>
    TransferError = SD_TX_UNDERRUN;
    return(SD_TX_UNDERRUN);
  }

  if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
 800208e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002092:	f003 f997 	bl	80053c4 <SDIO_GetITStatus>
 8002096:	b170      	cbz	r0, 80020b6 <SD_ProcessIRQSrc+0x1ce>
  {
    SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
 8002098:	f44f 7000 	mov.w	r0, #512	; 0x200
 800209c:	f003 f99c 	bl	80053d8 <SDIO_ClearITPendingBit>
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 80020a0:	f24c 303a 	movw	r0, #49978	; 0xc33a
 80020a4:	4629      	mov	r1, r5
 80020a6:	f003 f8cd 	bl	8005244 <SDIO_ITConfig>
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SD_ProcessIRQSrc+0x1dc>)
    TransferError = SD_START_BIT_ERR;
 80020ac:	2007      	movs	r0, #7
  {
    SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
    SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
                  SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
                  SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
    NumberOfBytes = 0;
 80020ae:	635d      	str	r5, [r3, #52]	; 0x34
    TransferError = SD_START_BIT_ERR;
 80020b0:	7120      	strb	r0, [r4, #4]
    return(SD_START_BIT_ERR);
 80020b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }

  return(SD_OK);
 80020b6:	202a      	movs	r0, #42	; 0x2a
}
 80020b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020bc:	20000008 	.word	0x20000008
 80020c0:	200004cc 	.word	0x200004cc
 80020c4:	20000028 	.word	0x20000028
 80020c8:	20000500 	.word	0x20000500

080020cc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80020cc:	4770      	bx	lr

080020ce <I2C2_ER_IRQHandler>:
  * @param  None
  * @retval None
  */
void I2C2_ER_IRQHandler(void){
	uint16_t sr1,sr2;
	sr1 = I2C_ReadRegister(I2C2,I2C_Register_SR2);
 80020ce:	2118      	movs	r1, #24
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void I2C2_ER_IRQHandler(void){
 80020d0:	b510      	push	{r4, lr}
	uint16_t sr1,sr2;
	sr1 = I2C_ReadRegister(I2C2,I2C_Register_SR2);
 80020d2:	4804      	ldr	r0, [pc, #16]	; (80020e4 <I2C2_ER_IRQHandler+0x16>)
 80020d4:	f002 fdfd 	bl	8004cd2 <I2C_ReadRegister>
	sr2 = I2C_ReadRegister(I2C2,I2C_Register_SR1);
 80020d8:	4802      	ldr	r0, [pc, #8]	; (80020e4 <I2C2_ER_IRQHandler+0x16>)
 80020da:	2114      	movs	r1, #20
}
 80020dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void I2C2_ER_IRQHandler(void){
	uint16_t sr1,sr2;
	sr1 = I2C_ReadRegister(I2C2,I2C_Register_SR2);
	sr2 = I2C_ReadRegister(I2C2,I2C_Register_SR1);
 80020e0:	f002 bdf7 	b.w	8004cd2 <I2C_ReadRegister>
 80020e4:	40005800 	.word	0x40005800

080020e8 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 80020e8:	e7fe      	b.n	80020e8 <HardFault_Handler>

080020ea <SDIO_IRQHandler>:
}

void SDIO_IRQHandler(void)
{
	/* Process All SDIO Interrupt Sources */
	SD_ProcessIRQSrc();
 80020ea:	f7ff befd 	b.w	8001ee8 <SD_ProcessIRQSrc>

080020ee <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80020ee:	e7fe      	b.n	80020ee <MemManage_Handler>

080020f0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80020f0:	e7fe      	b.n	80020f0 <BusFault_Handler>

080020f2 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80020f2:	e7fe      	b.n	80020f2 <UsageFault_Handler>

080020f4 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80020f4:	4770      	bx	lr

080020f6 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80020f6:	4770      	bx	lr

080020f8 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80020f8:	4770      	bx	lr

080020fa <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
	GPIO_WriteBit(LED1_PORT,LED1_PIN,!GPIO_ReadInputDataBit(LED1_PORT,LED1_PIN));
 80020fa:	2120      	movs	r1, #32
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80020fc:	b510      	push	{r4, lr}
	GPIO_WriteBit(LED1_PORT,LED1_PIN,!GPIO_ReadInputDataBit(LED1_PORT,LED1_PIN));
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <SysTick_Handler+0x1e>)
 8002100:	f002 fc3a 	bl	8004978 <GPIO_ReadInputDataBit>
 8002104:	f1d0 0201 	rsbs	r2, r0, #1
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <SysTick_Handler+0x1e>)
 800210a:	bf38      	it	cc
 800210c:	2200      	movcc	r2, #0
 800210e:	2120      	movs	r1, #32
}
 8002110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
	GPIO_WriteBit(LED1_PORT,LED1_PIN,!GPIO_ReadInputDataBit(LED1_PORT,LED1_PIN));
 8002114:	f002 bc46 	b.w	80049a4 <GPIO_WriteBit>
 8002118:	40010c00 	.word	0x40010c00

0800211c <MaskAndShiftRight.clone.0>:
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	Delay(100);
}

uint16_t MaskAndShiftRight(uint16_t Source, uint16_t Mask, uint16_t Shift){
	return ( (Source & Mask) >> Shift );
 800211c:	ea01 0000 	and.w	r0, r1, r0
}
 8002120:	0a00      	lsrs	r0, r0, #8
 8002122:	4770      	bx	lr

08002124 <VS1003_GPIO_conf>:
 *  Created on: 25-04-2011
 *      Author: Przemek
 */
#include "vs1003.h"

void VS1003_GPIO_conf(){
 8002124:	b513      	push	{r0, r1, r4, lr}
 	GPIO_InitTypeDef GPIO_InitStructure;

  	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 8002126:	2101      	movs	r1, #1
 8002128:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800212c:	f002 ffc4 	bl	80050b8 <RCC_APB1PeriphClockCmd>

  	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOE, ENABLE);
 8002130:	2050      	movs	r0, #80	; 0x50
 8002132:	2101      	movs	r1, #1
 8002134:	f002 ffb4 	bl	80050a0 <RCC_APB2PeriphClockCmd>

  	// SPI2 : SCK and MOSI
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8002138:	f24e 0300 	movw	r3, #57344	; 0xe000
 800213c:	f8ad 3004 	strh.w	r3, [sp, #4]
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002140:	2303      	movs	r3, #3
 8002142:	f88d 3006 	strb.w	r3, [sp, #6]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002146:	a901      	add	r1, sp, #4
  	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOE, ENABLE);

  	// SPI2 : SCK and MOSI
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002148:	3315      	adds	r3, #21
  	GPIO_Init(GPIOB, &GPIO_InitStructure);
 800214a:	4816      	ldr	r0, [pc, #88]	; (80021a4 <VS1003_GPIO_conf+0x80>)

  	GPIO_InitStructure.GPIO_Pin = CS_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800214c:	2410      	movs	r4, #16
  	RCC_APB2PeriphClockCmd(	RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOE, ENABLE);

  	// SPI2 : SCK and MOSI
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800214e:	f88d 3007 	strb.w	r3, [sp, #7]
  	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002152:	f002 fbba 	bl	80048ca <GPIO_Init>

  	GPIO_InitStructure.GPIO_Pin = CS_PIN;
 8002156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(CS_PORT, &GPIO_InitStructure);
 800215a:	a901      	add	r1, sp, #4
 800215c:	4811      	ldr	r0, [pc, #68]	; (80021a4 <VS1003_GPIO_conf+0x80>)
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
  	GPIO_Init(GPIOB, &GPIO_InitStructure);

  	GPIO_InitStructure.GPIO_Pin = CS_PIN;
 800215e:	f8ad 3004 	strh.w	r3, [sp, #4]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002162:	f88d 4007 	strb.w	r4, [sp, #7]
  	GPIO_Init(CS_PORT, &GPIO_InitStructure);
 8002166:	f002 fbb0 	bl	80048ca <GPIO_Init>

  	GPIO_InitStructure.GPIO_Pin = DREQ_PIN;
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	f8ad 3004 	strh.w	r3, [sp, #4]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
  	GPIO_Init(DREQ_PORT, &GPIO_InitStructure);
 8002170:	a901      	add	r1, sp, #4
  	GPIO_InitStructure.GPIO_Pin = CS_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(CS_PORT, &GPIO_InitStructure);

  	GPIO_InitStructure.GPIO_Pin = DREQ_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 8002172:	2328      	movs	r3, #40	; 0x28
  	GPIO_Init(DREQ_PORT, &GPIO_InitStructure);
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <VS1003_GPIO_conf+0x84>)
  	GPIO_InitStructure.GPIO_Pin = CS_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(CS_PORT, &GPIO_InitStructure);

  	GPIO_InitStructure.GPIO_Pin = DREQ_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
 8002176:	f88d 3007 	strb.w	r3, [sp, #7]
  	GPIO_Init(DREQ_PORT, &GPIO_InitStructure);
 800217a:	f002 fba6 	bl	80048ca <GPIO_Init>

  	GPIO_InitStructure.GPIO_Pin = XDCS_PIN;
 800217e:	2340      	movs	r3, #64	; 0x40
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(XDCS_PORT, &GPIO_InitStructure);
 8002180:	a901      	add	r1, sp, #4
 8002182:	4809      	ldr	r0, [pc, #36]	; (80021a8 <VS1003_GPIO_conf+0x84>)

  	GPIO_InitStructure.GPIO_Pin = DREQ_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;
  	GPIO_Init(DREQ_PORT, &GPIO_InitStructure);

  	GPIO_InitStructure.GPIO_Pin = XDCS_PIN;
 8002184:	f8ad 3004 	strh.w	r3, [sp, #4]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 8002188:	f88d 4007 	strb.w	r4, [sp, #7]
  	GPIO_Init(XDCS_PORT, &GPIO_InitStructure);
 800218c:	f002 fb9d 	bl	80048ca <GPIO_Init>

  	GPIO_InitStructure.GPIO_Pin = XRESET_PIN;
 8002190:	2301      	movs	r3, #1
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(XRESET_PORT, &GPIO_InitStructure);
 8002192:	4806      	ldr	r0, [pc, #24]	; (80021ac <VS1003_GPIO_conf+0x88>)
 8002194:	a901      	add	r1, sp, #4

  	GPIO_InitStructure.GPIO_Pin = XDCS_PIN;
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  	GPIO_Init(XDCS_PORT, &GPIO_InitStructure);

  	GPIO_InitStructure.GPIO_Pin = XRESET_PIN;
 8002196:	f8ad 3004 	strh.w	r3, [sp, #4]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800219a:	f88d 4007 	strb.w	r4, [sp, #7]
  	GPIO_Init(XRESET_PORT, &GPIO_InitStructure);
 800219e:	f002 fb94 	bl	80048ca <GPIO_Init>

}
 80021a2:	bd1c      	pop	{r2, r3, r4, pc}
 80021a4:	40010c00 	.word	0x40010c00
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40011800 	.word	0x40011800

080021b0 <VS1003_SPI_conf>:

void VS1003_SPI_conf(){
 80021b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	SPI_InitTypeDef   SPI_InitStructure;

	// Konfiguracja SPI2
  	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
  	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80021b2:	f44f 7282 	mov.w	r2, #260	; 0x104

void VS1003_SPI_conf(){
	SPI_InitTypeDef   SPI_InitStructure;

	// Konfiguracja SPI2
  	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80021b6:	2300      	movs	r3, #0
  	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80021b8:	f8ad 2006 	strh.w	r2, [sp, #6]
  	// Narazie dla wyslania (SI rising edge)
  	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
  	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;


  	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80021bc:	f44f 7200 	mov.w	r2, #512	; 0x200

void VS1003_SPI_conf(){
	SPI_InitTypeDef   SPI_InitStructure;

	// Konfiguracja SPI2
  	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80021c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
  	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80021c4:	f8ad 3008 	strh.w	r3, [sp, #8]

  	// Narazie dla wyslania (SI rising edge)
  	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80021c8:	f8ad 300a 	strh.w	r3, [sp, #10]
  	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80021cc:	f8ad 300c 	strh.w	r3, [sp, #12]


  	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80021d0:	f8ad 200e 	strh.w	r2, [sp, #14]

  	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
  	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80021d4:	f8ad 3012 	strh.w	r3, [sp, #18]
  	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;


  	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

  	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 80021d8:	2220      	movs	r2, #32
  	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80021da:	2307      	movs	r3, #7
  	SPI_Init(SPI2, &SPI_InitStructure);
 80021dc:	a901      	add	r1, sp, #4
 80021de:	4806      	ldr	r0, [pc, #24]	; (80021f8 <VS1003_SPI_conf+0x48>)
  	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;


  	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;

  	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_32;
 80021e0:	f8ad 2010 	strh.w	r2, [sp, #16]
  	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
  	SPI_InitStructure.SPI_CRCPolynomial = 7;
 80021e4:	f8ad 3014 	strh.w	r3, [sp, #20]
  	SPI_Init(SPI2, &SPI_InitStructure);
 80021e8:	f003 f92e 	bl	8005448 <SPI_Init>

  	// Wlacz NSS
  	//SPI_SSOutputCmd(SPI2, ENABLE);

  	// Wlacz SPI2
  	SPI_Cmd(SPI2, ENABLE);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <VS1003_SPI_conf+0x48>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	f003 f9b3 	bl	800555a <SPI_Cmd>
}
 80021f4:	b007      	add	sp, #28
 80021f6:	bd00      	pop	{pc}
 80021f8:	40003800 	.word	0x40003800

080021fc <SPIPutChar>:

uint8_t SPIPutChar(uint8_t outB){
 80021fc:	b508      	push	{r3, lr}
	  /* Wait if TXE cleared, Tx FIFO is full. */
	   while ((SPI2->SR & TXE) == 0);
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <SPIPutChar+0x20>)
 8002200:	891a      	ldrh	r2, [r3, #8]
 8002202:	f012 0f02 	tst.w	r2, #2
 8002206:	d0fa      	beq.n	80021fe <SPIPutChar+0x2>
	   SPI2->DR = outB;
 8002208:	8198      	strh	r0, [r3, #12]
	   /* Wait if RNE cleared, Rx FIFO is empty. */
	   while ((SPI2->SR & RXNE) == 0);
 800220a:	4804      	ldr	r0, [pc, #16]	; (800221c <SPIPutChar+0x20>)
 800220c:	8903      	ldrh	r3, [r0, #8]
 800220e:	f013 0f01 	tst.w	r3, #1
 8002212:	d0fa      	beq.n	800220a <SPIPutChar+0xe>
	   return SPI_I2S_ReceiveData(SPI2);
 8002214:	f003 f9d7 	bl	80055c6 <SPI_I2S_ReceiveData>
}
 8002218:	b2c0      	uxtb	r0, r0
 800221a:	bd08      	pop	{r3, pc}
 800221c:	40003800 	.word	0x40003800

08002220 <Delay>:
{
	unsigned int i;
	unsigned long j;
	for(i = nTime;i > 0;i--)
		for(j = 1000;j > 0;j--);
}
 8002220:	4770      	bx	lr

08002222 <ControlReset>:

void ControlReset(uint8_t State){
	GPIO_WriteBit(XRESET_PORT,XRESET_PIN,!State);
 8002222:	f1d0 0201 	rsbs	r2, r0, #1
 8002226:	4803      	ldr	r0, [pc, #12]	; (8002234 <ControlReset+0x12>)
 8002228:	bf38      	it	cc
 800222a:	2200      	movcc	r2, #0
 800222c:	2101      	movs	r1, #1
 800222e:	f002 bbb9 	b.w	80049a4 <GPIO_WriteBit>
 8002232:	bf00      	nop
 8002234:	40011800 	.word	0x40011800

08002238 <SCI_ChipSelect>:
}

void SCI_ChipSelect(uint8_t State){
	GPIO_WriteBit(CS_PORT,CS_PIN,!State);
 8002238:	f1d0 0201 	rsbs	r2, r0, #1
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <SCI_ChipSelect+0x14>)
 800223e:	bf38      	it	cc
 8002240:	2200      	movcc	r2, #0
 8002242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002246:	f002 bbad 	b.w	80049a4 <GPIO_WriteBit>
 800224a:	bf00      	nop
 800224c:	40010c00 	.word	0x40010c00

08002250 <SDI_ChipSelect>:
}

void SDI_ChipSelect(uint8_t State){
	GPIO_WriteBit(XDCS_PORT,XDCS_PIN,!State);
 8002250:	f1d0 0201 	rsbs	r2, r0, #1
 8002254:	4802      	ldr	r0, [pc, #8]	; (8002260 <SDI_ChipSelect+0x10>)
 8002256:	bf38      	it	cc
 8002258:	2200      	movcc	r2, #0
 800225a:	2140      	movs	r1, #64	; 0x40
 800225c:	f002 bba2 	b.w	80049a4 <GPIO_WriteBit>
 8002260:	40011000 	.word	0x40011000

08002264 <WriteRegister>:
	SDI_ChipSelect(RESET);

}

void WriteRegister(uint8_t addressbyte, uint8_t highbyte, uint8_t lowbyte)
{
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4605      	mov	r5, r0
	SDI_ChipSelect(RESET);
 8002268:	2000      	movs	r0, #0
	SDI_ChipSelect(RESET);

}

void WriteRegister(uint8_t addressbyte, uint8_t highbyte, uint8_t lowbyte)
{
 800226a:	460c      	mov	r4, r1
 800226c:	4616      	mov	r6, r2
	SDI_ChipSelect(RESET);
 800226e:	f7ff ffef 	bl	8002250 <SDI_ChipSelect>
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 8002272:	480f      	ldr	r0, [pc, #60]	; (80022b0 <WriteRegister+0x4c>)
 8002274:	2180      	movs	r1, #128	; 0x80
 8002276:	f002 fb7f 	bl	8004978 <GPIO_ReadInputDataBit>
 800227a:	2800      	cmp	r0, #0
 800227c:	d0f9      	beq.n	8002272 <WriteRegister+0xe>
	SCI_ChipSelect(SET);
 800227e:	2001      	movs	r0, #1
 8002280:	f7ff ffda 	bl	8002238 <SCI_ChipSelect>
	SPIPutChar(VS_WRITE_COMMAND);
 8002284:	2002      	movs	r0, #2
 8002286:	f7ff ffb9 	bl	80021fc <SPIPutChar>
	SPIPutChar(addressbyte);
 800228a:	4628      	mov	r0, r5
 800228c:	f7ff ffb6 	bl	80021fc <SPIPutChar>
	SPIPutChar(highbyte);
 8002290:	4620      	mov	r0, r4
 8002292:	f7ff ffb3 	bl	80021fc <SPIPutChar>
	SPIPutChar(lowbyte);
 8002296:	4630      	mov	r0, r6
 8002298:	f7ff ffb0 	bl	80021fc <SPIPutChar>
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 800229c:	4804      	ldr	r0, [pc, #16]	; (80022b0 <WriteRegister+0x4c>)
 800229e:	2180      	movs	r1, #128	; 0x80
 80022a0:	f002 fb6a 	bl	8004978 <GPIO_ReadInputDataBit>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d0f9      	beq.n	800229c <WriteRegister+0x38>
	SCI_ChipSelect(RESET);
 80022a8:	2000      	movs	r0, #0
}
 80022aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPIPutChar(VS_WRITE_COMMAND);
	SPIPutChar(addressbyte);
	SPIPutChar(highbyte);
	SPIPutChar(lowbyte);
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	SCI_ChipSelect(RESET);
 80022ae:	e7c3      	b.n	8002238 <SCI_ChipSelect>
 80022b0:	40011000 	.word	0x40011000

080022b4 <ReadRegister>:
}

uint16_t ReadRegister(uint8_t addressbyte){
 80022b4:	b510      	push	{r4, lr}
 80022b6:	4604      	mov	r4, r0
	uint16_t result;
	SDI_ChipSelect(RESET);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7ff ffc9 	bl	8002250 <SDI_ChipSelect>
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 80022be:	4812      	ldr	r0, [pc, #72]	; (8002308 <ReadRegister+0x54>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	f002 fb59 	bl	8004978 <GPIO_ReadInputDataBit>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d0f9      	beq.n	80022be <ReadRegister+0xa>
	SCI_ChipSelect(SET);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f7ff ffb4 	bl	8002238 <SCI_ChipSelect>
	SPIPutChar(VS_READ_COMMAND);
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7ff ff93 	bl	80021fc <SPIPutChar>
	SPIPutChar(addressbyte);
 80022d6:	4620      	mov	r0, r4
 80022d8:	f7ff ff90 	bl	80021fc <SPIPutChar>
	result = SPIPutChar(0) << 8;
 80022dc:	2000      	movs	r0, #0
 80022de:	f7ff ff8d 	bl	80021fc <SPIPutChar>
 80022e2:	0204      	lsls	r4, r0, #8
	result |= SPIPutChar(0);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff ff89 	bl	80021fc <SPIPutChar>
	SDI_ChipSelect(RESET);
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	SCI_ChipSelect(SET);
	SPIPutChar(VS_READ_COMMAND);
	SPIPutChar(addressbyte);
	result = SPIPutChar(0) << 8;
 80022ea:	b2a4      	uxth	r4, r4
	result |= SPIPutChar(0);
 80022ec:	4304      	orrs	r4, r0
 80022ee:	b2a4      	uxth	r4, r4
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <ReadRegister+0x54>)
 80022f2:	2180      	movs	r1, #128	; 0x80
 80022f4:	f002 fb40 	bl	8004978 <GPIO_ReadInputDataBit>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d0f9      	beq.n	80022f0 <ReadRegister+0x3c>
	SCI_ChipSelect(RESET);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7ff ff9b 	bl	8002238 <SCI_ChipSelect>
	return result;

}
 8002302:	4620      	mov	r0, r4
 8002304:	bd10      	pop	{r4, pc}
 8002306:	bf00      	nop
 8002308:	40011000 	.word	0x40011000

0800230c <ResetChip>:

void ResetChip(){
 800230c:	b508      	push	{r3, lr}
	ControlReset(SET);
 800230e:	2001      	movs	r0, #1
 8002310:	f7ff ff87 	bl	8002222 <ControlReset>
	Delay(100);
	SPIPutChar(0xff);
 8002314:	20ff      	movs	r0, #255	; 0xff
 8002316:	f7ff ff71 	bl	80021fc <SPIPutChar>
	SCI_ChipSelect(RESET);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff ff8c 	bl	8002238 <SCI_ChipSelect>
	SDI_ChipSelect(RESET);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff ff95 	bl	8002250 <SDI_ChipSelect>
	ControlReset(RESET);
 8002326:	2000      	movs	r0, #0
 8002328:	f7ff ff7b 	bl	8002222 <ControlReset>
	Delay(100);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 800232c:	4803      	ldr	r0, [pc, #12]	; (800233c <ResetChip+0x30>)
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	f002 fb22 	bl	8004978 <GPIO_ReadInputDataBit>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0f9      	beq.n	800232c <ResetChip+0x20>
	Delay(100);
}
 8002338:	bd08      	pop	{r3, pc}
 800233a:	bf00      	nop
 800233c:	40011000 	.word	0x40011000

08002340 <VS1003_SineTest>:

void SDI_ChipSelect(uint8_t State){
	GPIO_WriteBit(XDCS_PORT,XDCS_PIN,!State);
}

void VS1003_SineTest(){
 8002340:	b510      	push	{r4, lr}
	ControlReset(SET);
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff ff6d 	bl	8002222 <ControlReset>
	ResetChip();
 8002348:	f7ff ffe0 	bl	800230c <ResetChip>
	Delay(1000);
	SPIPutChar(0xff);
 800234c:	20ff      	movs	r0, #255	; 0xff
 800234e:	f7ff ff55 	bl	80021fc <SPIPutChar>

	SCI_ChipSelect(RESET);
 8002352:	2000      	movs	r0, #0
 8002354:	f7ff ff70 	bl	8002238 <SCI_ChipSelect>
	SDI_ChipSelect(RESET);
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff ff79 	bl	8002250 <SDI_ChipSelect>
	ControlReset(RESET);
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff ff5f 	bl	8002222 <ControlReset>

	//ResetChip();
	Delay(500);

	WriteRegister(SPI_MODE,0x08,0x20);//½øÈëvs1003µÄ²âÊÔÄ£Ê½
 8002364:	2000      	movs	r0, #0
 8002366:	2108      	movs	r1, #8
 8002368:	2220      	movs	r2, #32
 800236a:	f7ff ff7b 	bl	8002264 <WriteRegister>
	Delay(500);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 800236e:	4812      	ldr	r0, [pc, #72]	; (80023b8 <VS1003_SineTest+0x78>)
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	f002 fb01 	bl	8004978 <GPIO_ReadInputDataBit>
 8002376:	2800      	cmp	r0, #0
 8002378:	d0f9      	beq.n	800236e <VS1003_SineTest+0x2e>

	SDI_ChipSelect(SET);
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff ff68 	bl	8002250 <SDI_ChipSelect>
	SPIPutChar(0x53);
 8002380:	2053      	movs	r0, #83	; 0x53
 8002382:	f7ff ff3b 	bl	80021fc <SPIPutChar>
	SPIPutChar(0xef);
 8002386:	20ef      	movs	r0, #239	; 0xef
 8002388:	f7ff ff38 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x6e);
 800238c:	206e      	movs	r0, #110	; 0x6e
 800238e:	f7ff ff35 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x24);
 8002392:	2024      	movs	r0, #36	; 0x24
 8002394:	f7ff ff32 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x00);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ff2f 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff ff2c 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7ff ff29 	bl	80021fc <SPIPutChar>
	SPIPutChar(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7ff ff26 	bl	80021fc <SPIPutChar>
	Delay(1000);
	SDI_ChipSelect(RESET);
 80023b0:	2000      	movs	r0, #0

}
 80023b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SPIPutChar(0x00);
	SPIPutChar(0x00);
	SPIPutChar(0x00);
	SPIPutChar(0x00);
	Delay(1000);
	SDI_ChipSelect(RESET);
 80023b6:	e74b      	b.n	8002250 <SDI_ChipSelect>
 80023b8:	40011000 	.word	0x40011000

080023bc <MaskAndShiftRight>:
	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	Delay(100);
}

uint16_t MaskAndShiftRight(uint16_t Source, uint16_t Mask, uint16_t Shift){
	return ( (Source & Mask) >> Shift );
 80023bc:	ea01 0000 	and.w	r0, r1, r0
 80023c0:	4110      	asrs	r0, r2
}
 80023c2:	b280      	uxth	r0, r0
 80023c4:	4770      	bx	lr

080023c6 <VS1003_SendMusicBytes>:
}

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
	int i,j,k,m;

	j = quantity / 32;
 80023c6:	2900      	cmp	r1, #0
	WriteRegister(SPI_STATUS,0,0b00110011);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
}

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
 80023c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i,j,k,m;

	j = quantity / 32;
 80023cc:	4688      	mov	r8, r1
	WriteRegister(SPI_STATUS,0,0b00110011);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
}

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
 80023ce:	4607      	mov	r7, r0
	int i,j,k,m;

	j = quantity / 32;
 80023d0:	bfb8      	it	lt
 80023d2:	f101 081f 	addlt.w	r8, r1, #31
	m = 0;

	SDI_ChipSelect(SET);
 80023d6:	2001      	movs	r0, #1

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
	int i,j,k,m;

	j = quantity / 32;
	m = 0;
 80023d8:	2400      	movs	r4, #0
	WriteRegister(SPI_STATUS,0,0b00110011);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
}

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
 80023da:	460d      	mov	r5, r1
	int i,j,k,m;

	j = quantity / 32;
 80023dc:	ea4f 1868 	mov.w	r8, r8, asr #5
	m = 0;

	SDI_ChipSelect(SET);
 80023e0:	f7ff ff36 	bl	8002250 <SDI_ChipSelect>
	for ( i = 0; i <= j; i++ )
 80023e4:	4626      	mov	r6, r4
 80023e6:	e012      	b.n	800240e <VS1003_SendMusicBytes+0x48>
	{
		while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 80023e8:	480f      	ldr	r0, [pc, #60]	; (8002428 <VS1003_SendMusicBytes+0x62>)
 80023ea:	2180      	movs	r1, #128	; 0x80
 80023ec:	f002 fac4 	bl	8004978 <GPIO_ReadInputDataBit>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	d0f9      	beq.n	80023e8 <VS1003_SendMusicBytes+0x22>
	WriteRegister(SPI_STATUS,0,0b00110011);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
}

void VS1003_SendMusicBytes(uint8_t* music,int quantity){
 80023f4:	f104 0a20 	add.w	sl, r4, #32
 80023f8:	46a1      	mov	r9, r4
	for ( i = 0; i <= j; i++ )
	{
		while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
		for (k=0; k < 32; k++)
		{
		SPIPutChar(music[m]);
 80023fa:	f817 0009 	ldrb.w	r0, [r7, r9]
		m++;
 80023fe:	f109 0901 	add.w	r9, r9, #1
	for ( i = 0; i <= j; i++ )
	{
		while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
		for (k=0; k < 32; k++)
		{
		SPIPutChar(music[m]);
 8002402:	f7ff fefb 	bl	80021fc <SPIPutChar>

	SDI_ChipSelect(SET);
	for ( i = 0; i <= j; i++ )
	{
		while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
		for (k=0; k < 32; k++)
 8002406:	45d1      	cmp	r9, sl
 8002408:	d1f7      	bne.n	80023fa <VS1003_SendMusicBytes+0x34>
 800240a:	3420      	adds	r4, #32

	j = quantity / 32;
	m = 0;

	SDI_ChipSelect(SET);
	for ( i = 0; i <= j; i++ )
 800240c:	3601      	adds	r6, #1
 800240e:	4546      	cmp	r6, r8
 8002410:	ddea      	ble.n	80023e8 <VS1003_SendMusicBytes+0x22>
 8002412:	e003      	b.n	800241c <VS1003_SendMusicBytes+0x56>
		}
	}
	//while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	while (m < quantity)
	{
		SPIPutChar(music[m]);
 8002414:	5d38      	ldrb	r0, [r7, r4]
 8002416:	f7ff fef1 	bl	80021fc <SPIPutChar>
		m++;
 800241a:	3401      	adds	r4, #1
		SPIPutChar(music[m]);
		m++;
		}
	}
	//while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
	while (m < quantity)
 800241c:	42ac      	cmp	r4, r5
 800241e:	dbf9      	blt.n	8002414 <VS1003_SendMusicBytes+0x4e>
	{
		SPIPutChar(music[m]);
		m++;
	}
	SDI_ChipSelect(RESET);
 8002420:	2000      	movs	r0, #0
}
 8002422:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (m < quantity)
	{
		SPIPutChar(music[m]);
		m++;
	}
	SDI_ChipSelect(RESET);
 8002426:	e713      	b.n	8002250 <SDI_ChipSelect>
 8002428:	40011000 	.word	0x40011000

0800242c <VS1003_SoftwareReset>:
}

void VS1003_SoftwareReset(){
	WriteRegister(SPI_MODE,0x00,0x04);
 800242c:	2000      	movs	r0, #0
 800242e:	4601      	mov	r1, r0
 8002430:	2204      	movs	r2, #4
 8002432:	e717      	b.n	8002264 <WriteRegister>

08002434 <VS1003_Start>:

uint16_t MaskAndShiftRight(uint16_t Source, uint16_t Mask, uint16_t Shift){
	return ( (Source & Mask) >> Shift );
}

void VS1003_Start(){
 8002434:	b508      	push	{r3, lr}
	ControlReset(SET);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fef3 	bl	8002222 <ControlReset>
	Delay(1000);
	SPIPutChar(0xFF);
 800243c:	20ff      	movs	r0, #255	; 0xff
 800243e:	f7ff fedd 	bl	80021fc <SPIPutChar>
	SCI_ChipSelect(RESET);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff fef8 	bl	8002238 <SCI_ChipSelect>
	SDI_ChipSelect(RESET);
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff ff01 	bl	8002250 <SDI_ChipSelect>
	ControlReset(RESET);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff fee7 	bl	8002222 <ControlReset>
	VS1003_SoftwareReset();
 8002454:	f7ff ffea 	bl	800242c <VS1003_SoftwareReset>
	Delay(1000);

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 8002458:	4815      	ldr	r0, [pc, #84]	; (80024b0 <VS1003_Start+0x7c>)
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	f002 fa8c 	bl	8004978 <GPIO_ReadInputDataBit>
 8002460:	2800      	cmp	r0, #0
 8002462:	d0f9      	beq.n	8002458 <VS1003_Start+0x24>

	WriteRegister(SPI_MODE,0x08,0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	4602      	mov	r2, r0
 8002468:	2108      	movs	r1, #8
 800246a:	f7ff fefb 	bl	8002264 <WriteRegister>
	WriteRegister(SPI_CLOCKF,0x98,0x00);
 800246e:	2003      	movs	r0, #3
 8002470:	2198      	movs	r1, #152	; 0x98
 8002472:	2200      	movs	r2, #0
 8002474:	f7ff fef6 	bl	8002264 <WriteRegister>
	WriteRegister(SPI_AUDATA,0xAC,0x45);
 8002478:	2005      	movs	r0, #5
 800247a:	21ac      	movs	r1, #172	; 0xac
 800247c:	2245      	movs	r2, #69	; 0x45
 800247e:	f7ff fef1 	bl	8002264 <WriteRegister>
	WriteRegister(SPI_BASS,0x08,0x00);
 8002482:	2002      	movs	r0, #2
 8002484:	2108      	movs	r1, #8
 8002486:	2200      	movs	r2, #0
 8002488:	f7ff feec 	bl	8002264 <WriteRegister>
	WriteRegister(SPI_VOL,0x0B,0x0B);
 800248c:	200b      	movs	r0, #11
 800248e:	4601      	mov	r1, r0
 8002490:	4602      	mov	r2, r0
 8002492:	f7ff fee7 	bl	8002264 <WriteRegister>
	WriteRegister(SPI_STATUS,0,0b00110011);
 8002496:	2001      	movs	r0, #1
 8002498:	2100      	movs	r1, #0
 800249a:	2233      	movs	r2, #51	; 0x33
 800249c:	f7ff fee2 	bl	8002264 <WriteRegister>

	while(GPIO_ReadInputDataBit(DREQ_PORT,DREQ_PIN) == 0);
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <VS1003_Start+0x7c>)
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	f002 fa68 	bl	8004978 <GPIO_ReadInputDataBit>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	d0f9      	beq.n	80024a0 <VS1003_Start+0x6c>
}
 80024ac:	bd08      	pop	{r3, pc}
 80024ae:	bf00      	nop
 80024b0:	40011000 	.word	0x40011000

080024b4 <VS1003_GetVolume>:

void VS1003_SoftwareReset(){
	WriteRegister(SPI_MODE,0x00,0x04);
}

uint8_t 	VS1003_GetVolume(){
 80024b4:	b508      	push	{r3, lr}
	return ( ReadRegister(SPI_VOL) & 0x00FF );
 80024b6:	200b      	movs	r0, #11
 80024b8:	f7ff fefc 	bl	80022b4 <ReadRegister>
}
 80024bc:	b2c0      	uxtb	r0, r0
 80024be:	bd08      	pop	{r3, pc}

080024c0 <VS1003_SetVolume>:
/**
 * Function sets the same volume level to both channels.
 * @param xMinusHalfdB describes damping level as a multiple
 * 		of 0.5dB. Maximum volume is 0 and silence is 0xFEFE.
 */
void	VS1003_SetVolume(uint8_t xMinusHalfdB){
 80024c0:	4601      	mov	r1, r0
	WriteRegister(SPI_VOL,xMinusHalfdB,xMinusHalfdB);
 80024c2:	460a      	mov	r2, r1
 80024c4:	200b      	movs	r0, #11
 80024c6:	e6cd      	b.n	8002264 <WriteRegister>

080024c8 <VS1003_VolumeUp>:
 * If it is impossible to increase volume as much as
 * xHalfdB, volume is set to maximum.
 * @param xHalfdB multiple of 0.5dB describing how
 * 		much volume should be turned up.
 */
void 	VS1003_VolumeUp(uint8_t xHalfdB){
 80024c8:	b510      	push	{r4, lr}
 80024ca:	4604      	mov	r4, r0
	uint8_t currentVol = VS1003_GetVolume();
 80024cc:	f7ff fff2 	bl	80024b4 <VS1003_GetVolume>

	//if it is impossible to turn volume up as we want
	if ( currentVol - xHalfdB > currentVol )
 80024d0:	1b04      	subs	r4, r0, r4
 80024d2:	4284      	cmp	r4, r0
 80024d4:	dd01      	ble.n	80024da <VS1003_VolumeUp+0x12>
		VS1003_SetVolume(0);
 80024d6:	2000      	movs	r0, #0
 80024d8:	e000      	b.n	80024dc <VS1003_VolumeUp+0x14>
	else
		VS1003_SetVolume(currentVol - xHalfdB);
 80024da:	b2e0      	uxtb	r0, r4
}
 80024dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	//if it is impossible to turn volume up as we want
	if ( currentVol - xHalfdB > currentVol )
		VS1003_SetVolume(0);
	else
		VS1003_SetVolume(currentVol - xHalfdB);
 80024e0:	e7ee      	b.n	80024c0 <VS1003_SetVolume>

080024e2 <VS1003_VolumeDown>:
 * If it is impossible to decrease volume as much as
 * xHalfdB, volume is muted.
 * @param xHalfdB multiple of 0.5dB describing how
 * 		much volume should be turned down.
 */
void	VS1003_VolumeDown(uint8_t xHalfdB){
 80024e2:	b510      	push	{r4, lr}
 80024e4:	4604      	mov	r4, r0
	uint8_t currentVol = VS1003_GetVolume();
 80024e6:	f7ff ffe5 	bl	80024b4 <VS1003_GetVolume>

	//if it is impossible to turn volume down as we want
	if ( currentVol + xHalfdB < currentVol ||
 80024ea:	1904      	adds	r4, r0, r4
 80024ec:	4284      	cmp	r4, r0
 80024ee:	db01      	blt.n	80024f4 <VS1003_VolumeDown+0x12>
 80024f0:	2cff      	cmp	r4, #255	; 0xff
 80024f2:	d101      	bne.n	80024f8 <VS1003_VolumeDown+0x16>
			currentVol + xHalfdB == 255)
			VS1003_SetVolume(0xFE);
 80024f4:	20fe      	movs	r0, #254	; 0xfe
 80024f6:	e000      	b.n	80024fa <VS1003_VolumeDown+0x18>
		else
			VS1003_SetVolume(currentVol + xHalfdB);
 80024f8:	b2e0      	uxtb	r0, r4
}
 80024fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	//if it is impossible to turn volume down as we want
	if ( currentVol + xHalfdB < currentVol ||
			currentVol + xHalfdB == 255)
			VS1003_SetVolume(0xFE);
		else
			VS1003_SetVolume(currentVol + xHalfdB);
 80024fe:	e7df      	b.n	80024c0 <VS1003_SetVolume>

08002500 <VS1003_GetTreble>:
/**
 * Functions return level of treble enhancement.
 * @return Returned value describes enhantment in multiplies
 * 		of 1.5dB. 0 value means no enhancement, 8 max (12dB).
 */
uint8_t	VS1003_GetTreble(){
 8002500:	b508      	push	{r3, lr}
	return ( (ReadRegister(SPI_BASS) & 0xF000) >> 12);
 8002502:	2002      	movs	r0, #2
 8002504:	f7ff fed6 	bl	80022b4 <ReadRegister>
 8002508:	0b00      	lsrs	r0, r0, #12
}
 800250a:	b2c0      	uxtb	r0, r0
 800250c:	bd08      	pop	{r3, pc}

0800250e <VS1003_SetTreble>:

void	VS1003_SetTreble(uint8_t xOneAndHalfdB){
 800250e:	b570      	push	{r4, r5, r6, lr}
 8002510:	4605      	mov	r5, r0
	uint16_t bassReg = ReadRegister(SPI_BASS);
 8002512:	2002      	movs	r0, #2
 8002514:	f7ff fece 	bl	80022b4 <ReadRegister>
	if ( xOneAndHalfdB <= 8)
 8002518:	2d08      	cmp	r5, #8
uint8_t	VS1003_GetTreble(){
	return ( (ReadRegister(SPI_BASS) & 0xF000) >> 12);
}

void	VS1003_SetTreble(uint8_t xOneAndHalfdB){
	uint16_t bassReg = ReadRegister(SPI_BASS);
 800251a:	4604      	mov	r4, r0
	if ( xOneAndHalfdB <= 8)
 800251c:	d806      	bhi.n	800252c <VS1003_SetTreble+0x1e>
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0x0F00,8) | (xOneAndHalfdB << 4), bassReg & 0x00FF );
 800251e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002522:	f7ff fdfb 	bl	800211c <MaskAndShiftRight.clone.0>
 8002526:	ea40 1105 	orr.w	r1, r0, r5, lsl #4
 800252a:	e005      	b.n	8002538 <VS1003_SetTreble+0x2a>
	else
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0x0F00,8) | 0b10000000, bassReg & 0x00FF );
 800252c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8002530:	f7ff fdf4 	bl	800211c <MaskAndShiftRight.clone.0>
 8002534:	f060 017f 	orn	r1, r0, #127	; 0x7f
 8002538:	2002      	movs	r0, #2
 800253a:	b2c9      	uxtb	r1, r1
 800253c:	b2e2      	uxtb	r2, r4
}
 800253e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void	VS1003_SetTreble(uint8_t xOneAndHalfdB){
	uint16_t bassReg = ReadRegister(SPI_BASS);
	if ( xOneAndHalfdB <= 8)
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0x0F00,8) | (xOneAndHalfdB << 4), bassReg & 0x00FF );
	else
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0x0F00,8) | 0b10000000, bassReg & 0x00FF );
 8002542:	e68f      	b.n	8002264 <WriteRegister>

08002544 <VS1003_TrebleUp>:
}

void	VS1003_TrebleUp(uint8_t xOneAndHalfdB){
 8002544:	b510      	push	{r4, lr}
 8002546:	4604      	mov	r4, r0
	uint8_t currentTreble = VS1003_GetTreble();
 8002548:	f7ff ffda 	bl	8002500 <VS1003_GetTreble>

	if (currentTreble + xOneAndHalfdB >= 8)
 800254c:	1900      	adds	r0, r0, r4
 800254e:	2807      	cmp	r0, #7
 8002550:	dd01      	ble.n	8002556 <VS1003_TrebleUp+0x12>
		VS1003_SetTreble(8);
 8002552:	2008      	movs	r0, #8
 8002554:	e000      	b.n	8002558 <VS1003_TrebleUp+0x14>
	else
		VS1003_SetTreble(currentTreble + xOneAndHalfdB);
 8002556:	b2c0      	uxtb	r0, r0
}
 8002558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t currentTreble = VS1003_GetTreble();

	if (currentTreble + xOneAndHalfdB >= 8)
		VS1003_SetTreble(8);
	else
		VS1003_SetTreble(currentTreble + xOneAndHalfdB);
 800255c:	e7d7      	b.n	800250e <VS1003_SetTreble>

0800255e <VS1003_TrebleDown>:
}

void	VS1003_TrebleDown(uint8_t xOneAndHalfdB){
 800255e:	b510      	push	{r4, lr}
 8002560:	4604      	mov	r4, r0
	uint8_t currentTreble = VS1003_GetTreble();
 8002562:	f7ff ffcd 	bl	8002500 <VS1003_GetTreble>

	if (currentTreble - xOneAndHalfdB > currentTreble)
 8002566:	1b04      	subs	r4, r0, r4
 8002568:	4284      	cmp	r4, r0
 800256a:	dd01      	ble.n	8002570 <VS1003_TrebleDown+0x12>
		VS1003_SetTreble(0);
 800256c:	2000      	movs	r0, #0
 800256e:	e000      	b.n	8002572 <VS1003_TrebleDown+0x14>
	else
		VS1003_SetTreble(currentTreble - xOneAndHalfdB);
 8002570:	b2e0      	uxtb	r0, r4
}
 8002572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t currentTreble = VS1003_GetTreble();

	if (currentTreble - xOneAndHalfdB > currentTreble)
		VS1003_SetTreble(0);
	else
		VS1003_SetTreble(currentTreble - xOneAndHalfdB);
 8002576:	e7ca      	b.n	800250e <VS1003_SetTreble>

08002578 <VS1003_SetTrebleFreq>:
}

void	VS1003_SetTrebleFreq(uint8_t xkHz){
 8002578:	b570      	push	{r4, r5, r6, lr}
 800257a:	4604      	mov	r4, r0
	uint16_t bassReg = ReadRegister(SPI_BASS);
 800257c:	2002      	movs	r0, #2
 800257e:	f7ff fe99 	bl	80022b4 <ReadRegister>
	if ( xkHz <= 15 )
 8002582:	2c0f      	cmp	r4, #15
	else
		VS1003_SetTreble(currentTreble - xOneAndHalfdB);
}

void	VS1003_SetTrebleFreq(uint8_t xkHz){
	uint16_t bassReg = ReadRegister(SPI_BASS);
 8002584:	4605      	mov	r5, r0
	if ( xkHz <= 15 )
 8002586:	d80b      	bhi.n	80025a0 <VS1003_SetTrebleFreq+0x28>
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0xF000,8) | xkHz, bassReg & 0x00FF );
 8002588:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800258c:	f7ff fdc6 	bl	800211c <MaskAndShiftRight.clone.0>
 8002590:	ea44 0100 	orr.w	r1, r4, r0
 8002594:	b2c9      	uxtb	r1, r1
 8002596:	2002      	movs	r0, #2
 8002598:	b2ea      	uxtb	r2, r5
}
 800259a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void	VS1003_SetTrebleFreq(uint8_t xkHz){
	uint16_t bassReg = ReadRegister(SPI_BASS);
	if ( xkHz <= 15 )
		WriteRegister( SPI_BASS, MaskAndShiftRight(bassReg,0xF000,8) | xkHz, bassReg & 0x00FF );
 800259e:	e661      	b.n	8002264 <WriteRegister>
 80025a0:	bd70      	pop	{r4, r5, r6, pc}

080025a2 <VS1003_GetBass>:
}

uint8_t	VS1003_GetBass(){
 80025a2:	b508      	push	{r3, lr}
	return ( (ReadRegister(SPI_BASS) & 0x00F0) >> 4);
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7ff fe85 	bl	80022b4 <ReadRegister>
 80025aa:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
}
 80025ae:	0900      	lsrs	r0, r0, #4
 80025b0:	bd08      	pop	{r3, pc}

080025b2 <VS1003_SetBass>:

void	VS1003_SetBass(uint8_t xdB){
 80025b2:	b510      	push	{r4, lr}
 80025b4:	4604      	mov	r4, r0
	uint16_t bassReg = ReadRegister(SPI_BASS);
 80025b6:	2002      	movs	r0, #2
 80025b8:	f7ff fe7c 	bl	80022b4 <ReadRegister>
	if (xdB <= 15)
 80025bc:	2c0f      	cmp	r4, #15
		WriteRegister(SPI_BASS, (bassReg & 0xFF00) >> 8, (bassReg & 0x000F) | (xdB << 4) );
 80025be:	bf9a      	itte	ls
 80025c0:	f000 020f 	andls.w	r2, r0, #15
 80025c4:	ea42 1204 	orrls.w	r2, r2, r4, lsl #4
	else
		WriteRegister(SPI_BASS, (bassReg & 0xFF00) >> 8, (bassReg & 0x000F) | 0xF0 );
 80025c8:	f060 020f 	ornhi	r2, r0, #15
 80025cc:	0a01      	lsrs	r1, r0, #8
 80025ce:	b2c9      	uxtb	r1, r1
 80025d0:	2002      	movs	r0, #2
 80025d2:	b2d2      	uxtb	r2, r2
}
 80025d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void	VS1003_SetBass(uint8_t xdB){
	uint16_t bassReg = ReadRegister(SPI_BASS);
	if (xdB <= 15)
		WriteRegister(SPI_BASS, (bassReg & 0xFF00) >> 8, (bassReg & 0x000F) | (xdB << 4) );
	else
		WriteRegister(SPI_BASS, (bassReg & 0xFF00) >> 8, (bassReg & 0x000F) | 0xF0 );
 80025d8:	e644      	b.n	8002264 <WriteRegister>

080025da <VS1003_BassUp>:
}

void	VS1003_BassUp(uint8_t xdB){
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
	uint8_t currentBass = VS1003_GetBass();
 80025de:	f7ff ffe0 	bl	80025a2 <VS1003_GetBass>

	if (currentBass + xdB >= 15)
 80025e2:	1900      	adds	r0, r0, r4
 80025e4:	280e      	cmp	r0, #14
 80025e6:	dd01      	ble.n	80025ec <VS1003_BassUp+0x12>
		VS1003_SetBass(15);
 80025e8:	200f      	movs	r0, #15
 80025ea:	e000      	b.n	80025ee <VS1003_BassUp+0x14>
	else
		VS1003_SetBass(currentBass + xdB);
 80025ec:	b2c0      	uxtb	r0, r0
}
 80025ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	uint8_t currentBass = VS1003_GetBass();

	if (currentBass + xdB >= 15)
		VS1003_SetBass(15);
	else
		VS1003_SetBass(currentBass + xdB);
 80025f2:	e7de      	b.n	80025b2 <VS1003_SetBass>

080025f4 <VS1003_BassDown>:
}

void	VS1003_BassDown(uint8_t xdB){
 80025f4:	b510      	push	{r4, lr}
 80025f6:	4604      	mov	r4, r0
	uint8_t currentBass = VS1003_GetBass();
 80025f8:	f7ff ffd3 	bl	80025a2 <VS1003_GetBass>
	if (currentBass - xdB > currentBass)
 80025fc:	1b04      	subs	r4, r0, r4
 80025fe:	4284      	cmp	r4, r0
 8002600:	dd01      	ble.n	8002606 <VS1003_BassDown+0x12>
		VS1003_SetBass(0);
 8002602:	2000      	movs	r0, #0
 8002604:	e000      	b.n	8002608 <VS1003_BassDown+0x14>
	else
		VS1003_SetBass(currentBass - xdB);
 8002606:	b2e0      	uxtb	r0, r4
}
 8002608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void	VS1003_BassDown(uint8_t xdB){
	uint8_t currentBass = VS1003_GetBass();
	if (currentBass - xdB > currentBass)
		VS1003_SetBass(0);
	else
		VS1003_SetBass(currentBass - xdB);
 800260c:	e7d1      	b.n	80025b2 <VS1003_SetBass>

0800260e <VS1003_SetBassFreq>:
}

void	VS1003_SetBassFreq(uint8_t xTenHz){
 800260e:	b570      	push	{r4, r5, r6, lr}
 8002610:	4604      	mov	r4, r0
	uint16_t bassReg = ReadRegister(SPI_BASS);
 8002612:	2002      	movs	r0, #2
 8002614:	f7ff fe4e 	bl	80022b4 <ReadRegister>
	if (xTenHz >=2 && xTenHz <= 15)
 8002618:	1ea3      	subs	r3, r4, #2
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b0d      	cmp	r3, #13
	else
		VS1003_SetBass(currentBass - xdB);
}

void	VS1003_SetBassFreq(uint8_t xTenHz){
	uint16_t bassReg = ReadRegister(SPI_BASS);
 800261e:	4605      	mov	r5, r0
	if (xTenHz >=2 && xTenHz <= 15)
 8002620:	d80b      	bhi.n	800263a <VS1003_SetBassFreq+0x2c>
		WriteRegister(SPI_BASS, MaskAndShiftRight(bassReg,0xFF00,8), (bassReg & 0x00F0) | xTenHz );
 8002622:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8002626:	f7ff fd79 	bl	800211c <MaskAndShiftRight.clone.0>
 800262a:	f005 02f0 	and.w	r2, r5, #240	; 0xf0
 800262e:	b2c1      	uxtb	r1, r0
 8002630:	4322      	orrs	r2, r4
 8002632:	2002      	movs	r0, #2
}
 8002634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void	VS1003_SetBassFreq(uint8_t xTenHz){
	uint16_t bassReg = ReadRegister(SPI_BASS);
	if (xTenHz >=2 && xTenHz <= 15)
		WriteRegister(SPI_BASS, MaskAndShiftRight(bassReg,0xFF00,8), (bassReg & 0x00F0) | xTenHz );
 8002638:	e614      	b.n	8002264 <WriteRegister>
 800263a:	bd70      	pop	{r4, r5, r6, pc}

0800263c <disk_initialize>:
DSTATUS disk_initialize (
	BYTE drv				/* Physical drive nmuber (0..) */
)
{
	return 0;
}
 800263c:	2000      	movs	r0, #0
 800263e:	4770      	bx	lr

08002640 <disk_status>:
DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0..) */
)
{	
	return 0;
}
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr

08002644 <disk_read>:
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
  //memset(buff2, 0, sizeof(buff2));
	if(count==1)
 8002644:	2b01      	cmp	r3, #1
	BYTE drv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	BYTE count		/* Number of sectors to read (1..255) */
)
{
 8002646:	b508      	push	{r3, lr}
 8002648:	ea4f 2042 	mov.w	r0, r2, lsl #9
  //memset(buff2, 0, sizeof(buff2));
	if(count==1)
 800264c:	d104      	bne.n	8002658 <disk_read+0x14>
        {
          SD_ReadBlock(sector << 9 ,(u32 *)(&buff[0]),SECTOR_SIZE);
 800264e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002652:	f7fe fd0d 	bl	8001070 <SD_ReadBlock>
 8002656:	e003      	b.n	8002660 <disk_read+0x1c>
          //memcpy(buff,buff2,SECTOR_SIZE);
	}
	else
        {
          SD_ReadMultiBlocks(sector << 9 ,(u32 *)(&buff[0]),SECTOR_SIZE,count);
 8002658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265c:	f7fe fe26 	bl	80012ac <SD_ReadMultiBlocks>
          //memcpy(buff,buff2,SECTOR_SIZE * count);
	}


	return RES_OK;
}
 8002660:	2000      	movs	r0, #0
 8002662:	bd08      	pop	{r3, pc}

08002664 <disk_write>:
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
  //memset(buff2, 0, sizeof(buff2));
	if(count==1)
 8002664:	2b01      	cmp	r3, #1
	BYTE drv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	BYTE count			/* Number of sectors to write (1..255) */
)
{
 8002666:	b508      	push	{r3, lr}
 8002668:	ea4f 2042 	mov.w	r0, r2, lsl #9
  //memset(buff2, 0, sizeof(buff2));
	if(count==1)
 800266c:	d104      	bne.n	8002678 <disk_write+0x14>
        {
          //memcpy(buff2,buff,SECTOR_SIZE);
          SD_WriteBlock(sector << 9 ,(u32 *)(&buff[0]),SECTOR_SIZE);
 800266e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002672:	f7fe ff6d 	bl	8001550 <SD_WriteBlock>
 8002676:	e003      	b.n	8002680 <disk_write+0x1c>
	}
	else
        {
          //memcpy(buff2,buff,SECTOR_SIZE * count);
          SD_WriteMultiBlocks(sector << 9 ,(u32 *)(&buff[0]),SECTOR_SIZE,count);
 8002678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800267c:	f7ff f8fa 	bl	8001874 <SD_WriteMultiBlocks>
	}
        
  return RES_OK;
}
 8002680:	2000      	movs	r0, #0
 8002682:	bd08      	pop	{r3, pc}

08002684 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{

	return RES_OK;
}
 8002684:	2000      	movs	r0, #0
 8002686:	4770      	bx	lr

08002688 <get_fattime>:

DWORD get_fattime(void){
	return 0;
}
 8002688:	2000      	movs	r0, #0
 800268a:	4770      	bx	lr

0800268c <mem_cpy>:
/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, int cnt) {
	char *d = (char*)dst;
	const char *s = (const char *)src;
	while (cnt--) *d++ = *s++;
 800268c:	e003      	b.n	8002696 <mem_cpy+0xa>
 800268e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002692:	f800 3b01 	strb.w	r3, [r0], #1
 8002696:	3a01      	subs	r2, #1
 8002698:	d2f9      	bcs.n	800268e <mem_cpy+0x2>
}
 800269a:	4770      	bx	lr

0800269c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
 800269c:	e001      	b.n	80026a2 <mem_set+0x6>
 800269e:	f800 1b01 	strb.w	r1, [r0], #1
 80026a2:	3a01      	subs	r2, #1
 80026a4:	d2fb      	bcs.n	800269e <mem_set+0x2>
}
 80026a6:	4770      	bx	lr

080026a8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
 80026a8:	b530      	push	{r4, r5, lr}
 80026aa:	4603      	mov	r3, r0
	const char *d = (const char *)dst, *s = (const char *)src;
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80026ac:	2400      	movs	r4, #0
 80026ae:	b132      	cbz	r2, 80026be <mem_cmp+0x16>
 80026b0:	5d1d      	ldrb	r5, [r3, r4]
 80026b2:	5d08      	ldrb	r0, [r1, r4]
 80026b4:	3a01      	subs	r2, #1
 80026b6:	3401      	adds	r4, #1
 80026b8:	1a28      	subs	r0, r5, r0
 80026ba:	d0f8      	beq.n	80026ae <mem_cmp+0x6>
 80026bc:	bd30      	pop	{r4, r5, pc}
 80026be:	4610      	mov	r0, r2
	return r;
}
 80026c0:	bd30      	pop	{r4, r5, pc}

080026c2 <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 80026c2:	69c3      	ldr	r3, [r0, #28]
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 80026c4:	3902      	subs	r1, #2
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 80026c6:	3b02      	subs	r3, #2
 80026c8:	4299      	cmp	r1, r3
 80026ca:	d204      	bcs.n	80026d6 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 80026cc:	7882      	ldrb	r2, [r0, #2]
 80026ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026d0:	fb02 3001 	mla	r0, r2, r1, r3
 80026d4:	4770      	bx	lr
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 80026d6:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
 80026d8:	4770      	bx	lr

080026da <get_fileinfo>:
	XCHAR *tp;
#endif


	p = fno->fname;
	if (dj->sect) {
 80026da:	6903      	ldr	r3, [r0, #16]
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to store the file information */
)
{
 80026dc:	b570      	push	{r4, r5, r6, lr}
#if _USE_LFN
	XCHAR *tp;
#endif


	p = fno->fname;
 80026de:	f101 0409 	add.w	r4, r1, #9
	if (dj->sect) {
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d04d      	beq.n	8002782 <get_fileinfo+0xa8>
		dir = dj->dir;
 80026e6:	6943      	ldr	r3, [r0, #20]
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 80026e8:	2500      	movs	r5, #0


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
 80026ea:	7b1e      	ldrb	r6, [r3, #12]
 80026ec:	4620      	mov	r0, r4
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
 80026ee:	5d5a      	ldrb	r2, [r3, r5]


	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
 80026f0:	4604      	mov	r4, r0
		for (i = 0; i < 8; i++) {	/* Copy name body */
			c = dir[i];
			if (c == ' ') break;
 80026f2:	2a20      	cmp	r2, #32
 80026f4:	d012      	beq.n	800271c <get_fileinfo+0x42>
			if (c == 0x05) c = 0xE5;
 80026f6:	2a05      	cmp	r2, #5
 80026f8:	bf08      	it	eq
 80026fa:	22e5      	moveq	r2, #229	; 0xe5
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
 80026fc:	f016 0f08 	tst.w	r6, #8
 8002700:	d006      	beq.n	8002710 <get_fileinfo+0x36>
 8002702:	f1a2 0441 	sub.w	r4, r2, #65	; 0x41
 8002706:	b2e4      	uxtb	r4, r4
 8002708:	2c19      	cmp	r4, #25
 800270a:	d801      	bhi.n	8002710 <get_fileinfo+0x36>
 800270c:	3220      	adds	r2, #32
 800270e:	b2d2      	uxtb	r2, r2

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8002710:	3501      	adds	r5, #1
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
 8002712:	f800 2b01 	strb.w	r2, [r0], #1

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 8002716:	2d08      	cmp	r5, #8
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
 8002718:	4604      	mov	r4, r0

	p = fno->fname;
	if (dj->sect) {
		dir = dj->dir;
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
 800271a:	d1e8      	bne.n	80026ee <get_fileinfo+0x14>
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
 800271c:	7a1a      	ldrb	r2, [r3, #8]
 800271e:	2a20      	cmp	r2, #32
 8002720:	d018      	beq.n	8002754 <get_fileinfo+0x7a>
			*p++ = '.';
 8002722:	4602      	mov	r2, r0
 8002724:	202e      	movs	r0, #46	; 0x2e
 8002726:	f802 0b01 	strb.w	r0, [r2], #1
			for (i = 8; i < 11; i++) {
 800272a:	2508      	movs	r5, #8
				c = dir[i];
 800272c:	5d58      	ldrb	r0, [r3, r5]
			if (c == 0x05) c = 0xE5;
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
 800272e:	4614      	mov	r4, r2
			for (i = 8; i < 11; i++) {
				c = dir[i];
				if (c == ' ') break;
 8002730:	2820      	cmp	r0, #32
 8002732:	d00f      	beq.n	8002754 <get_fileinfo+0x7a>
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
 8002734:	f016 0f10 	tst.w	r6, #16
 8002738:	d006      	beq.n	8002748 <get_fileinfo+0x6e>
 800273a:	f1a0 0441 	sub.w	r4, r0, #65	; 0x41
 800273e:	b2e4      	uxtb	r4, r4
 8002740:	2c19      	cmp	r4, #25
 8002742:	d801      	bhi.n	8002748 <get_fileinfo+0x6e>
 8002744:	3020      	adds	r0, #32
 8002746:	b2c0      	uxtb	r0, r0
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 8002748:	3501      	adds	r5, #1
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
 800274a:	f802 0b01 	strb.w	r0, [r2], #1
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 800274e:	2d0b      	cmp	r5, #11
				c = dir[i];
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
 8002750:	4614      	mov	r4, r2
			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
 8002752:	d1eb      	bne.n	800272c <get_fileinfo+0x52>
				if (c == ' ') break;
				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8002754:	7ada      	ldrb	r2, [r3, #11]
 8002756:	720a      	strb	r2, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 8002758:	7f9a      	ldrb	r2, [r3, #30]
 800275a:	7fd8      	ldrb	r0, [r3, #31]
 800275c:	0412      	lsls	r2, r2, #16
 800275e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002762:	7f18      	ldrb	r0, [r3, #28]
 8002764:	4302      	orrs	r2, r0
 8002766:	7f58      	ldrb	r0, [r3, #29]
 8002768:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800276c:	600a      	str	r2, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 800276e:	7e58      	ldrb	r0, [r3, #25]
 8002770:	7e1a      	ldrb	r2, [r3, #24]
 8002772:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002776:	808a      	strh	r2, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 8002778:	7dda      	ldrb	r2, [r3, #23]
 800277a:	7d9b      	ldrb	r3, [r3, #22]
 800277c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002780:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	7023      	strb	r3, [r4, #0]
			}
		}
		tp[i] = 0;	/* Terminator */
	}
#endif
}
 8002786:	bd70      	pop	{r4, r5, r6, pc}

08002788 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
 8002788:	b508      	push	{r3, lr}
	if (!fs || !fs->fs_type || fs->id != id)
 800278a:	b160      	cbz	r0, 80027a6 <validate+0x1e>
 800278c:	7803      	ldrb	r3, [r0, #0]
 800278e:	b153      	cbz	r3, 80027a6 <validate+0x1e>
 8002790:	88c3      	ldrh	r3, [r0, #6]
 8002792:	428b      	cmp	r3, r1
 8002794:	d109      	bne.n	80027aa <validate+0x22>
		return FR_INVALID_OBJECT;

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drive) & STA_NOINIT)
 8002796:	7840      	ldrb	r0, [r0, #1]
 8002798:	f7ff ff52 	bl	8002640 <disk_status>
 800279c:	f010 0001 	ands.w	r0, r0, #1
		return FR_NOT_READY;
 80027a0:	bf18      	it	ne
 80027a2:	2003      	movne	r0, #3
 80027a4:	bd08      	pop	{r3, pc}
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
 80027a6:	2009      	movs	r0, #9
 80027a8:	bd08      	pop	{r3, pc}
 80027aa:	2009      	movs	r0, #9

	if (disk_status(fs->drive) & STA_NOINIT)
		return FR_NOT_READY;

	return FR_OK;
}
 80027ac:	bd08      	pop	{r3, pc}

080027ae <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80027ae:	b510      	push	{r4, lr}
 80027b0:	4604      	mov	r4, r0
 80027b2:	460a      	mov	r2, r1
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 80027b4:	7840      	ldrb	r0, [r0, #1]
 80027b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80027ba:	2301      	movs	r3, #1
 80027bc:	f7ff ff42 	bl	8002644 <disk_read>
 80027c0:	b9d8      	cbnz	r0, 80027fa <check_fs+0x4c>
		return 3;
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
 80027c2:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80027c6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80027ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80027ce:	4b0e      	ldr	r3, [pc, #56]	; (8002808 <check_fs+0x5a>)
 80027d0:	b212      	sxth	r2, r2
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d113      	bne.n	80027fe <check_fs+0x50>
		return 2;

	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 80027d6:	f104 0066 	add.w	r0, r4, #102	; 0x66
 80027da:	490c      	ldr	r1, [pc, #48]	; (800280c <check_fs+0x5e>)
 80027dc:	2203      	movs	r2, #3
 80027de:	f7ff ff63 	bl	80026a8 <mem_cmp>
 80027e2:	b178      	cbz	r0, 8002804 <check_fs+0x56>
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 80027e4:	f104 0082 	add.w	r0, r4, #130	; 0x82
 80027e8:	4908      	ldr	r1, [pc, #32]	; (800280c <check_fs+0x5e>)
 80027ea:	2203      	movs	r2, #3
 80027ec:	f7ff ff5c 	bl	80026a8 <mem_cmp>
 80027f0:	b938      	cbnz	r0, 8002802 <check_fs+0x54>
/*-----------------------------------------------------------------------*/
/* Load boot record and check if it is an FAT boot record                */
/*-----------------------------------------------------------------------*/

static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
 80027f2:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
{
	static const char fatstr[] = "FAT";


	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
		return 3;
 80027f6:	09c0      	lsrs	r0, r0, #7
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	2003      	movs	r0, #3
 80027fc:	bd10      	pop	{r4, pc}
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
		return 2;
 80027fe:	2002      	movs	r0, #2
 8002800:	bd10      	pop	{r4, pc}
	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
		return 0;
	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
		return 0;

	return 1;
 8002802:	2001      	movs	r0, #1
}
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop
 8002808:	ffffaa55 	.word	0xffffaa55
 800280c:	080057ba 	.word	0x080057ba

08002810 <auto_mount>:
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 8002810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FRESULT res;
	BYTE fmt, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fsize, tsect, mclst;
	const XCHAR *p = *path;
 8002814:	6803      	ldr	r3, [r0, #0]
FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
 8002816:	4615      	mov	r5, r2
	const XCHAR *p = *path;
	FATFS *fs;


	/* Get logical drive number from the path name */
	vol = p[0] - '0';				/* Is there a drive number? */
 8002818:	781a      	ldrb	r2, [r3, #0]
 800281a:	3a30      	subs	r2, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 800281c:	2a09      	cmp	r2, #9
 800281e:	d807      	bhi.n	8002830 <auto_mount+0x20>
 8002820:	785c      	ldrb	r4, [r3, #1]
 8002822:	2c3a      	cmp	r4, #58	; 0x3a
 8002824:	d104      	bne.n	8002830 <auto_mount+0x20>
		p += 2; *path = p;			/* Return pointer to the path name */
 8002826:	3302      	adds	r3, #2
 8002828:	6003      	str	r3, [r0, #0]
		vol = 0;					/* Use drive 0 */
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 800282a:	2a00      	cmp	r2, #0
 800282c:	f040 811d 	bne.w	8002a6a <auto_mount+0x25a>
		return FR_INVALID_DRIVE;
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 8002830:	4ea2      	ldr	r6, [pc, #648]	; (8002abc <auto_mount+0x2ac>)
 8002832:	6834      	ldr	r4, [r6, #0]
 8002834:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 8002836:	2c00      	cmp	r4, #0
 8002838:	f000 811a 	beq.w	8002a70 <auto_mount+0x260>

	ENTER_FF(fs);					/* Lock file system */

	if (fs->fs_type) {				/* If the logical drive has been mounted */
 800283c:	7823      	ldrb	r3, [r4, #0]
 800283e:	b173      	cbz	r3, 800285e <auto_mount+0x4e>
		stat = disk_status(fs->drive);
 8002840:	7860      	ldrb	r0, [r4, #1]
 8002842:	f7ff fefd 	bl	8002640 <disk_status>
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
 8002846:	f010 0f01 	tst.w	r0, #1
 800284a:	d108      	bne.n	800285e <auto_mount+0x4e>
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 800284c:	2d00      	cmp	r5, #0
 800284e:	f000 8112 	beq.w	8002a76 <auto_mount+0x266>
				return FR_WRITE_PROTECTED;
 8002852:	f010 0004 	ands.w	r0, r0, #4
 8002856:	bf18      	it	ne
 8002858:	200a      	movne	r0, #10
 800285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}

	/* The logical drive must be mounted. Following code attempts to mount the volume */

	fs->fs_type = 0;					/* Clear the file system object */
 800285e:	2000      	movs	r0, #0
 8002860:	7020      	strb	r0, [r4, #0]
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 8002862:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 8002864:	f7ff feea 	bl	800263c <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 8002868:	f010 0f01 	tst.w	r0, #1
 800286c:	f040 8106 	bne.w	8002a7c <auto_mount+0x26c>
#if _MAX_SS != 512						/* Get disk sector size if needed */
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002870:	b11d      	cbz	r5, 800287a <auto_mount+0x6a>
 8002872:	f010 0f04 	tst.w	r0, #4
 8002876:	f040 8104 	bne.w	8002a82 <auto_mount+0x272>
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 800287a:	2100      	movs	r1, #0
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff ff96 	bl	80027ae <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 8002882:	2801      	cmp	r0, #1
 8002884:	d117      	bne.n	80028b6 <auto_mount+0xa6>
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
 8002886:	f894 31f2 	ldrb.w	r3, [r4, #498]	; 0x1f2
 800288a:	2b00      	cmp	r3, #0
 800288c:	f000 80ff 	beq.w	8002a8e <auto_mount+0x27e>
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 8002890:	f894 71f8 	ldrb.w	r7, [r4, #504]	; 0x1f8
 8002894:	f894 31f9 	ldrb.w	r3, [r4, #505]	; 0x1f9
 8002898:	043f      	lsls	r7, r7, #16
 800289a:	ea47 6703 	orr.w	r7, r7, r3, lsl #24
 800289e:	f894 31f6 	ldrb.w	r3, [r4, #502]	; 0x1f6
			fmt = check_fs(fs, bsect);					/* Check the partition */
 80028a2:	4620      	mov	r0, r4
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
		/* Check a partition listed in top of the partition table */
		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 80028a4:	431f      	orrs	r7, r3
 80028a6:	f894 31f7 	ldrb.w	r3, [r4, #503]	; 0x1f7
 80028aa:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
			fmt = check_fs(fs, bsect);					/* Check the partition */
 80028ae:	4639      	mov	r1, r7
 80028b0:	f7ff ff7d 	bl	80027ae <check_fs>
 80028b4:	e000      	b.n	80028b8 <auto_mount+0xa8>
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
#endif
	/* Search FAT partition on the drive */
	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 80028b6:	2700      	movs	r7, #0
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 80028b8:	2803      	cmp	r0, #3
 80028ba:	f000 80e5 	beq.w	8002a88 <auto_mount+0x278>
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 80028be:	2800      	cmp	r0, #0
 80028c0:	f040 80e5 	bne.w	8002a8e <auto_mount+0x27e>
 80028c4:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 80028c8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80028cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d4:	f040 80de 	bne.w	8002a94 <auto_mount+0x284>
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 80028d8:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80028dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 80028e0:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 80028e4:	d10d      	bne.n	8002902 <auto_mount+0xf2>
 80028e6:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80028ea:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 80028ee:	041b      	lsls	r3, r3, #16
 80028f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028f4:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80028f8:	4313      	orrs	r3, r2
 80028fa:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 80028fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002902:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 8002906:	f894 c042 	ldrb.w	ip, [r4, #66]	; 0x42
 800290a:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
		return FR_NO_FILESYSTEM;

	/* Initialize the file system object */
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
 800290e:	61a3      	str	r3, [r4, #24]
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8002910:	70e2      	strb	r2, [r4, #3]
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 8002912:	4353      	muls	r3, r2
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8002914:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
 8002918:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 800291c:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 8002920:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
 8002924:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8002928:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 800292c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8002930:	187a      	adds	r2, r7, r1
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 8002932:	ea5c 2c08 	orrs.w	ip, ip, r8, lsl #8
	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
	fs->sects_fat = fsize;
	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 8002936:	6222      	str	r2, [r4, #32]
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002938:	70a5      	strb	r5, [r4, #2]
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 800293a:	8120      	strh	r0, [r4, #8]
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 800293c:	d10f      	bne.n	800295e <auto_mount+0x14e>
 800293e:	f894 c052 	ldrb.w	ip, [r4, #82]	; 0x52
 8002942:	f894 8053 	ldrb.w	r8, [r4, #83]	; 0x53
 8002946:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 800294a:	ea4c 6c08 	orr.w	ip, ip, r8, lsl #24
 800294e:	f894 8050 	ldrb.w	r8, [r4, #80]	; 0x50
 8002952:	ea4c 0c08 	orr.w	ip, ip, r8
 8002956:	f894 8051 	ldrb.w	r8, [r4, #81]	; 0x51
 800295a:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 800295e:	ebc1 010c 	rsb	r1, r1, ip
 8002962:	0900      	lsrs	r0, r0, #4
 8002964:	1ac9      	subs	r1, r1, r3
 8002966:	1a09      	subs	r1, r1, r0
		) / fs->csize + 2;
 8002968:	fbb1 f1f5 	udiv	r1, r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 800296c:	3102      	adds	r1, #2
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 800296e:	f640 75f6 	movw	r5, #4086	; 0xff6
 8002972:	42a9      	cmp	r1, r5
	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 8002974:	61e1      	str	r1, [r4, #28]
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8002976:	d906      	bls.n	8002986 <auto_mount+0x176>
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 8002978:	f64f 75f6 	movw	r5, #65526	; 0xfff6
 800297c:	42a9      	cmp	r1, r5
 800297e:	f200 808c 	bhi.w	8002a9a <auto_mount+0x28a>
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 8002982:	2502      	movs	r5, #2
 8002984:	e000      	b.n	8002988 <auto_mount+0x178>
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
 8002986:	2501      	movs	r5, #1
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 8002988:	1899      	adds	r1, r3, r2
 800298a:	6261      	str	r1, [r4, #36]	; 0x24
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 800298c:	1812      	adds	r2, r2, r0
 800298e:	18d3      	adds	r3, r2, r3
 8002990:	62a3      	str	r3, [r4, #40]	; 0x28

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
 8002992:	f04f 33ff 	mov.w	r3, #4294967295
 8002996:	6123      	str	r3, [r4, #16]
	fs->wflag = 0;
 8002998:	3301      	adds	r3, #1
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 800299a:	2d03      	cmp	r5, #3
	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */

#if !_FS_READONLY
	/* Initialize allocation information */
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
 800299c:	7123      	strb	r3, [r4, #4]
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
 800299e:	d15a      	bne.n	8002a56 <auto_mount+0x246>
	 	fs->fsi_flag = 0;
 80029a0:	72a3      	strb	r3, [r4, #10]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80029a2:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80029a6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80029aa:	7860      	ldrb	r0, [r4, #1]
	fs->free_clust = 0xFFFFFFFF;
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 80029ac:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
 80029b0:	18ba      	adds	r2, r7, r2
 80029b2:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80029b4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80029b8:	2301      	movs	r3, #1
 80029ba:	f7ff fe43 	bl	8002644 <disk_read>
 80029be:	2800      	cmp	r0, #0
 80029c0:	d149      	bne.n	8002a56 <auto_mount+0x246>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80029c2:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 80029c6:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 80029ca:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	fs->wflag = 0;
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 80029ce:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <auto_mount+0x2b0>)
 80029d0:	b212      	sxth	r2, r2
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d13f      	bne.n	8002a56 <auto_mount+0x246>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 80029d6:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80029da:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80029de:	0412      	lsls	r2, r2, #16
 80029e0:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 80029e4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80029e8:	431a      	orrs	r2, r3
 80029ea:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 80029ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	/* Get fsinfo if needed */
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 80029f2:	4b34      	ldr	r3, [pc, #208]	; (8002ac4 <auto_mount+0x2b4>)
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d12e      	bne.n	8002a56 <auto_mount+0x246>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 80029f8:	f894 2216 	ldrb.w	r2, [r4, #534]	; 0x216
 80029fc:	f894 3217 	ldrb.w	r3, [r4, #535]	; 0x217
 8002a00:	0412      	lsls	r2, r2, #16
 8002a02:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
 8002a06:	f894 3214 	ldrb.w	r3, [r4, #532]	; 0x214
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	f894 3215 	ldrb.w	r3, [r4, #533]	; 0x215
 8002a10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	if (fmt == FS_FAT32) {
	 	fs->fsi_flag = 0;
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <auto_mount+0x2b8>)
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d11d      	bne.n	8002a56 <auto_mount+0x246>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 8002a1a:	f894 321e 	ldrb.w	r3, [r4, #542]	; 0x21e
 8002a1e:	f894 221f 	ldrb.w	r2, [r4, #543]	; 0x21f
 8002a22:	041b      	lsls	r3, r3, #16
 8002a24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a28:	f894 221c 	ldrb.w	r2, [r4, #540]	; 0x21c
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	f894 221d 	ldrb.w	r2, [r4, #541]	; 0x21d
 8002a32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a36:	60e3      	str	r3, [r4, #12]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 8002a38:	f894 321a 	ldrb.w	r3, [r4, #538]	; 0x21a
 8002a3c:	f894 221b 	ldrb.w	r2, [r4, #539]	; 0x21b
 8002a40:	041b      	lsls	r3, r3, #16
 8002a42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a46:	f894 2218 	ldrb.w	r2, [r4, #536]	; 0x218
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f894 2219 	ldrb.w	r2, [r4, #537]	; 0x219
 8002a50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002a54:	6123      	str	r3, [r4, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
 8002a56:	7025      	strb	r5, [r4, #0]
	fs->winsect = 0;		/* Invalidate sector cache */
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 8002a58:	88b3      	ldrh	r3, [r6, #4]
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
 8002a5a:	2000      	movs	r0, #0
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	b29b      	uxth	r3, r3
			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
	fs->winsect = 0;		/* Invalidate sector cache */
 8002a60:	62e0      	str	r0, [r4, #44]	; 0x2c
#if _FS_RPATH
	fs->cdir = 0;			/* Current directory (root dir) */
#endif
	fs->id = ++Fsid;		/* File system mount ID */
 8002a62:	80b3      	strh	r3, [r6, #4]
 8002a64:	80e3      	strh	r3, [r4, #6]
	res = FR_OK;

	return res;
 8002a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#endif
	}

	/* Check if the logical drive is valid or not */
	if (vol >= _DRIVES) 			/* Is the drive number valid? */
		return FR_INVALID_DRIVE;
 8002a6a:	200b      	movs	r0, #11
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 8002a70:	200c      	movs	r0, #12
 8002a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed), */
#if !_FS_READONLY
			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
#endif
			return FR_OK;			/* The file system object is valid */
 8002a76:	4628      	mov	r0, r5
 8002a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
	if (stat & STA_NOINIT)				/* Check if the drive is ready */
		return FR_NOT_READY;
 8002a7c:	2003      	movs	r0, #3
 8002a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
		return FR_NO_FILESYSTEM;
#endif
#if !_FS_READONLY
	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
 8002a82:	200a      	movs	r0, #10
 8002a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (tbl[4]) {									/* Is the partition existing? */
			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
			fmt = check_fs(fs, bsect);					/* Check the partition */
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
		return FR_NO_FILESYSTEM;
 8002a8e:	200d      	movs	r0, #13
 8002a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a94:	200d      	movs	r0, #13
#endif
	fs->id = ++Fsid;		/* File system mount ID */
	res = FR_OK;

	return res;
}
 8002a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */

	if (fmt == FS_FAT32)
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 8002a9a:	f894 105e 	ldrb.w	r1, [r4, #94]	; 0x5e
 8002a9e:	f894 505f 	ldrb.w	r5, [r4, #95]	; 0x5f
 8002aa2:	0409      	lsls	r1, r1, #16
 8002aa4:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
 8002aa8:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
 8002aac:	4329      	orrs	r1, r5
 8002aae:	f894 505d 	ldrb.w	r5, [r4, #93]	; 0x5d
 8002ab2:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8002ab6:	6261      	str	r1, [r4, #36]	; 0x24
		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
		) / fs->csize + 2;

	fmt = FS_FAT12;										/* Determine the FAT sub type */
	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 8002ab8:	2503      	movs	r5, #3
 8002aba:	e767      	b.n	800298c <auto_mount+0x17c>
 8002abc:	20000060 	.word	0x20000060
 8002ac0:	ffffaa55 	.word	0xffffaa55
 8002ac4:	41615252 	.word	0x41615252
 8002ac8:	61417272 	.word	0x61417272

08002acc <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8002acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD wsect;


	wsect = fs->winsect;
 8002ad0:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8002ad2:	4604      	mov	r4, r0
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002ad4:	428d      	cmp	r5, r1
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make apperance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
 8002ad6:	460e      	mov	r6, r1
	DWORD wsect;


	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
 8002ad8:	d02a      	beq.n	8002b30 <move_window+0x64>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
 8002ada:	7903      	ldrb	r3, [r0, #4]
 8002adc:	b1e3      	cbz	r3, 8002b18 <move_window+0x4c>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 8002ade:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8002ae2:	4641      	mov	r1, r8
 8002ae4:	7840      	ldrb	r0, [r0, #1]
 8002ae6:	462a      	mov	r2, r5
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f7ff fdbb 	bl	8002664 <disk_write>
 8002aee:	bb10      	cbnz	r0, 8002b36 <move_window+0x6a>
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8002af0:	69a2      	ldr	r2, [r4, #24]
 8002af2:	6a23      	ldr	r3, [r4, #32]
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
 8002af4:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 8002af6:	18d3      	adds	r3, r2, r3
 8002af8:	429d      	cmp	r5, r3
 8002afa:	d20d      	bcs.n	8002b18 <move_window+0x4c>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8002afc:	78e7      	ldrb	r7, [r4, #3]
 8002afe:	e009      	b.n	8002b14 <move_window+0x48>
					wsect += fs->sects_fat;
 8002b00:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drive, fs->win, wsect, 1);
 8002b02:	7860      	ldrb	r0, [r4, #1]
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
					wsect += fs->sects_fat;
 8002b04:	18ed      	adds	r5, r5, r3
					disk_write(fs->drive, fs->win, wsect, 1);
 8002b06:	4641      	mov	r1, r8
 8002b08:	462a      	mov	r2, r5
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f7ff fdaa 	bl	8002664 <disk_write>
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
			fs->wflag = 0;
			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 8002b10:	3f01      	subs	r7, #1
 8002b12:	b2ff      	uxtb	r7, r7
 8002b14:	2f01      	cmp	r7, #1
 8002b16:	d8f3      	bhi.n	8002b00 <move_window+0x34>
					disk_write(fs->drive, fs->win, wsect, 1);
				}
			}
		}
#endif
		if (sector) {
 8002b18:	b186      	cbz	r6, 8002b3c <move_window+0x70>
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 8002b1a:	7860      	ldrb	r0, [r4, #1]
 8002b1c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8002b20:	4632      	mov	r2, r6
 8002b22:	2301      	movs	r3, #1
 8002b24:	f7ff fd8e 	bl	8002644 <disk_read>
 8002b28:	b958      	cbnz	r0, 8002b42 <move_window+0x76>
				return FR_DISK_ERR;
			fs->winsect = sector;
 8002b2a:	62e6      	str	r6, [r4, #44]	; 0x2c
 8002b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
	}

	return FR_OK;
 8002b30:	2000      	movs	r0, #0
 8002b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	wsect = fs->winsect;
	if (wsect != sector) {	/* Changed current window */
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
				return FR_DISK_ERR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return FR_DISK_ERR;
			fs->winsect = sector;
		}
	}

	return FR_OK;
 8002b3c:	4630      	mov	r0, r6
 8002b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
		}
#endif
		if (sector) {
			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
				return FR_DISK_ERR;
 8002b42:	2001      	movs	r0, #1
			fs->winsect = sector;
		}
	}

	return FR_OK;
}
 8002b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b48 <get_fat>:
{
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8002b48:	2901      	cmp	r1, #1
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
 8002b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b4e:	4605      	mov	r5, r0
 8002b50:	460c      	mov	r4, r1
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 8002b52:	d95a      	bls.n	8002c0a <get_fat+0xc2>
 8002b54:	69c3      	ldr	r3, [r0, #28]
 8002b56:	4299      	cmp	r1, r3
 8002b58:	d257      	bcs.n	8002c0a <get_fat+0xc2>
		return 1;

	fsect = fs->fatbase;
	switch (fs->fs_type) {
 8002b5a:	7803      	ldrb	r3, [r0, #0]


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;

	fsect = fs->fatbase;
 8002b5c:	6a06      	ldr	r6, [r0, #32]
	switch (fs->fs_type) {
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d029      	beq.n	8002bb6 <get_fat+0x6e>
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d037      	beq.n	8002bd6 <get_fat+0x8e>
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d152      	bne.n	8002c10 <get_fat+0xc8>
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
 8002b6a:	eb01 0751 	add.w	r7, r1, r1, lsr #1
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8002b6e:	eb06 2157 	add.w	r1, r6, r7, lsr #9
 8002b72:	f7ff ffab 	bl	8002acc <move_window>
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d14a      	bne.n	8002c10 <get_fat+0xc8>
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8002b7a:	05fb      	lsls	r3, r7, #23
 8002b7c:	0ddb      	lsrs	r3, r3, #23
 8002b7e:	3701      	adds	r7, #1
 8002b80:	18eb      	adds	r3, r5, r3
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8002b82:	4628      	mov	r0, r5
 8002b84:	eb06 2157 	add.w	r1, r6, r7, lsr #9
	fsect = fs->fatbase;
	switch (fs->fs_type) {
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 8002b88:	f893 8030 	ldrb.w	r8, [r3, #48]	; 0x30
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 8002b8c:	f7ff ff9e 	bl	8002acc <move_window>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d13d      	bne.n	8002c10 <get_fat+0xc8>
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8002b94:	05ff      	lsls	r7, r7, #23
 8002b96:	0dff      	lsrs	r7, r7, #23
 8002b98:	19ef      	adds	r7, r5, r7
 8002b9a:	f897 0030 	ldrb.w	r0, [r7, #48]	; 0x30
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002b9e:	f014 0f01 	tst.w	r4, #1
	case FS_FAT12 :
		bc = clst; bc += bc / 2;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
		if (move_window(fs, fsect + (bc / SS(fs)))) break;
		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 8002ba2:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8002ba6:	d002      	beq.n	8002bae <get_fat+0x66>
 8002ba8:	0900      	lsrs	r0, r0, #4
 8002baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bae:	0500      	lsls	r0, r0, #20
 8002bb0:	0d00      	lsrs	r0, r0, #20
 8002bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT16 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 8002bb6:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8002bba:	f7ff ff87 	bl	8002acc <move_window>
 8002bbe:	bb38      	cbnz	r0, 8002c10 <get_fat+0xc8>
		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 8002bc0:	0624      	lsls	r4, r4, #24
 8002bc2:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 8002bc6:	f895 0031 	ldrb.w	r0, [r5, #49]	; 0x31
 8002bca:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002bce:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8002bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 8002bd6:	eb06 11d1 	add.w	r1, r6, r1, lsr #7
 8002bda:	f7ff ff77 	bl	8002acc <move_window>
 8002bde:	b9d8      	cbnz	r0, 8002c18 <get_fat+0xd0>
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 8002be0:	0664      	lsls	r4, r4, #25
 8002be2:	eb05 55d4 	add.w	r5, r5, r4, lsr #23
 8002be6:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
 8002bea:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
 8002bee:	0400      	lsls	r0, r0, #16
 8002bf0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002bf4:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8002bf8:	f895 8031 	ldrb.w	r8, [r5, #49]	; 0x31
 8002bfc:	4318      	orrs	r0, r3
 8002bfe:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8002c02:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8002c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	UINT wc, bc;
	DWORD fsect;


	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
		return 1;
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	case FS_FAT32 :
		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
	}

	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c18:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002c20 <dir_seek>:
static
FRESULT dir_seek (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	4604      	mov	r4, r0
 8002c24:	460d      	mov	r5, r1
	DWORD clst;
	WORD ic;


	dj->index = idx;
 8002c26:	80e1      	strh	r1, [r4, #6]
	clst = dj->sclust;
 8002c28:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 8002c2a:	2901      	cmp	r1, #1
 8002c2c:	d039      	beq.n	8002ca2 <dir_seek+0x82>
 8002c2e:	6803      	ldr	r3, [r0, #0]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	4291      	cmp	r1, r2
 8002c34:	d235      	bcs.n	8002ca2 <dir_seek+0x82>
		return FR_INT_ERR;
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002c36:	b971      	cbnz	r1, 8002c56 <dir_seek+0x36>
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	2a03      	cmp	r2, #3
 8002c3c:	d101      	bne.n	8002c42 <dir_seek+0x22>
		clst = dj->fs->dirbase;
 8002c3e:	6a59      	ldr	r1, [r3, #36]	; 0x24

	if (clst == 0) {	/* Static table */
 8002c40:	b949      	cbnz	r1, 8002c56 <dir_seek+0x36>
		dj->clust = clst;
 8002c42:	2200      	movs	r2, #0
 8002c44:	60e2      	str	r2, [r4, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 8002c46:	891a      	ldrh	r2, [r3, #8]
 8002c48:	42aa      	cmp	r2, r5
 8002c4a:	d92a      	bls.n	8002ca2 <dir_seek+0x82>
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	eb03 1315 	add.w	r3, r3, r5, lsr #4
 8002c52:	6123      	str	r3, [r4, #16]
 8002c54:	e01a      	b.n	8002c8c <dir_seek+0x6c>
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 8002c56:	789e      	ldrb	r6, [r3, #2]
 8002c58:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8002c5a:	e00e      	b.n	8002c7a <dir_seek+0x5a>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8002c5c:	6820      	ldr	r0, [r4, #0]
 8002c5e:	f7ff ff73 	bl	8002b48 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c62:	f1b0 3fff 	cmp.w	r0, #4294967295
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 8002c66:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c68:	d019      	beq.n	8002c9e <dir_seek+0x7e>
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 8002c6a:	2801      	cmp	r0, #1
 8002c6c:	d919      	bls.n	8002ca2 <dir_seek+0x82>
 8002c6e:	6823      	ldr	r3, [r4, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	4298      	cmp	r0, r3
 8002c74:	d217      	bcs.n	8002ca6 <dir_seek+0x86>
				return FR_INT_ERR;
			idx -= ic;
 8002c76:	1bad      	subs	r5, r5, r6
 8002c78:	b2ad      	uxth	r5, r5
			return FR_INT_ERR;
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
 8002c7a:	42b5      	cmp	r5, r6
 8002c7c:	d2ee      	bcs.n	8002c5c <dir_seek+0x3c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
			idx -= ic;
		}
		dj->clust = clst;
 8002c7e:	60e1      	str	r1, [r4, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 8002c80:	6820      	ldr	r0, [r4, #0]
 8002c82:	f7ff fd1e 	bl	80026c2 <clust2sect>
 8002c86:	eb00 1015 	add.w	r0, r0, r5, lsr #4
 8002c8a:	6120      	str	r0, [r4, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 8002c8c:	6823      	ldr	r3, [r4, #0]
 8002c8e:	f005 050f 	and.w	r5, r5, #15
 8002c92:	3330      	adds	r3, #48	; 0x30
 8002c94:	016d      	lsls	r5, r5, #5
 8002c96:	195d      	adds	r5, r3, r5
 8002c98:	6165      	str	r5, [r4, #20]

	return FR_OK;	/* Seek succeeded */
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
	}
	else {				/* Dynamic table */
		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
		while (idx >= ic) {	/* Follow cluster chain */
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	bd70      	pop	{r4, r5, r6, pc}
			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
				return FR_INT_ERR;
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
 8002ca6:	2002      	movs	r0, #2
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */

	return FR_OK;	/* Seek succeeded */
}
 8002ca8:	bd70      	pop	{r4, r5, r6, pc}

08002caa <put_fat>:
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8002caa:	2901      	cmp	r1, #1
FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
 8002cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	4616      	mov	r6, r2
	BYTE *p;
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 8002cb6:	d96d      	bls.n	8002d94 <put_fat+0xea>
 8002cb8:	69c3      	ldr	r3, [r0, #28]
 8002cba:	4299      	cmp	r1, r3
 8002cbc:	d26d      	bcs.n	8002d9a <put_fat+0xf0>
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
		switch (fs->fs_type) {
 8002cbe:	7803      	ldrb	r3, [r0, #0]

	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;

	} else {
		fsect = fs->fatbase;
 8002cc0:	6a07      	ldr	r7, [r0, #32]
		switch (fs->fs_type) {
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d03f      	beq.n	8002d46 <put_fat+0x9c>
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d04b      	beq.n	8002d62 <put_fat+0xb8>
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d15d      	bne.n	8002d8a <put_fat+0xe0>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
 8002cce:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fsect + (bc / SS(fs)));
 8002cd2:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 8002cd6:	f7ff fef9 	bl	8002acc <move_window>
			if (res != FR_OK) break;
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d156      	bne.n	8002d8c <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 8002cde:	ea4f 53c8 	mov.w	r3, r8, lsl #23
 8002ce2:	0ddb      	lsrs	r3, r3, #23
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002ce4:	f015 0501 	ands.w	r5, r5, #1
 8002ce8:	b2f2      	uxtb	r2, r6
 8002cea:	d007      	beq.n	8002cfc <put_fat+0x52>
 8002cec:	18e1      	adds	r1, r4, r3
 8002cee:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 8002cf2:	f001 010f 	and.w	r1, r1, #15
 8002cf6:	ea41 1202 	orr.w	r2, r1, r2, lsl #4
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	18e3      	adds	r3, r4, r3
 8002cfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			bc++;
 8002d02:	f108 0801 	add.w	r8, r8, #1
			fs->wflag = 1;
 8002d06:	2301      	movs	r3, #1
 8002d08:	7123      	strb	r3, [r4, #4]
			res = move_window(fs, fsect + (bc / SS(fs)));
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	eb07 2158 	add.w	r1, r7, r8, lsr #9
 8002d10:	f7ff fedc 	bl	8002acc <move_window>
			if (res != FR_OK) break;
 8002d14:	bbd0      	cbnz	r0, 8002d8c <put_fat+0xe2>
			p = &fs->win[bc & (SS(fs) - 1)];
 8002d16:	ea4f 58c8 	mov.w	r8, r8, lsl #23
 8002d1a:	ea4f 58d8 	mov.w	r8, r8, lsr #23
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8002d1e:	b115      	cbz	r5, 8002d26 <put_fat+0x7c>
 8002d20:	0936      	lsrs	r6, r6, #4
 8002d22:	b2f6      	uxtb	r6, r6
 8002d24:	e00a      	b.n	8002d3c <put_fat+0x92>
 8002d26:	eb04 0308 	add.w	r3, r4, r8
 8002d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d2e:	0a36      	lsrs	r6, r6, #8
 8002d30:	f023 030f 	bic.w	r3, r3, #15
 8002d34:	f006 060f 	and.w	r6, r6, #15
 8002d38:	ea43 0606 	orr.w	r6, r3, r6
 8002d3c:	eb04 0308 	add.w	r3, r4, r8
 8002d40:	f883 6030 	strb.w	r6, [r3, #48]	; 0x30
			break;
 8002d44:	e022      	b.n	8002d8c <put_fat+0xe2>

		case FS_FAT16 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 8002d46:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8002d4a:	f7ff febf 	bl	8002acc <move_window>
			if (res != FR_OK) break;
 8002d4e:	b9e8      	cbnz	r0, 8002d8c <put_fat+0xe2>
			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 8002d50:	062d      	lsls	r5, r5, #24
 8002d52:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 8002d56:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 8002d5a:	0a36      	lsrs	r6, r6, #8
 8002d5c:	f885 6031 	strb.w	r6, [r5, #49]	; 0x31
			break;
 8002d60:	e014      	b.n	8002d8c <put_fat+0xe2>

		case FS_FAT32 :
			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 8002d62:	eb07 11d1 	add.w	r1, r7, r1, lsr #7
 8002d66:	f7ff feb1 	bl	8002acc <move_window>
			if (res != FR_OK) break;
 8002d6a:	b978      	cbnz	r0, 8002d8c <put_fat+0xe2>
			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 8002d6c:	066d      	lsls	r5, r5, #25
 8002d6e:	eb04 55d5 	add.w	r5, r4, r5, lsr #23
 8002d72:	0a33      	lsrs	r3, r6, #8
 8002d74:	f885 6030 	strb.w	r6, [r5, #48]	; 0x30
 8002d78:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
 8002d7c:	0c33      	lsrs	r3, r6, #16
 8002d7e:	0e36      	lsrs	r6, r6, #24
 8002d80:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
 8002d84:	f885 6033 	strb.w	r6, [r5, #51]	; 0x33
			break;
 8002d88:	e000      	b.n	8002d8c <put_fat+0xe2>

		default :
			res = FR_INT_ERR;
 8002d8a:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	7123      	strb	r3, [r4, #4]
 8002d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD fsect;
	FRESULT res;


	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
		res = FR_INT_ERR;
 8002d94:	2002      	movs	r0, #2
 8002d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d9a:	2002      	movs	r0, #2
		}
		fs->wflag = 1;
	}

	return res;
}
 8002d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002da0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8002da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002da4:	4605      	mov	r5, r0
	DWORD cs, ncl, scl, mcl;


	mcl = fs->max_clust;
 8002da6:	f8d0 801c 	ldr.w	r8, [r0, #28]
	if (clst == 0) {		/* Create new chain */
 8002daa:	460e      	mov	r6, r1
 8002dac:	b929      	cbnz	r1, 8002dba <create_chain+0x1a>
		scl = fs->last_clust;			/* Get suggested start point */
 8002dae:	68c7      	ldr	r7, [r0, #12]
		if (scl == 0 || scl >= mcl) scl = 1;
 8002db0:	b15f      	cbz	r7, 8002dca <create_chain+0x2a>
 8002db2:	4547      	cmp	r7, r8
 8002db4:	bf28      	it	cs
 8002db6:	2701      	movcs	r7, #1
 8002db8:	e008      	b.n	8002dcc <create_chain+0x2c>
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002dba:	f7ff fec5 	bl	8002b48 <get_fat>
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8002dbe:	2801      	cmp	r0, #1
 8002dc0:	d932      	bls.n	8002e28 <create_chain+0x88>
		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 8002dc2:	4540      	cmp	r0, r8
 8002dc4:	d33b      	bcc.n	8002e3e <create_chain+0x9e>
 8002dc6:	4637      	mov	r7, r6
 8002dc8:	e000      	b.n	8002dcc <create_chain+0x2c>


	mcl = fs->max_clust;
	if (clst == 0) {		/* Create new chain */
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
 8002dca:	2701      	movs	r7, #1
 8002dcc:	463c      	mov	r4, r7
		scl = clst;
	}

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
 8002dce:	3401      	adds	r4, #1
		if (ncl >= mcl) {				/* Wrap around */
 8002dd0:	4544      	cmp	r4, r8
 8002dd2:	d302      	bcc.n	8002dda <create_chain+0x3a>
			ncl = 2;
			if (ncl > scl) return 0;	/* No free custer */
 8002dd4:	2f01      	cmp	r7, #1
 8002dd6:	d92a      	bls.n	8002e2e <create_chain+0x8e>

	ncl = scl;				/* Start cluster */
	for (;;) {
		ncl++;							/* Next cluster */
		if (ncl >= mcl) {				/* Wrap around */
			ncl = 2;
 8002dd8:	2402      	movs	r4, #2
			if (ncl > scl) return 0;	/* No free custer */
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002dda:	4628      	mov	r0, r5
 8002ddc:	4621      	mov	r1, r4
 8002dde:	f7ff feb3 	bl	8002b48 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8002de2:	b138      	cbz	r0, 8002df4 <create_chain+0x54>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 8002de4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002de8:	d029      	beq.n	8002e3e <create_chain+0x9e>
 8002dea:	2801      	cmp	r0, #1
 8002dec:	d027      	beq.n	8002e3e <create_chain+0x9e>
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
 8002dee:	42bc      	cmp	r4, r7
 8002df0:	d1ed      	bne.n	8002dce <create_chain+0x2e>
 8002df2:	e01c      	b.n	8002e2e <create_chain+0x8e>
	}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 8002df4:	4628      	mov	r0, r5
 8002df6:	4621      	mov	r1, r4
 8002df8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002dfc:	f7ff ff55 	bl	8002caa <put_fat>
 8002e00:	b9c0      	cbnz	r0, 8002e34 <create_chain+0x94>
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
 8002e02:	b12e      	cbz	r6, 8002e10 <create_chain+0x70>
		if (put_fat(fs, clst, ncl))
 8002e04:	4628      	mov	r0, r5
 8002e06:	4631      	mov	r1, r6
 8002e08:	4622      	mov	r2, r4
 8002e0a:	f7ff ff4e 	bl	8002caa <put_fat>
 8002e0e:	b988      	cbnz	r0, 8002e34 <create_chain+0x94>
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 8002e10:	692b      	ldr	r3, [r5, #16]
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
	}

	fs->last_clust = ncl;				/* Update FSINFO */
 8002e12:	60ec      	str	r4, [r5, #12]
	if (fs->free_clust != 0xFFFFFFFF) {
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d010      	beq.n	8002e3c <create_chain+0x9c>
		fs->free_clust--;
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	612b      	str	r3, [r5, #16]
		fs->fsi_flag = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	72ab      	strb	r3, [r5, #10]
 8002e22:	4620      	mov	r0, r4
 8002e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clust;			/* Get suggested start point */
		if (scl == 0 || scl >= mcl) scl = 1;
	}
	else {					/* Stretch existing chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
		if (cs < 2) return 1;			/* It is an invalid cluster */
 8002e28:	2001      	movs	r0, #1
 8002e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
		if (cs == 0) break;				/* Found a free cluster */
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
			return cs;
		if (ncl == scl) return 0;		/* No free custer */
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
		return 0xFFFFFFFF;
	if (clst != 0) {					/* Link it to the previous one if needed */
		if (put_fat(fs, clst, ncl))
			return 0xFFFFFFFF;
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	fs->last_clust = ncl;				/* Update FSINFO */
	if (fs->free_clust != 0xFFFFFFFF) {
 8002e3c:	4620      	mov	r0, r4
		fs->free_clust--;
		fs->fsi_flag = 1;
	}

	return ncl;		/* Return new cluster number */
}
 8002e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002e42 <remove_chain>:
{
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 8002e42:	2901      	cmp	r1, #1
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4604      	mov	r4, r0
 8002e48:	460e      	mov	r6, r1
	FRESULT res;
	DWORD nxt;


	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 8002e4a:	d923      	bls.n	8002e94 <remove_chain+0x52>
 8002e4c:	69c3      	ldr	r3, [r0, #28]
 8002e4e:	4299      	cmp	r1, r3
 8002e50:	d31a      	bcc.n	8002e88 <remove_chain+0x46>
 8002e52:	e01f      	b.n	8002e94 <remove_chain+0x52>
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8002e54:	4620      	mov	r0, r4
 8002e56:	4631      	mov	r1, r6
 8002e58:	f7ff fe76 	bl	8002b48 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8002e5c:	4605      	mov	r5, r0
 8002e5e:	b1c0      	cbz	r0, 8002e92 <remove_chain+0x50>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8002e60:	2801      	cmp	r0, #1
 8002e62:	d017      	beq.n	8002e94 <remove_chain+0x52>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002e64:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002e68:	d016      	beq.n	8002e98 <remove_chain+0x56>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8002e6a:	4620      	mov	r0, r4
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f7ff ff1b 	bl	8002caa <put_fat>
			if (res != FR_OK) break;
 8002e74:	b988      	cbnz	r0, 8002e9a <remove_chain+0x58>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 8002e76:	6923      	ldr	r3, [r4, #16]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d003      	beq.n	8002e86 <remove_chain+0x44>
				fs->free_clust++;
 8002e7e:	3301      	adds	r3, #1
 8002e80:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	72a3      	strb	r3, [r4, #10]
 8002e86:	462e      	mov	r6, r5
	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
		res = FR_INT_ERR;

	} else {
		res = FR_OK;
		while (clst < fs->max_clust) {			/* Not a last link? */
 8002e88:	69e3      	ldr	r3, [r4, #28]
 8002e8a:	429e      	cmp	r6, r3
 8002e8c:	d3e2      	bcc.n	8002e54 <remove_chain+0x12>
 8002e8e:	2000      	movs	r0, #0
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	bd70      	pop	{r4, r5, r6, pc}
			nxt = get_fat(fs, clst);			/* Get cluster status */
			if (nxt == 0) break;				/* Empty cluster? */
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8002e94:	2002      	movs	r0, #2
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002e98:	2001      	movs	r0, #1
			clst = nxt;	/* Next cluster */
		}
	}

	return res;
}
 8002e9a:	bd70      	pop	{r4, r5, r6, pc}

08002e9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	bool streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8002e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8002ea0:	88c6      	ldrh	r6, [r0, #6]
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	bool streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8002ea2:	4604      	mov	r4, r0
	DWORD clst;
	WORD i;


	i = dj->index + 1;
 8002ea4:	3601      	adds	r6, #1
 8002ea6:	b2b6      	uxth	r6, r6
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach */
	DIR *dj,		/* Pointer to directory object */
	bool streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
)
{
 8002ea8:	460f      	mov	r7, r1
	DWORD clst;
	WORD i;


	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 8002eaa:	2e00      	cmp	r6, #0
 8002eac:	d06b      	beq.n	8002f86 <dir_next+0xea>
 8002eae:	6903      	ldr	r3, [r0, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d068      	beq.n	8002f86 <dir_next+0xea>
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 8002eb4:	f016 0f0f 	tst.w	r6, #15
 8002eb8:	d15a      	bne.n	8002f70 <dir_next+0xd4>
		dj->sect++;					/* Next sector */

		if (dj->clust == 0) {	/* Static table */
 8002eba:	68c1      	ldr	r1, [r0, #12]
	i = dj->index + 1;
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
		return FR_NO_FILE;

	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
		dj->sect++;					/* Next sector */
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	6103      	str	r3, [r0, #16]
 8002ec0:	6800      	ldr	r0, [r0, #0]

		if (dj->clust == 0) {	/* Static table */
 8002ec2:	b919      	cbnz	r1, 8002ecc <dir_next+0x30>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 8002ec4:	8903      	ldrh	r3, [r0, #8]
 8002ec6:	42b3      	cmp	r3, r6
 8002ec8:	d852      	bhi.n	8002f70 <dir_next+0xd4>
 8002eca:	e05c      	b.n	8002f86 <dir_next+0xea>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002ecc:	7883      	ldrb	r3, [r0, #2]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	ea13 1316 	ands.w	r3, r3, r6, lsr #4
 8002ed4:	d14c      	bne.n	8002f70 <dir_next+0xd4>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8002ed6:	f7ff fe37 	bl	8002b48 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8002eda:	2801      	cmp	r0, #1
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 8002edc:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8002ede:	d958      	bls.n	8002f92 <dir_next+0xf6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002ee0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ee4:	d058      	beq.n	8002f98 <dir_next+0xfc>
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	69c3      	ldr	r3, [r0, #28]
 8002eea:	429d      	cmp	r5, r3
 8002eec:	d33a      	bcc.n	8002f64 <dir_next+0xc8>
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 8002eee:	2f00      	cmp	r7, #0
 8002ef0:	d049      	beq.n	8002f86 <dir_next+0xea>
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 8002ef2:	68e1      	ldr	r1, [r4, #12]
 8002ef4:	f7ff ff54 	bl	8002da0 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002ef8:	4605      	mov	r5, r0
 8002efa:	2800      	cmp	r0, #0
 8002efc:	d046      	beq.n	8002f8c <dir_next+0xf0>
					if (clst == 1) return FR_INT_ERR;
 8002efe:	2801      	cmp	r0, #1
 8002f00:	d047      	beq.n	8002f92 <dir_next+0xf6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002f02:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f06:	d047      	beq.n	8002f98 <dir_next+0xfc>
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8002f08:	6820      	ldr	r0, [r4, #0]
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	f7ff fdde 	bl	8002acc <move_window>
 8002f10:	4607      	mov	r7, r0
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d140      	bne.n	8002f98 <dir_next+0xfc>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 8002f16:	6820      	ldr	r0, [r4, #0]
 8002f18:	4639      	mov	r1, r7
 8002f1a:	3030      	adds	r0, #48	; 0x30
 8002f1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f20:	f7ff fbbc 	bl	800269c <mem_set>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 8002f24:	f8d4 8000 	ldr.w	r8, [r4]
 8002f28:	4629      	mov	r1, r5
 8002f2a:	4640      	mov	r0, r8
 8002f2c:	f7ff fbc9 	bl	80026c2 <clust2sect>
 8002f30:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f34:	e00f      	b.n	8002f56 <dir_next+0xba>
						dj->fs->wflag = 1;
 8002f36:	f04f 0801 	mov.w	r8, #1
 8002f3a:	f883 8004 	strb.w	r8, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	2100      	movs	r1, #0
 8002f42:	f7ff fdc3 	bl	8002acc <move_window>
 8002f46:	2800      	cmp	r0, #0
 8002f48:	d129      	bne.n	8002f9e <dir_next+0x102>
						dj->fs->winsect++;
 8002f4a:	6823      	ldr	r3, [r4, #0]
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f4c:	4447      	add	r7, r8
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f50:	b2ff      	uxtb	r7, r7
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
 8002f52:	4442      	add	r2, r8
 8002f54:	62da      	str	r2, [r3, #44]	; 0x2c
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	789a      	ldrb	r2, [r3, #2]
 8002f5a:	42ba      	cmp	r2, r7
 8002f5c:	d8eb      	bhi.n	8002f36 <dir_next+0x9a>
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
						dj->fs->winsect++;
					}
					dj->fs->winsect -= c;						/* Rewind window address */
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	1bd7      	subs	r7, r2, r7
 8002f62:	62df      	str	r7, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
 8002f64:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
 8002f66:	6820      	ldr	r0, [r4, #0]
 8002f68:	4629      	mov	r1, r5
 8002f6a:	f7ff fbaa 	bl	80026c2 <clust2sect>
 8002f6e:	6120      	str	r0, [r4, #16]
			}
		}
	}

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8002f70:	6823      	ldr	r3, [r4, #0]
				dj->sect = clust2sect(dj->fs, clst);
			}
		}
	}

	dj->index = i;
 8002f72:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 8002f74:	f006 060f 	and.w	r6, r6, #15
 8002f78:	3330      	adds	r3, #48	; 0x30
 8002f7a:	0176      	lsls	r6, r6, #5
 8002f7c:	199e      	adds	r6, r3, r6
 8002f7e:	6166      	str	r6, [r4, #20]

	return FR_OK;
 8002f80:	2000      	movs	r0, #0
 8002f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (clst <= 1) return FR_INT_ERR;
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
#if !_FS_READONLY
					BYTE c;
					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 8002f86:	2004      	movs	r0, #4
 8002f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002f8c:	2007      	movs	r0, #7
 8002f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 1) return FR_INT_ERR;
 8002f92:	2002      	movs	r0, #2
 8002f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
					/* Clean-up streached table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
						dj->fs->wflag = 1;
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 8002f9e:	4640      	mov	r0, r8

	dj->index = i;
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;

	return FR_OK;
}
 8002fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fa4 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8002fa4:	b570      	push	{r4, r5, r6, lr}
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 8002fa6:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
 8002fa8:	4604      	mov	r4, r0
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_seek(dj, 0);
 8002faa:	f7ff fe39 	bl	8002c20 <dir_seek>
	if (res == FR_OK) {
 8002fae:	4605      	mov	r5, r0
 8002fb0:	bb10      	cbnz	r0, 8002ff8 <dir_register+0x54>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
 8002fb2:	6820      	ldr	r0, [r4, #0]
 8002fb4:	6921      	ldr	r1, [r4, #16]
 8002fb6:	f7ff fd89 	bl	8002acc <move_window>
			if (res != FR_OK) break;
 8002fba:	4605      	mov	r5, r0
 8002fbc:	b9e0      	cbnz	r0, 8002ff8 <dir_register+0x54>
			c = *dj->dir;
 8002fbe:	6963      	ldr	r3, [r4, #20]
 8002fc0:	781b      	ldrb	r3, [r3, #0]
			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 8002fc2:	2be5      	cmp	r3, #229	; 0xe5
 8002fc4:	d01a      	beq.n	8002ffc <dir_register+0x58>
 8002fc6:	b1cb      	cbz	r3, 8002ffc <dir_register+0x58>
			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 8002fc8:	4620      	mov	r0, r4
 8002fca:	2101      	movs	r1, #1
 8002fcc:	f7ff ff66 	bl	8002e9c <dir_next>
 8002fd0:	e7ed      	b.n	8002fae <dir_register+0xa>
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
 8002fd2:	6966      	ldr	r6, [r4, #20]
			mem_set(dir, 0, 32);		/* Clean the entry */
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4630      	mov	r0, r6
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f7ff fb5f 	bl	800269c <mem_set>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 8002fde:	220b      	movs	r2, #11
 8002fe0:	4630      	mov	r0, r6
 8002fe2:	69a1      	ldr	r1, [r4, #24]
 8002fe4:	f7ff fb52 	bl	800268c <mem_cpy>
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 8002fe8:	69a3      	ldr	r3, [r4, #24]
			dj->fs->wflag = 1;
 8002fea:	2201      	movs	r2, #1
		res = move_window(dj->fs, dj->sect);
		if (res == FR_OK) {
			dir = dj->dir;
			mem_set(dir, 0, 32);		/* Clean the entry */
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 8002fec:	7adb      	ldrb	r3, [r3, #11]
 8002fee:	f003 0318 	and.w	r3, r3, #24
 8002ff2:	7333      	strb	r3, [r6, #12]
			dj->fs->wflag = 1;
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
}
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
		res = move_window(dj->fs, dj->sect);
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	6921      	ldr	r1, [r4, #16]
 8003000:	f7ff fd64 	bl	8002acc <move_window>
		if (res == FR_OK) {
 8003004:	4605      	mov	r5, r0
 8003006:	2800      	cmp	r0, #0
 8003008:	d1f6      	bne.n	8002ff8 <dir_register+0x54>
 800300a:	e7e2      	b.n	8002fd2 <dir_register+0x2e>

0800300c <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 800300c:	b510      	push	{r4, lr}
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
 800300e:	88c1      	ldrh	r1, [r0, #6]
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
 8003010:	4604      	mov	r4, r0
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_seek(dj, dj->index);
 8003012:	f7ff fe05 	bl	8002c20 <dir_seek>
	if (res == FR_OK) {
 8003016:	b950      	cbnz	r0, 800302e <dir_remove+0x22>
		res = move_window(dj->fs, dj->sect);
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	6921      	ldr	r1, [r4, #16]
 800301c:	f7ff fd56 	bl	8002acc <move_window>
		if (res == FR_OK) {
 8003020:	b928      	cbnz	r0, 800302e <dir_remove+0x22>
			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 8003022:	6963      	ldr	r3, [r4, #20]
 8003024:	22e5      	movs	r2, #229	; 0xe5
 8003026:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	3ae4      	subs	r2, #228	; 0xe4
 800302c:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
}
 800302e:	bd10      	pop	{r4, pc}

08003030 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8003030:	b510      	push	{r4, lr}
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8003032:	2304      	movs	r3, #4
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
 8003034:	4604      	mov	r4, r0
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8003036:	e014      	b.n	8003062 <dir_read+0x32>
		res = move_window(dj->fs, dj->sect);
 8003038:	6820      	ldr	r0, [r4, #0]
 800303a:	f7ff fd47 	bl	8002acc <move_window>
		if (res != FR_OK) break;
 800303e:	b9d0      	cbnz	r0, 8003076 <dir_read+0x46>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 8003040:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
 8003042:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003044:	b1b3      	cbz	r3, 8003074 <dir_read+0x44>
					dj->lfn_idx = 0xFFFF;		/* No LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 8003046:	2be5      	cmp	r3, #229	; 0xe5
 8003048:	d005      	beq.n	8003056 <dir_read+0x26>
 800304a:	2b2e      	cmp	r3, #46	; 0x2e
 800304c:	d003      	beq.n	8003056 <dir_read+0x26>
 800304e:	7ad3      	ldrb	r3, [r2, #11]
 8003050:	f013 0f08 	tst.w	r3, #8
 8003054:	d00d      	beq.n	8003072 <dir_read+0x42>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 8003056:	4620      	mov	r0, r4
 8003058:	2100      	movs	r1, #0
 800305a:	f7ff ff1f 	bl	8002e9c <dir_next>
 800305e:	4603      	mov	r3, r0
		if (res != FR_OK) break;
 8003060:	b948      	cbnz	r0, 8003076 <dir_read+0x46>
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8003062:	6921      	ldr	r1, [r4, #16]
 8003064:	2900      	cmp	r1, #0
 8003066:	d1e7      	bne.n	8003038 <dir_read+0x8>
 8003068:	4618      	mov	r0, r3
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
 800306a:	b113      	cbz	r3, 8003072 <dir_read+0x42>
 800306c:	2200      	movs	r2, #0
 800306e:	6122      	str	r2, [r4, #16]
 8003070:	4618      	mov	r0, r3

	return res;
}
 8003072:	bd10      	pop	{r4, pc}
	while (dj->sect) {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003074:	2004      	movs	r0, #4
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
	while (dj->sect) {
 8003076:	4603      	mov	r3, r0
 8003078:	e7f8      	b.n	800306c <dir_read+0x3c>

0800307a <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 800307a:	b570      	push	{r4, r5, r6, lr}
	FRESULT res;


	res = move_window(fs, 0);
 800307c:	2100      	movs	r1, #0
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
 800307e:	4604      	mov	r4, r0
	FRESULT res;


	res = move_window(fs, 0);
 8003080:	f7ff fd24 	bl	8002acc <move_window>
 8003084:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8003086:	2d00      	cmp	r5, #0
 8003088:	d14f      	bne.n	800312a <sync+0xb0>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 800308a:	7823      	ldrb	r3, [r4, #0]
 800308c:	2b03      	cmp	r3, #3
 800308e:	d144      	bne.n	800311a <sync+0xa0>
 8003090:	7aa3      	ldrb	r3, [r4, #10]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d041      	beq.n	800311a <sync+0xa0>
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
 8003096:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800309a:	4630      	mov	r0, r6
 800309c:	4629      	mov	r1, r5
 800309e:	f44f 7200 	mov.w	r2, #512	; 0x200

	res = move_window(fs, 0);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
 80030a2:	62e5      	str	r5, [r4, #44]	; 0x2c
			mem_set(fs->win, 0, 512);
 80030a4:	f7ff fafa 	bl	800269c <mem_set>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
 80030a8:	2355      	movs	r3, #85	; 0x55
 80030aa:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
 80030ae:	18db      	adds	r3, r3, r3
 80030b0:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80030b4:	3b58      	subs	r3, #88	; 0x58
 80030b6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80030ba:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
 80030be:	330f      	adds	r3, #15
 80030c0:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80030c4:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80030c8:	6923      	ldr	r3, [r4, #16]
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 80030ca:	2241      	movs	r2, #65	; 0x41
 80030cc:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80030d0:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80030d4:	0a1a      	lsrs	r2, r3, #8
 80030d6:	f884 3218 	strb.w	r3, [r4, #536]	; 0x218
 80030da:	f884 2219 	strb.w	r2, [r4, #537]	; 0x219
 80030de:	0c1a      	lsrs	r2, r3, #16
 80030e0:	0e1b      	lsrs	r3, r3, #24
 80030e2:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80030e6:	68e3      	ldr	r3, [r4, #12]
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 80030e8:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80030ec:	0a1a      	lsrs	r2, r3, #8
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80030ee:	2172      	movs	r1, #114	; 0x72
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 80030f0:	f884 321c 	strb.w	r3, [r4, #540]	; 0x21c
 80030f4:	f884 221d 	strb.w	r2, [r4, #541]	; 0x21d
 80030f8:	0c1a      	lsrs	r2, r3, #16
 80030fa:	0e1b      	lsrs	r3, r3, #24
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
			fs->winsect = 0;
			mem_set(fs->win, 0, 512);
			ST_WORD(fs->win+BS_55AA, 0xAA55);
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 80030fc:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
 8003100:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 8003104:	f884 221e 	strb.w	r2, [r4, #542]	; 0x21e
 8003108:	f884 321f 	strb.w	r3, [r4, #543]	; 0x21f
			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 800310c:	7860      	ldrb	r0, [r4, #1]
 800310e:	4631      	mov	r1, r6
 8003110:	6962      	ldr	r2, [r4, #20]
 8003112:	2301      	movs	r3, #1
 8003114:	f7ff faa6 	bl	8002664 <disk_write>
			fs->fsi_flag = 0;
 8003118:	72a5      	strb	r5, [r4, #10]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 800311a:	2100      	movs	r1, #0
 800311c:	7860      	ldrb	r0, [r4, #1]
 800311e:	460a      	mov	r2, r1
 8003120:	f7ff fab0 	bl	8002684 <disk_ioctl>
 8003124:	3800      	subs	r0, #0
 8003126:	bf18      	it	ne
 8003128:	2001      	movne	r0, #1
			res = FR_DISK_ERR;
	}

	return res;
}
 800312a:	bd70      	pop	{r4, r5, r6, pc}

0800312c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 800312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8003130:	780b      	ldrb	r3, [r1, #0]
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 8003132:	4605      	mov	r5, r0
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8003134:	2b2f      	cmp	r3, #47	; 0x2f
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const XCHAR *path	/* Full-path string to find a file or directory */
)
{
 8003136:	460e      	mov	r6, r1
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading saparator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 8003138:	d001      	beq.n	800313e <follow_path+0x12>
 800313a:	2b5c      	cmp	r3, #92	; 0x5c
 800313c:	d100      	bne.n	8003140 <follow_path+0x14>
		path++;
 800313e:	3601      	adds	r6, #1
	dj->sclust = 0;						/* Start from the root dir */
 8003140:	2700      	movs	r7, #0
 8003142:	60af      	str	r7, [r5, #8]
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 8003144:	7833      	ldrb	r3, [r6, #0]
 8003146:	2b1f      	cmp	r3, #31
 8003148:	d806      	bhi.n	8003158 <follow_path+0x2c>
		res = dir_seek(dj, 0);
 800314a:	4628      	mov	r0, r5
 800314c:	4639      	mov	r1, r7
 800314e:	f7ff fd67 	bl	8002c20 <dir_seek>
		dj->dir = NULL;
 8003152:	616f      	str	r7, [r5, #20]
		path++;
	dj->sclust = 0;						/* Start from the root dir */
#endif

	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
		res = dir_seek(dj, 0);
 8003154:	4604      	mov	r4, r0
 8003156:	e0a4      	b.n	80032a2 <follow_path+0x176>
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
 8003158:	69ac      	ldr	r4, [r5, #24]
	int ni, si, i;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
 800315a:	2120      	movs	r1, #32
 800315c:	4620      	mov	r0, r4
 800315e:	220b      	movs	r2, #11
 8003160:	f7ff fa9c 	bl	800269c <mem_set>
	si = i = b = 0; ni = 8;
 8003164:	2100      	movs	r1, #0
 8003166:	460f      	mov	r7, r1
 8003168:	2008      	movs	r0, #8
 800316a:	460a      	mov	r2, r1
		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = p[si++];
 800316c:	5df3      	ldrb	r3, [r6, r7]
 800316e:	3701      	adds	r7, #1
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8003170:	2b1f      	cmp	r3, #31
 8003172:	d93b      	bls.n	80031ec <follow_path+0xc0>
 8003174:	2b2f      	cmp	r3, #47	; 0x2f
 8003176:	d03b      	beq.n	80031f0 <follow_path+0xc4>
 8003178:	2b5c      	cmp	r3, #92	; 0x5c
 800317a:	d039      	beq.n	80031f0 <follow_path+0xc4>
		if (c == '.' || i >= ni) {
 800317c:	2b2e      	cmp	r3, #46	; 0x2e
 800317e:	d001      	beq.n	8003184 <follow_path+0x58>
 8003180:	4281      	cmp	r1, r0
 8003182:	db0a      	blt.n	800319a <follow_path+0x6e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8003184:	2808      	cmp	r0, #8
 8003186:	f040 8089 	bne.w	800329c <follow_path+0x170>
 800318a:	2b2e      	cmp	r3, #46	; 0x2e
 800318c:	f040 8086 	bne.w	800329c <follow_path+0x170>
			i = 8; ni = 11;
			b <<= 2; continue;
 8003190:	0092      	lsls	r2, r2, #2
	for (;;) {
		c = p[si++];
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8003192:	4601      	mov	r1, r0
			b <<= 2; continue;
 8003194:	b2d2      	uxtb	r2, r2
	for (;;) {
		c = p[si++];
		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
		if (c == '.' || i >= ni) {
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
			i = 8; ni = 11;
 8003196:	3003      	adds	r0, #3
 8003198:	e7e8      	b.n	800316c <follow_path+0x40>
			b <<= 2; continue;
		}
		if (c >= 0x80) {				/* Extended char */
 800319a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800319e:	d003      	beq.n	80031a8 <follow_path+0x7c>
#ifdef _EXCVT
			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
 80031a0:	f8df c104 	ldr.w	ip, [pc, #260]	; 80032a8 <follow_path+0x17c>
 80031a4:	4463      	add	r3, ip
 80031a6:	791b      	ldrb	r3, [r3, #4]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
 80031a8:	f8df c100 	ldr.w	ip, [pc, #256]	; 80032ac <follow_path+0x180>
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
	while (*str && *str != chr) str++;
 80031ac:	f81c 8f01 	ldrb.w	r8, [ip, #1]!
 80031b0:	f1b8 0f00 	cmp.w	r8, #0
 80031b4:	d002      	beq.n	80031bc <follow_path+0x90>
 80031b6:	4598      	cmp	r8, r3
 80031b8:	d1f8      	bne.n	80031ac <follow_path+0x80>
 80031ba:	e06f      	b.n	800329c <follow_path+0x170>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {
			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
				return FR_INVALID_NAME;
			if (IsUpper(c)) {
 80031bc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80031c0:	fa5f fc8c 	uxtb.w	ip, ip
 80031c4:	f1bc 0f19 	cmp.w	ip, #25
 80031c8:	d802      	bhi.n	80031d0 <follow_path+0xa4>
				b |= 2;
 80031ca:	f042 0202 	orr.w	r2, r2, #2
 80031ce:	e00a      	b.n	80031e6 <follow_path+0xba>
			} else {
				if (IsLower(c)) {
 80031d0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80031d4:	fa5f fc8c 	uxtb.w	ip, ip
 80031d8:	f1bc 0f19 	cmp.w	ip, #25
 80031dc:	d803      	bhi.n	80031e6 <follow_path+0xba>
					b |= 1; c -= 0x20;
 80031de:	3b20      	subs	r3, #32
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	b2db      	uxtb	r3, r3
				}
			}
			sfn[i++] = c;
 80031e6:	5463      	strb	r3, [r4, r1]
 80031e8:	3101      	adds	r1, #1
 80031ea:	e7bf      	b.n	800316c <follow_path+0x40>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80031ec:	2304      	movs	r3, #4
 80031ee:	e000      	b.n	80031f2 <follow_path+0xc6>
 80031f0:	2300      	movs	r3, #0

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 80031f2:	2900      	cmp	r1, #0
 80031f4:	d052      	beq.n	800329c <follow_path+0x170>
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 80031f6:	7821      	ldrb	r1, [r4, #0]
 80031f8:	29e5      	cmp	r1, #229	; 0xe5
 80031fa:	d101      	bne.n	8003200 <follow_path+0xd4>
 80031fc:	39e0      	subs	r1, #224	; 0xe0
 80031fe:	7021      	strb	r1, [r4, #0]

	if (ni == 8) b <<= 2;
 8003200:	2808      	cmp	r0, #8
 8003202:	d101      	bne.n	8003208 <follow_path+0xdc>
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	b2d2      	uxtb	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003208:	f002 0103 	and.w	r1, r2, #3
 800320c:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800320e:	f002 020c 	and.w	r2, r2, #12

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */

	if (ni == 8) b <<= 2;
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8003212:	bf08      	it	eq
 8003214:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003218:	2a04      	cmp	r2, #4
 800321a:	bf08      	it	eq
 800321c:	f043 0308 	orreq.w	r3, r3, #8

	sfn[11] = c;		/* Store NT flag, File name is created */
 8003220:	72e3      	strb	r3, [r4, #11]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, lfen, ord, sum;
#endif

	res = dir_seek(dj, 0);			/* Rewind directory object */
 8003222:	4628      	mov	r0, r5
 8003224:	2100      	movs	r1, #0
 8003226:	f7ff fcfb 	bl	8002c20 <dir_seek>
	if (res != FR_OK) return res;
 800322a:	4604      	mov	r4, r0
 800322c:	b9b8      	cbnz	r0, 800325e <follow_path+0x132>

#if _USE_LFN
	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
 800322e:	6828      	ldr	r0, [r5, #0]
 8003230:	6929      	ldr	r1, [r5, #16]
 8003232:	f7ff fc4b 	bl	8002acc <move_window>
		if (res != FR_OK) break;
 8003236:	4604      	mov	r4, r0
 8003238:	b988      	cbnz	r0, 800325e <follow_path+0x132>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
 800323a:	6968      	ldr	r0, [r5, #20]
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800323c:	7803      	ldrb	r3, [r0, #0]
 800323e:	b16b      	cbz	r3, 800325c <follow_path+0x130>
				}
				ord = 0xFF;
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 8003240:	7ac3      	ldrb	r3, [r0, #11]
 8003242:	f013 0f08 	tst.w	r3, #8
 8003246:	d104      	bne.n	8003252 <follow_path+0x126>
 8003248:	69a9      	ldr	r1, [r5, #24]
 800324a:	220b      	movs	r2, #11
 800324c:	f7ff fa2c 	bl	80026a8 <mem_cmp>
 8003250:	b128      	cbz	r0, 800325e <follow_path+0x132>
			break;
#endif
		res = dir_next(dj, FALSE);				/* Next entry */
 8003252:	4628      	mov	r0, r5
 8003254:	2100      	movs	r1, #0
 8003256:	f7ff fe21 	bl	8002e9c <dir_next>
 800325a:	e7e6      	b.n	800322a <follow_path+0xfe>
	do {
		res = move_window(dj->fs, dj->sect);
		if (res != FR_OK) break;
		dir = dj->dir;					/* Ptr to the directory entry of current index */
		c = dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800325c:	2404      	movs	r4, #4
	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj);				/* Find it */
			last = *(dj->fn+11) & NS_LAST;
 800325e:	69ab      	ldr	r3, [r5, #24]
 8003260:	7adb      	ldrb	r3, [r3, #11]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	b2db      	uxtb	r3, r3
			if (res != FR_OK) {				/* Could not find the object */
 8003268:	b12c      	cbz	r4, 8003276 <follow_path+0x14a>
				if (res == FR_NO_FILE && !last)
 800326a:	2c04      	cmp	r4, #4
 800326c:	d119      	bne.n	80032a2 <follow_path+0x176>
					res = FR_NO_PATH;
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf08      	it	eq
 8003272:	2405      	moveq	r4, #5
 8003274:	e015      	b.n	80032a2 <follow_path+0x176>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
 8003276:	b9a3      	cbnz	r3, 80032a2 <follow_path+0x176>
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 8003278:	696b      	ldr	r3, [r5, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 800327a:	7ada      	ldrb	r2, [r3, #11]
 800327c:	f012 0f10 	tst.w	r2, #16
 8003280:	d00e      	beq.n	80032a0 <follow_path+0x174>
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8003282:	7d59      	ldrb	r1, [r3, #21]
 8003284:	7d1a      	ldrb	r2, [r3, #20]
				}
			}
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
 8003286:	19f6      	adds	r6, r6, r7
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8003288:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800328c:	7ed9      	ldrb	r1, [r3, #27]
 800328e:	7e9b      	ldrb	r3, [r3, #26]
 8003290:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003294:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003298:	60ab      	str	r3, [r5, #8]
		}
 800329a:	e75d      	b.n	8003158 <follow_path+0x2c>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */

	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 800329c:	2406      	movs	r4, #6
 800329e:	e000      	b.n	80032a2 <follow_path+0x176>
				break;
			}
			if (last) break;				/* Last segment match. Function completed. */
			dir = dj->dir;					/* There is next segment. Follow the sub directory */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
 80032a0:	2405      	movs	r4, #5
			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
		}
	}

	return res;
}
 80032a2:	4620      	mov	r0, r4
 80032a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032a8:	0800573a 	.word	0x0800573a
 80032ac:	08005846 	.word	0x08005846

080032b0 <f_mount>:
)
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 80032b0:	b948      	cbnz	r0, 80032c6 <f_mount+0x16>
		return FR_INVALID_DRIVE;
	rfs = FatFs[vol];				/* Get current fs object */
 80032b2:	4a06      	ldr	r2, [pc, #24]	; (80032cc <f_mount+0x1c>)
 80032b4:	6813      	ldr	r3, [r2, #0]

	if (rfs) {
 80032b6:	b103      	cbz	r3, 80032ba <f_mount+0xa>
#if _FS_REENTRANT					/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;			/* Clear old fs object */
 80032b8:	7018      	strb	r0, [r3, #0]
	}

	if (fs) {
 80032ba:	b109      	cbz	r1, 80032c0 <f_mount+0x10>
		fs->fs_type = 0;			/* Clear new fs object */
 80032bc:	2300      	movs	r3, #0
 80032be:	700b      	strb	r3, [r1, #0]
#if _FS_REENTRANT					/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */
 80032c0:	6011      	str	r1, [r2, #0]

	return FR_OK;
 80032c2:	2000      	movs	r0, #0
 80032c4:	4770      	bx	lr
{
	FATFS *rfs;


	if (vol >= _DRIVES)				/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
 80032c6:	200b      	movs	r0, #11
#endif
	}
	FatFs[vol] = fs;				/* Register new fs object */

	return FR_OK;
}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	20000060 	.word	0x20000060

080032d0 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80032d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032d4:	b08c      	sub	sp, #48	; 0x30
 80032d6:	4604      	mov	r4, r0
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 80032d8:	2300      	movs	r3, #0
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80032da:	a80c      	add	r0, sp, #48	; 0x30
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 80032dc:	f002 051f 	and.w	r5, r2, #31
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const XCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80032e0:	f840 1d2c 	str.w	r1, [r0, #-44]!
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	fp->fs = NULL;		/* Clear file object */
 80032e4:	6023      	str	r3, [r4, #0]
#if !_FS_READONLY
	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)));
 80032e6:	a902      	add	r1, sp, #8
 80032e8:	f005 021e 	and.w	r2, r5, #30
 80032ec:	f7ff fa90 	bl	8002810 <auto_mount>
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 80032f0:	2800      	cmp	r0, #0
 80032f2:	f040 8097 	bne.w	8003424 <f_open+0x154>
	INITBUF(dj, sfn, lfn);
 80032f6:	ab09      	add	r3, sp, #36	; 0x24
	res = follow_path(&dj, path);	/* Follow the file path */
 80032f8:	a802      	add	r0, sp, #8
 80032fa:	9901      	ldr	r1, [sp, #4]
#else
	mode &= FA_READ;
	res = auto_mount(&path, &dj.fs, 0);
#endif
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	INITBUF(dj, sfn, lfn);
 80032fc:	9308      	str	r3, [sp, #32]
	res = follow_path(&dj, path);	/* Follow the file path */
 80032fe:	f7ff ff15 	bl	800312c <follow_path>

#if !_FS_READONLY
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8003302:	f015 0f1c 	tst.w	r5, #28
 8003306:	d054      	beq.n	80033b2 <f_open+0xe2>
		DWORD ps, cl;

		if (res != FR_OK) {			/* No file, create new */
 8003308:	b160      	cbz	r0, 8003324 <f_open+0x54>
			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 800330a:	2804      	cmp	r0, #4
 800330c:	f040 808a 	bne.w	8003424 <f_open+0x154>
				res = dir_register(&dj);
 8003310:	a802      	add	r0, sp, #8
 8003312:	f7ff fe47 	bl	8002fa4 <dir_register>
			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003316:	2800      	cmp	r0, #0
 8003318:	f040 8084 	bne.w	8003424 <f_open+0x154>
			mode |= FA_CREATE_ALWAYS;
 800331c:	f045 0508 	orr.w	r5, r5, #8
			dir = dj.dir;			/* Created entry (SFN entry) */
 8003320:	9e07      	ldr	r6, [sp, #28]
 8003322:	e032      	b.n	800338a <f_open+0xba>
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 8003324:	f015 0f04 	tst.w	r5, #4
 8003328:	d177      	bne.n	800341a <f_open+0x14a>
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
 800332a:	9e07      	ldr	r6, [sp, #28]
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 800332c:	2e00      	cmp	r6, #0
 800332e:	d078      	beq.n	8003422 <f_open+0x152>
 8003330:	7af3      	ldrb	r3, [r6, #11]
 8003332:	f013 0311 	ands.w	r3, r3, #17
 8003336:	d174      	bne.n	8003422 <f_open+0x152>
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 8003338:	f015 0f08 	tst.w	r5, #8
 800333c:	d025      	beq.n	800338a <f_open+0xba>
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 800333e:	7d32      	ldrb	r2, [r6, #20]
 8003340:	7d77      	ldrb	r7, [r6, #21]
 8003342:	7ef1      	ldrb	r1, [r6, #27]
 8003344:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
 8003348:	7eb2      	ldrb	r2, [r6, #26]
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 800334a:	7533      	strb	r3, [r6, #20]
 800334c:	7573      	strb	r3, [r6, #21]
				ST_WORD(dir+DIR_FstClusLO, 0);
 800334e:	76b3      	strb	r3, [r6, #26]
 8003350:	76f3      	strb	r3, [r6, #27]
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 8003352:	7733      	strb	r3, [r6, #28]
 8003354:	7773      	strb	r3, [r6, #29]
 8003356:	77b3      	strb	r3, [r6, #30]
 8003358:	77f3      	strb	r3, [r6, #31]
				dj.fs->wflag = 1;
 800335a:	9802      	ldr	r0, [sp, #8]
				LEAVE_FF(dj.fs, FR_EXIST);
			dir = dj.dir;
			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
				LEAVE_FF(dj.fs, FR_DENIED);
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
 800335c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 8003360:	2301      	movs	r3, #1
				ps = dj.fs->winsect;			/* Remove the cluster chain */
				if (cl) {
 8003362:	ea52 4707 	orrs.w	r7, r2, r7, lsl #16
			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start cluster */
				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
				ST_WORD(dir+DIR_FstClusLO, 0);
				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
				dj.fs->wflag = 1;
 8003366:	7103      	strb	r3, [r0, #4]
				ps = dj.fs->winsect;			/* Remove the cluster chain */
 8003368:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
				if (cl) {
 800336c:	d007      	beq.n	800337e <f_open+0xae>
					res = remove_chain(dj.fs, cl);
 800336e:	4639      	mov	r1, r7
 8003370:	f7ff fd67 	bl	8002e42 <remove_chain>
					if (res) LEAVE_FF(dj.fs, res);
 8003374:	2800      	cmp	r0, #0
 8003376:	d155      	bne.n	8003424 <f_open+0x154>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8003378:	9b02      	ldr	r3, [sp, #8]
 800337a:	3f01      	subs	r7, #1
 800337c:	60df      	str	r7, [r3, #12]
				}
				res = move_window(dj.fs, ps);
 800337e:	9802      	ldr	r0, [sp, #8]
 8003380:	4641      	mov	r1, r8
 8003382:	f7ff fba3 	bl	8002acc <move_window>
				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003386:	2800      	cmp	r0, #0
 8003388:	d14c      	bne.n	8003424 <f_open+0x154>
			}
		}
		if (mode & FA_CREATE_ALWAYS) {
 800338a:	f015 0f08 	tst.w	r5, #8
 800338e:	d01f      	beq.n	80033d0 <f_open+0x100>
			dir[DIR_Attr] = 0;					/* Reset attribute */
 8003390:	2300      	movs	r3, #0
 8003392:	72f3      	strb	r3, [r6, #11]
			ps = get_fattime();
 8003394:	f7ff f978 	bl	8002688 <get_fattime>
			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 8003398:	0a03      	lsrs	r3, r0, #8
 800339a:	73b0      	strb	r0, [r6, #14]
 800339c:	73f3      	strb	r3, [r6, #15]
 800339e:	0c03      	lsrs	r3, r0, #16
 80033a0:	0e00      	lsrs	r0, r0, #24
 80033a2:	7433      	strb	r3, [r6, #16]
 80033a4:	7470      	strb	r0, [r6, #17]
			dj.fs->wflag = 1;
 80033a6:	9b02      	ldr	r3, [sp, #8]
 80033a8:	2201      	movs	r2, #1
 80033aa:	711a      	strb	r2, [r3, #4]
			mode |= FA__WRITTEN;				/* Set file changed flag */
 80033ac:	f045 0520 	orr.w	r5, r5, #32
 80033b0:	e00e      	b.n	80033d0 <f_open+0x100>
		}
	}
	/* Open an existing file */
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 80033b2:	2800      	cmp	r0, #0
 80033b4:	d136      	bne.n	8003424 <f_open+0x154>
		dir = dj.dir;
 80033b6:	9e07      	ldr	r6, [sp, #28]
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 80033b8:	2e00      	cmp	r6, #0
 80033ba:	d030      	beq.n	800341e <f_open+0x14e>
 80033bc:	7af3      	ldrb	r3, [r6, #11]
 80033be:	f013 0f10 	tst.w	r3, #16
 80033c2:	d12c      	bne.n	800341e <f_open+0x14e>
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80033c4:	f015 0f02 	tst.w	r5, #2
 80033c8:	d002      	beq.n	80033d0 <f_open+0x100>
 80033ca:	f013 0f01 	tst.w	r3, #1
 80033ce:	d128      	bne.n	8003422 <f_open+0x152>
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033d0:	9b02      	ldr	r3, [sp, #8]
 80033d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
 80033d4:	71a5      	strb	r5, [r4, #6]
			LEAVE_FF(dj.fs, FR_NO_FILE);
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80033d6:	61e2      	str	r2, [r4, #28]
	fp->dir_ptr = dj.dir;
 80033d8:	9a07      	ldr	r2, [sp, #28]
 80033da:	6222      	str	r2, [r4, #32]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 80033dc:	7d32      	ldrb	r2, [r6, #20]
 80033de:	7d71      	ldrb	r1, [r6, #21]
 80033e0:	7ef0      	ldrb	r0, [r6, #27]
 80033e2:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
 80033e6:	7eb2      	ldrb	r2, [r6, #26]
 80033e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80033ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
	}
	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
 80033f0:	6122      	str	r2, [r4, #16]
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 80033f2:	7fb2      	ldrb	r2, [r6, #30]
 80033f4:	7ff1      	ldrb	r1, [r6, #31]
 80033f6:	0412      	lsls	r2, r2, #16
 80033f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033fc:	7f31      	ldrb	r1, [r6, #28]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 80033fe:	2000      	movs	r0, #0
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8003400:	430a      	orrs	r2, r1
 8003402:	7f71      	ldrb	r1, [r6, #29]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8003404:	6023      	str	r3, [r4, #0]
	fp->dir_ptr = dj.dir;
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 8003406:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800340a:	60e2      	str	r2, [r4, #12]
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 800340c:	22ff      	movs	r2, #255	; 0xff
 800340e:	71e2      	strb	r2, [r4, #7]
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8003410:	88db      	ldrh	r3, [r3, #6]
#endif
	fp->flag = mode;					/* File access mode */
	fp->org_clust =						/* File start cluster */
		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 8003412:	60a0      	str	r0, [r4, #8]
	fp->dsect = 0;
 8003414:	61a0      	str	r0, [r4, #24]
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 8003416:	80a3      	strh	r3, [r4, #4]

	LEAVE_FF(dj.fs, FR_OK);
 8003418:	e004      	b.n	8003424 <f_open+0x154>
			mode |= FA_CREATE_ALWAYS;
			dir = dj.dir;			/* Created entry (SFN entry) */
		}
		else {						/* Any object is already existing */
			if (mode & FA_CREATE_NEW)			/* Cannot create new */
				LEAVE_FF(dj.fs, FR_EXIST);
 800341a:	2008      	movs	r0, #8
 800341c:	e002      	b.n	8003424 <f_open+0x154>
	else {
#endif /* !_FS_READONLY */
		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
		dir = dj.dir;
		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
			LEAVE_FF(dj.fs, FR_NO_FILE);
 800341e:	2004      	movs	r0, #4
 8003420:	e000      	b.n	8003424 <f_open+0x154>
#if !_FS_READONLY
		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
			LEAVE_FF(dj.fs, FR_DENIED);
 8003422:	2007      	movs	r0, #7
	fp->fptr = 0; fp->csect = 255;		/* File pointer */
	fp->dsect = 0;
	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */

	LEAVE_FF(dj.fs, FR_OK);
}
 8003424:	b00c      	add	sp, #48	; 0x30
 8003426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800342a <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 800342a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800342e:	4604      	mov	r4, r0
 8003430:	469a      	mov	sl, r3
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
 8003432:	2300      	movs	r3, #0
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 8003434:	4688      	mov	r8, r1
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;


	*br = 0;
 8003436:	f8ca 3000 	str.w	r3, [sl]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 800343a:	6800      	ldr	r0, [r0, #0]
 800343c:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
 800343e:	4616      	mov	r6, r2
	BYTE *rbuff = buff;


	*br = 0;

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 8003440:	f7ff f9a2 	bl	8002788 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003444:	4605      	mov	r5, r0
 8003446:	2800      	cmp	r0, #0
 8003448:	f040 80aa 	bne.w	80035a0 <f_read+0x176>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 800344c:	79a3      	ldrb	r3, [r4, #6]
 800344e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003452:	f040 80a2 	bne.w	800359a <f_read+0x170>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 8003456:	f013 0f01 	tst.w	r3, #1
 800345a:	f000 80a0 	beq.w	800359e <f_read+0x174>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
 800345e:	68e2      	ldr	r2, [r4, #12]
 8003460:	68a3      	ldr	r3, [r4, #8]
 8003462:	ebc3 0902 	rsb	r9, r3, r2
)
{
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE *rbuff = buff;
 8003466:	454e      	cmp	r6, r9
 8003468:	bf38      	it	cc
 800346a:	46b1      	movcc	r9, r6
 800346c:	e090      	b.n	8003590 <f_read+0x166>
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 800346e:	68a2      	ldr	r2, [r4, #8]
 8003470:	05d3      	lsls	r3, r2, #23
 8003472:	0ddb      	lsrs	r3, r3, #23
 8003474:	2b00      	cmp	r3, #0
 8003476:	d171      	bne.n	800355c <f_read+0x132>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	79e1      	ldrb	r1, [r4, #7]
 800347c:	7883      	ldrb	r3, [r0, #2]
 800347e:	4299      	cmp	r1, r3
 8003480:	d30d      	bcc.n	800349e <f_read+0x74>
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 8003482:	b90a      	cbnz	r2, 8003488 <f_read+0x5e>
 8003484:	6920      	ldr	r0, [r4, #16]
 8003486:	e002      	b.n	800348e <f_read+0x64>
 8003488:	6961      	ldr	r1, [r4, #20]
 800348a:	f7ff fb5d 	bl	8002b48 <get_fat>
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 800348e:	2801      	cmp	r0, #1
 8003490:	d90c      	bls.n	80034ac <f_read+0x82>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003492:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003496:	d057      	beq.n	8003548 <f_read+0x11e>
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
 8003498:	2300      	movs	r3, #0
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
				clst = (fp->fptr == 0) ?			/* On the top of the file? */
					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
 800349a:	6160      	str	r0, [r4, #20]
				fp->csect = 0;						/* Reset sector offset in the cluster */
 800349c:	71e3      	strb	r3, [r4, #7]
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 800349e:	f8d4 b000 	ldr.w	fp, [r4]
 80034a2:	6961      	ldr	r1, [r4, #20]
 80034a4:	4658      	mov	r0, fp
 80034a6:	f7ff f90c 	bl	80026c2 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80034aa:	b920      	cbnz	r0, 80034b6 <f_read+0x8c>
 80034ac:	79a3      	ldrb	r3, [r4, #6]
 80034ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b2:	71a3      	strb	r3, [r4, #6]
 80034b4:	e071      	b.n	800359a <f_read+0x170>
			sect += fp->csect;
 80034b6:	79e3      	ldrb	r3, [r4, #7]
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 80034b8:	ea5f 2659 	movs.w	r6, r9, lsr #9
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector offset in the cluster */
			}
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 80034bc:	eb00 0703 	add.w	r7, r0, r3
			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Read maximum contiguous sectors directly */
 80034c0:	d025      	beq.n	800350e <f_read+0xe4>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 80034c2:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80034c6:	18f1      	adds	r1, r6, r3
 80034c8:	4291      	cmp	r1, r2
					cc = fp->fs->csize - fp->csect;
 80034ca:	bf88      	it	hi
 80034cc:	ebc3 0602 	rsbhi	r6, r3, r2
				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 80034d0:	b2f3      	uxtb	r3, r6
 80034d2:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80034d6:	4641      	mov	r1, r8
 80034d8:	463a      	mov	r2, r7
 80034da:	f7ff f8b3 	bl	8002644 <disk_read>
 80034de:	79a3      	ldrb	r3, [r4, #6]
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d132      	bne.n	800354a <f_read+0x120>
#if !_FS_READONLY && _FS_MINIMIZE <= 2
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cached data if it contains a dirty sector */
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with cached data if it contains a dirty sector */
 80034e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80034e8:	d00c      	beq.n	8003504 <f_read+0xda>
 80034ea:	69a3      	ldr	r3, [r4, #24]
 80034ec:	1bdf      	subs	r7, r3, r7
 80034ee:	42b7      	cmp	r7, r6
 80034f0:	d208      	bcs.n	8003504 <f_read+0xda>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 80034f2:	027f      	lsls	r7, r7, #9
 80034f4:	eb08 0007 	add.w	r0, r8, r7
 80034f8:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80034fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003500:	f7ff f8c4 	bl	800268c <mem_cpy>
#endif
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 8003504:	79e3      	ldrb	r3, [r4, #7]
 8003506:	18f3      	adds	r3, r6, r3
 8003508:	71e3      	strb	r3, [r4, #7]
				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 800350a:	0276      	lsls	r6, r6, #9
				continue;
 800350c:	e035      	b.n	800357a <f_read+0x150>
			}
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 800350e:	79a3      	ldrb	r3, [r4, #6]
 8003510:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003514:	d00c      	beq.n	8003530 <f_read+0x106>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8003516:	2301      	movs	r3, #1
 8003518:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800351c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8003520:	69a2      	ldr	r2, [r4, #24]
 8003522:	f7ff f89f 	bl	8002664 <disk_write>
 8003526:	79a3      	ldrb	r3, [r4, #6]
 8003528:	b978      	cbnz	r0, 800354a <f_read+0x120>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 800352a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800352e:	71a3      	strb	r3, [r4, #6]
			}
#endif
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 8003530:	69a3      	ldr	r3, [r4, #24]
 8003532:	42bb      	cmp	r3, r7
 8003534:	d00e      	beq.n	8003554 <f_read+0x12a>
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 8003536:	4621      	mov	r1, r4
 8003538:	f851 3b24 	ldr.w	r3, [r1], #36
 800353c:	463a      	mov	r2, r7
 800353e:	7858      	ldrb	r0, [r3, #1]
 8003540:	2301      	movs	r3, #1
 8003542:	f7ff f87f 	bl	8002644 <disk_read>
 8003546:	b128      	cbz	r0, 8003554 <f_read+0x12a>
					ABORT(fp->fs, FR_DISK_ERR);
 8003548:	79a3      	ldrb	r3, [r4, #6]
 800354a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800354e:	71a3      	strb	r3, [r4, #6]
 8003550:	2501      	movs	r5, #1
 8003552:	e025      	b.n	80035a0 <f_read+0x176>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
 8003554:	79e3      	ldrb	r3, [r4, #7]
			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 8003556:	61a7      	str	r7, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 8003558:	3301      	adds	r3, #1
 800355a:	71e3      	strb	r3, [r4, #7]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 800355c:	68a3      	ldr	r3, [r4, #8]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 800355e:	f104 0124 	add.w	r1, r4, #36	; 0x24
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8003562:	05db      	lsls	r3, r3, #23
 8003564:	0ddb      	lsrs	r3, r3, #23
 8003566:	f5c3 7600 	rsb	r6, r3, #512	; 0x200
 800356a:	45b1      	cmp	r9, r6
 800356c:	bf38      	it	cc
 800356e:	464e      	movcc	r6, r9
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8003570:	4640      	mov	r0, r8
 8003572:	18c9      	adds	r1, r1, r3
 8003574:	4632      	mov	r2, r6
 8003576:	f7ff f889 	bl	800268c <mem_cpy>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800357a:	68a3      	ldr	r3, [r4, #8]
 800357c:	44b0      	add	r8, r6
 800357e:	199b      	adds	r3, r3, r6
 8003580:	60a3      	str	r3, [r4, #8]
 8003582:	f8da 3000 	ldr.w	r3, [sl]
 8003586:	ebc6 0909 	rsb	r9, r6, r9
 800358a:	199b      	adds	r3, r3, r6
 800358c:	f8ca 3000 	str.w	r3, [sl]
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */

	for ( ;  btr;									/* Repeat until all data transferred */
 8003590:	f1b9 0f00 	cmp.w	r9, #0
 8003594:	f47f af6b 	bne.w	800346e <f_read+0x44>
 8003598:	e002      	b.n	80035a0 <f_read+0x176>
	*br = 0;

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 800359a:	2502      	movs	r5, #2
 800359c:	e000      	b.n	80035a0 <f_read+0x176>
	if (!(fp->flag & FA_READ)) 						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 800359e:	2507      	movs	r5, #7
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
 80035a0:	4628      	mov	r0, r5
 80035a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080035a6 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80035a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035aa:	4604      	mov	r4, r0
 80035ac:	469a      	mov	sl, r3
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
 80035ae:	2300      	movs	r3, #0
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80035b0:	4689      	mov	r9, r1
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;


	*bw = 0;
 80035b2:	f8ca 3000 	str.w	r3, [sl]

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	88a1      	ldrh	r1, [r4, #4]
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
 80035ba:	4616      	mov	r6, r2
	const BYTE *wbuff = buff;


	*bw = 0;

	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 80035bc:	f7ff f8e4 	bl	8002788 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80035c0:	4605      	mov	r5, r0
 80035c2:	2800      	cmp	r0, #0
 80035c4:	f040 80c1 	bne.w	800374a <f_write+0x1a4>
	if (fp->flag & FA__ERROR)						/* Check abort flag */
 80035c8:	79a3      	ldrb	r3, [r4, #6]
 80035ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80035ce:	d148      	bne.n	8003662 <f_write+0xbc>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 80035d0:	f013 0f02 	tst.w	r3, #2
 80035d4:	f000 80b8 	beq.w	8003748 <f_write+0x1a2>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 80035d8:	68e3      	ldr	r3, [r4, #12]
 80035da:	42de      	cmn	r6, r3
 80035dc:	bf28      	it	cs
 80035de:	2600      	movcs	r6, #0
 80035e0:	e0a5      	b.n	800372e <f_write+0x188>

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 80035e2:	68a2      	ldr	r2, [r4, #8]
 80035e4:	05d3      	lsls	r3, r2, #23
 80035e6:	0ddb      	lsrs	r3, r3, #23
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 8083 	bne.w	80036f4 <f_write+0x14e>
			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 80035ee:	6820      	ldr	r0, [r4, #0]
 80035f0:	79e1      	ldrb	r1, [r4, #7]
 80035f2:	7883      	ldrb	r3, [r0, #2]
 80035f4:	4299      	cmp	r1, r3
 80035f6:	d317      	bcc.n	8003628 <f_write+0x82>
				if (fp->fptr == 0) {				/* On the top of the file? */
 80035f8:	b932      	cbnz	r2, 8003608 <f_write+0x62>
					clst = fp->org_clust;			/* Follow from the origin */
 80035fa:	6921      	ldr	r1, [r4, #16]
					if (clst == 0)					/* When there is no cluster chain, */
 80035fc:	b959      	cbnz	r1, 8003616 <f_write+0x70>
						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 80035fe:	f7ff fbcf 	bl	8002da0 <create_chain>
 8003602:	4601      	mov	r1, r0
 8003604:	6120      	str	r0, [r4, #16]
 8003606:	e003      	b.n	8003610 <f_write+0x6a>
				} else {							/* Middle or end of the file */
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
 8003608:	6961      	ldr	r1, [r4, #20]
 800360a:	f7ff fbc9 	bl	8002da0 <create_chain>
 800360e:	4601      	mov	r1, r0
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 8003610:	2900      	cmp	r1, #0
 8003612:	f000 808f 	beq.w	8003734 <f_write+0x18e>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003616:	2901      	cmp	r1, #1
 8003618:	79a3      	ldrb	r3, [r4, #6]
 800361a:	d01f      	beq.n	800365c <f_write+0xb6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800361c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8003620:	d05e      	beq.n	80036e0 <f_write+0x13a>
				fp->curr_clust = clst;				/* Update current cluster */
				fp->csect = 0;						/* Reset sector address in the cluster */
 8003622:	2300      	movs	r3, #0
					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
				}
				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->curr_clust = clst;				/* Update current cluster */
 8003624:	6161      	str	r1, [r4, #20]
				fp->csect = 0;						/* Reset sector address in the cluster */
 8003626:	71e3      	strb	r3, [r4, #7]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to following direct transfer */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 8003628:	79a3      	ldrb	r3, [r4, #6]
 800362a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800362e:	d00d      	beq.n	800364c <f_write+0xa6>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8003630:	4621      	mov	r1, r4
 8003632:	f851 3b24 	ldr.w	r3, [r1], #36
 8003636:	69a2      	ldr	r2, [r4, #24]
 8003638:	7858      	ldrb	r0, [r3, #1]
 800363a:	2301      	movs	r3, #1
 800363c:	f7ff f812 	bl	8002664 <disk_write>
 8003640:	79a3      	ldrb	r3, [r4, #6]
 8003642:	2800      	cmp	r0, #0
 8003644:	d14c      	bne.n	80036e0 <f_write+0x13a>
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8003646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800364a:	71a3      	strb	r3, [r4, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 800364c:	f8d4 b000 	ldr.w	fp, [r4]
 8003650:	6961      	ldr	r1, [r4, #20]
 8003652:	4658      	mov	r0, fp
 8003654:	f7ff f835 	bl	80026c2 <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8003658:	b928      	cbnz	r0, 8003666 <f_write+0xc0>
 800365a:	79a3      	ldrb	r3, [r4, #6]
 800365c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003660:	71a3      	strb	r3, [r4, #6]
 8003662:	2502      	movs	r5, #2
 8003664:	e071      	b.n	800374a <f_write+0x1a4>
			sect += fp->csect;
 8003666:	79e3      	ldrb	r3, [r4, #7]
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Write maximum contiguous sectors directly */
 8003668:	0a77      	lsrs	r7, r6, #9
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
			sect += fp->csect;
 800366a:	eb00 0803 	add.w	r8, r0, r3
			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
			if (cc) {								/* Write maximum contiguous sectors directly */
 800366e:	d026      	beq.n	80036be <f_write+0x118>
				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8003670:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8003674:	18f9      	adds	r1, r7, r3
 8003676:	4291      	cmp	r1, r2
					cc = fp->fs->csize - fp->csect;
 8003678:	bf88      	it	hi
 800367a:	ebc3 0702 	rsbhi	r7, r3, r2
				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 800367e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 8003682:	4649      	mov	r1, r9
 8003684:	4642      	mov	r2, r8
 8003686:	b2fb      	uxtb	r3, r7
 8003688:	f7fe ffec 	bl	8002664 <disk_write>
 800368c:	bb38      	cbnz	r0, 80036de <f_write+0x138>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 800368e:	69a3      	ldr	r3, [r4, #24]
 8003690:	ebc8 0803 	rsb	r8, r8, r3
 8003694:	45b8      	cmp	r8, r7
 8003696:	d20d      	bcs.n	80036b4 <f_write+0x10e>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8003698:	ea4f 2848 	mov.w	r8, r8, lsl #9
 800369c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036a0:	eb09 0108 	add.w	r1, r9, r8
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	f7fe fff0 	bl	800268c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80036ac:	79a3      	ldrb	r3, [r4, #6]
 80036ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b2:	71a3      	strb	r3, [r4, #6]
				}
#endif
				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 80036b4:	79e3      	ldrb	r3, [r4, #7]
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	71e3      	strb	r3, [r4, #7]
				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 80036ba:	027f      	lsls	r7, r7, #9
				continue;
 80036bc:	e02d      	b.n	800371a <f_write+0x174>
			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 80036be:	69a3      	ldr	r3, [r4, #24]
 80036c0:	4543      	cmp	r3, r8
 80036c2:	d012      	beq.n	80036ea <f_write+0x144>
				if (fp->fptr < fp->fsize &&
 80036c4:	68a2      	ldr	r2, [r4, #8]
 80036c6:	68e3      	ldr	r3, [r4, #12]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d20e      	bcs.n	80036ea <f_write+0x144>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 80036cc:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80036d0:	f104 0124 	add.w	r1, r4, #36	; 0x24
 80036d4:	4642      	mov	r2, r8
 80036d6:	2301      	movs	r3, #1
 80036d8:	f7fe ffb4 	bl	8002644 <disk_read>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
				if (fp->fptr < fp->fsize &&
 80036dc:	b128      	cbz	r0, 80036ea <f_write+0x144>
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
 80036de:	79a3      	ldrb	r3, [r4, #6]
 80036e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80036e4:	71a3      	strb	r3, [r4, #6]
 80036e6:	2501      	movs	r5, #1
 80036e8:	e02f      	b.n	800374a <f_write+0x1a4>
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
 80036ea:	79e3      	ldrb	r3, [r4, #7]
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
 80036ec:	f8c4 8018 	str.w	r8, [r4, #24]
			fp->csect++;							/* Next sector address in the cluster */
 80036f0:	3301      	adds	r3, #1
 80036f2:	71e3      	strb	r3, [r4, #7]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 80036f4:	68a3      	ldr	r3, [r4, #8]
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80036f6:	f104 0024 	add.w	r0, r4, #36	; 0x24
			}
#endif
			fp->dsect = sect;
			fp->csect++;							/* Next sector address in the cluster */
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 80036fa:	05db      	lsls	r3, r3, #23
 80036fc:	0ddb      	lsrs	r3, r3, #23
 80036fe:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
 8003702:	42be      	cmp	r6, r7
 8003704:	bf38      	it	cc
 8003706:	4637      	movcc	r7, r6
		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8003708:	18c0      	adds	r0, r0, r3
 800370a:	4649      	mov	r1, r9
 800370c:	463a      	mov	r2, r7
 800370e:	f7fe ffbd 	bl	800268c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8003712:	79a3      	ldrb	r3, [r4, #6]
 8003714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003718:	71a3      	strb	r3, [r4, #6]
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	44b9      	add	r9, r7
 800371e:	19db      	adds	r3, r3, r7
 8003720:	60a3      	str	r3, [r4, #8]
 8003722:	f8da 3000 	ldr.w	r3, [sl]
 8003726:	1bf6      	subs	r6, r6, r7
 8003728:	19db      	adds	r3, r3, r7
 800372a:	f8ca 3000 	str.w	r3, [sl]
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */

	for ( ;  btw;									/* Repeat until all data transferred */
 800372e:	2e00      	cmp	r6, #0
 8003730:	f47f af57 	bne.w	80035e2 <f_write+0x3c>
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8003734:	68a3      	ldr	r3, [r4, #8]
 8003736:	68e2      	ldr	r2, [r4, #12]
 8003738:	4293      	cmp	r3, r2
 800373a:	bf88      	it	hi
 800373c:	60e3      	strhi	r3, [r4, #12]
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 800373e:	79a3      	ldrb	r3, [r4, #6]
 8003740:	f043 0320 	orr.w	r3, r3, #32
 8003744:	71a3      	strb	r3, [r4, #6]

	LEAVE_FF(fp->fs, FR_OK);
 8003746:	e000      	b.n	800374a <f_write+0x1a4>
	res = validate(fp->fs, fp->id);					/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)						/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))						/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8003748:	2507      	movs	r5, #7

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
	fp->flag |= FA__WRITTEN;						/* Set file changed flag */

	LEAVE_FF(fp->fs, FR_OK);
}
 800374a:	4628      	mov	r0, r5
 800374c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003750 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	4604      	mov	r4, r0
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8003754:	88a1      	ldrh	r1, [r4, #4]
 8003756:	6800      	ldr	r0, [r0, #0]
 8003758:	f7ff f816 	bl	8002788 <validate>
	if (res == FR_OK) {
 800375c:	2800      	cmp	r0, #0
 800375e:	d147      	bne.n	80037f0 <f_sync+0xa0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8003760:	79a3      	ldrb	r3, [r4, #6]
 8003762:	f013 0f20 	tst.w	r3, #32
 8003766:	d043      	beq.n	80037f0 <f_sync+0xa0>
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
 8003768:	f013 0f40 	tst.w	r3, #64	; 0x40
 800376c:	d00d      	beq.n	800378a <f_sync+0x3a>
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 800376e:	4621      	mov	r1, r4
 8003770:	f851 3b24 	ldr.w	r3, [r1], #36
 8003774:	69a2      	ldr	r2, [r4, #24]
 8003776:	7858      	ldrb	r0, [r3, #1]
 8003778:	2301      	movs	r3, #1
 800377a:	f7fe ff73 	bl	8002664 <disk_write>
 800377e:	2800      	cmp	r0, #0
 8003780:	d135      	bne.n	80037ee <f_sync+0x9e>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
 8003782:	79a3      	ldrb	r3, [r4, #6]
 8003784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003788:	71a3      	strb	r3, [r4, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800378a:	6820      	ldr	r0, [r4, #0]
 800378c:	69e1      	ldr	r1, [r4, #28]
 800378e:	f7ff f99d 	bl	8002acc <move_window>
			if (res == FR_OK) {
 8003792:	2800      	cmp	r0, #0
 8003794:	d12c      	bne.n	80037f0 <f_sync+0xa0>
				dir = fp->dir_ptr;
 8003796:	6a25      	ldr	r5, [r4, #32]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8003798:	7aeb      	ldrb	r3, [r5, #11]
 800379a:	f043 0320 	orr.w	r3, r3, #32
 800379e:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 80037a0:	68e3      	ldr	r3, [r4, #12]
 80037a2:	772b      	strb	r3, [r5, #28]
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	776b      	strb	r3, [r5, #29]
 80037aa:	89e3      	ldrh	r3, [r4, #14]
 80037ac:	77ab      	strb	r3, [r5, #30]
 80037ae:	7be3      	ldrb	r3, [r4, #15]
 80037b0:	77eb      	strb	r3, [r5, #31]
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 80037b2:	6923      	ldr	r3, [r4, #16]
 80037b4:	76ab      	strb	r3, [r5, #26]
 80037b6:	8a23      	ldrh	r3, [r4, #16]
 80037b8:	0a1b      	lsrs	r3, r3, #8
 80037ba:	76eb      	strb	r3, [r5, #27]
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 80037bc:	8a63      	ldrh	r3, [r4, #18]
 80037be:	752b      	strb	r3, [r5, #20]
 80037c0:	8a63      	ldrh	r3, [r4, #18]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	756b      	strb	r3, [r5, #21]
				tim = get_fattime();			/* Updated time */
 80037c6:	f7fe ff5f 	bl	8002688 <get_fattime>
				ST_DWORD(dir+DIR_WrtTime, tim);
 80037ca:	0a03      	lsrs	r3, r0, #8
 80037cc:	75a8      	strb	r0, [r5, #22]
 80037ce:	75eb      	strb	r3, [r5, #23]
 80037d0:	0c03      	lsrs	r3, r0, #16
 80037d2:	0e00      	lsrs	r0, r0, #24
 80037d4:	762b      	strb	r3, [r5, #24]
 80037d6:	7668      	strb	r0, [r5, #25]
				fp->flag &= ~FA__WRITTEN;
 80037d8:	79a3      	ldrb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80037da:	2201      	movs	r2, #1
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
 80037dc:	f023 0320 	bic.w	r3, r3, #32
 80037e0:	71a3      	strb	r3, [r4, #6]
				fp->fs->wflag = 1;
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
 80037e6:	6820      	ldr	r0, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80037e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
				tim = get_fattime();			/* Updated time */
				ST_DWORD(dir+DIR_WrtTime, tim);
				fp->flag &= ~FA__WRITTEN;
				fp->fs->wflag = 1;
				res = sync(fp->fs);
 80037ec:	e445      	b.n	800307a <sync>
	if (res == FR_OK) {
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
#if !_FS_TINY	/* Write-back dirty buffer */
			if (fp->flag & FA__DIRTY) {
				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80037ee:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fp->fs, res);
}
 80037f0:	bd70      	pop	{r4, r5, r6, pc}

080037f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80037f2:	b510      	push	{r4, lr}
 80037f4:	4604      	mov	r4, r0
#if _FS_READONLY
	res = validate(fp->fs, fp->id);
	if (res == FR_OK) fp->fs = NULL;
	LEAVE_FF(fp->fs, res);
#else
	res = f_sync(fp);
 80037f6:	f7ff ffab 	bl	8003750 <f_sync>
	if (res == FR_OK) fp->fs = NULL;
 80037fa:	b900      	cbnz	r0, 80037fe <f_close+0xc>
 80037fc:	6020      	str	r0, [r4, #0]
	return res;
#endif
}
 80037fe:	bd10      	pop	{r4, pc}

08003800 <f_lseek>:

FRESULT f_lseek (
	FIL *fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8003800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	460e      	mov	r6, r1
	FRESULT res;
	DWORD clst, bcs, nsect, ifptr;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8003806:	6800      	ldr	r0, [r0, #0]
 8003808:	88a1      	ldrh	r1, [r4, #4]
 800380a:	f7fe ffbd 	bl	8002788 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800380e:	4605      	mov	r5, r0
 8003810:	2800      	cmp	r0, #0
 8003812:	f040 809f 	bne.w	8003954 <f_lseek+0x154>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 8003816:	79a2      	ldrb	r2, [r4, #6]
 8003818:	f012 0f80 	tst.w	r2, #128	; 0x80
 800381c:	f040 8099 	bne.w	8003952 <f_lseek+0x152>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8003820:	68e3      	ldr	r3, [r4, #12]
 8003822:	429e      	cmp	r6, r3
 8003824:	d904      	bls.n	8003830 <f_lseek+0x30>
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
 8003826:	f002 0202 	and.w	r2, r2, #2
 800382a:	2a00      	cmp	r2, #0
 800382c:	bf08      	it	eq
 800382e:	461e      	moveq	r6, r3
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
 8003830:	2200      	movs	r2, #0
#if !_FS_READONLY
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
 8003832:	68a3      	ldr	r3, [r4, #8]
	fp->fptr = nsect = 0; fp->csect = 255;
 8003834:	60a2      	str	r2, [r4, #8]
 8003836:	32ff      	adds	r2, #255	; 0xff
 8003838:	71e2      	strb	r2, [r4, #7]
	if (ofs > 0) {
 800383a:	2e00      	cmp	r6, #0
 800383c:	d058      	beq.n	80038f0 <f_lseek+0xf0>
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	7887      	ldrb	r7, [r0, #2]
 8003842:	027f      	lsls	r7, r7, #9
		if (ifptr > 0 &&
 8003844:	b173      	cbz	r3, 8003864 <f_lseek+0x64>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8003846:	3b01      	subs	r3, #1
 8003848:	1e71      	subs	r1, r6, #1
 800384a:	fbb1 f1f7 	udiv	r1, r1, r7
 800384e:	fbb3 f2f7 	udiv	r2, r3, r7

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
	if (ofs > 0) {
		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
		if (ifptr > 0 &&
 8003852:	4291      	cmp	r1, r2
 8003854:	d306      	bcc.n	8003864 <f_lseek+0x64>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 8003856:	427a      	negs	r2, r7
 8003858:	ea02 0303 	and.w	r3, r2, r3
 800385c:	60a3      	str	r3, [r4, #8]
			ofs -= fp->fptr;
 800385e:	1af6      	subs	r6, r6, r3
			clst = fp->curr_clust;
 8003860:	6961      	ldr	r1, [r4, #20]
 8003862:	e00b      	b.n	800387c <f_lseek+0x7c>
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
 8003864:	6921      	ldr	r1, [r4, #16]
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
 8003866:	b941      	cbnz	r1, 800387a <f_lseek+0x7a>
				clst = create_chain(fp->fs, 0);
 8003868:	f7ff fa9a 	bl	8002da0 <create_chain>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800386c:	2801      	cmp	r0, #1
			clst = fp->curr_clust;
		} else {									/* When seek to back cluster, */
			clst = fp->org_clust;					/* start from the first cluster */
#if !_FS_READONLY
			if (clst == 0) {						/* If no cluster chain, create a new chain */
				clst = create_chain(fp->fs, 0);
 800386e:	4601      	mov	r1, r0
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8003870:	d034      	beq.n	80038dc <f_lseek+0xdc>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8003872:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003876:	d05b      	beq.n	8003930 <f_lseek+0x130>
				fp->org_clust = clst;
 8003878:	6120      	str	r0, [r4, #16]
			}
#endif
			fp->curr_clust = clst;
 800387a:	6161      	str	r1, [r4, #20]
		}
		if (clst != 0) {
 800387c:	2900      	cmp	r1, #0
 800387e:	d036      	beq.n	80038ee <f_lseek+0xee>
 8003880:	e01b      	b.n	80038ba <f_lseek+0xba>
			while (ofs > bcs) {						/* Cluster following loop */
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8003882:	79a3      	ldrb	r3, [r4, #6]
 8003884:	f013 0f02 	tst.w	r3, #2
 8003888:	d005      	beq.n	8003896 <f_lseek+0x96>
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 800388a:	6820      	ldr	r0, [r4, #0]
 800388c:	f7ff fa88 	bl	8002da0 <create_chain>
					if (clst == 0) {				/* When disk gets full, clip file size */
 8003890:	4601      	mov	r1, r0
 8003892:	b920      	cbnz	r0, 800389e <f_lseek+0x9e>
 8003894:	e014      	b.n	80038c0 <f_lseek+0xc0>
						ofs = bcs; break;
					}
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8003896:	6820      	ldr	r0, [r4, #0]
 8003898:	f7ff f956 	bl	8002b48 <get_fat>
 800389c:	4601      	mov	r1, r0
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800389e:	f1b1 3fff 	cmp.w	r1, #4294967295
 80038a2:	d045      	beq.n	8003930 <f_lseek+0x130>
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 80038a4:	2901      	cmp	r1, #1
 80038a6:	d919      	bls.n	80038dc <f_lseek+0xdc>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d215      	bcs.n	80038dc <f_lseek+0xdc>
				fp->curr_clust = clst;
				fp->fptr += bcs;
 80038b0:	68a3      	ldr	r3, [r4, #8]
				} else
#endif
					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
 80038b2:	6161      	str	r1, [r4, #20]
				fp->fptr += bcs;
 80038b4:	19db      	adds	r3, r3, r7
 80038b6:	60a3      	str	r3, [r4, #8]
				ofs -= bcs;
 80038b8:	1bf6      	subs	r6, r6, r7
			}
#endif
			fp->curr_clust = clst;
		}
		if (clst != 0) {
			while (ofs > bcs) {						/* Cluster following loop */
 80038ba:	42be      	cmp	r6, r7
 80038bc:	d8e1      	bhi.n	8003882 <f_lseek+0x82>
 80038be:	e000      	b.n	80038c2 <f_lseek+0xc2>
#if !_FS_READONLY
				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
					if (clst == 0) {				/* When disk gets full, clip file size */
 80038c0:	463e      	mov	r6, r7
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 80038c2:	68a3      	ldr	r3, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80038c4:	0a77      	lsrs	r7, r6, #9
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 80038c6:	199b      	adds	r3, r3, r6
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
			if (ofs % SS(fp->fs)) {
 80038c8:	05f6      	lsls	r6, r6, #23
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80038ca:	b2ff      	uxtb	r7, r7
			if (ofs % SS(fp->fs)) {
 80038cc:	0df6      	lsrs	r6, r6, #23
				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
				fp->curr_clust = clst;
				fp->fptr += bcs;
				ofs -= bcs;
			}
			fp->fptr += ofs;
 80038ce:	60a3      	str	r3, [r4, #8]
			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 80038d0:	71e7      	strb	r7, [r4, #7]
			if (ofs % SS(fp->fs)) {
 80038d2:	b16e      	cbz	r6, 80038f0 <f_lseek+0xf0>
				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	f7fe fef4 	bl	80026c2 <clust2sect>
				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80038da:	b920      	cbnz	r0, 80038e6 <f_lseek+0xe6>
 80038dc:	79a3      	ldrb	r3, [r4, #6]
 80038de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80038e2:	71a3      	strb	r3, [r4, #6]
 80038e4:	e035      	b.n	8003952 <f_lseek+0x152>
				nsect += fp->csect;
 80038e6:	19c6      	adds	r6, r0, r7
				fp->csect++;
 80038e8:	3701      	adds	r7, #1
 80038ea:	71e7      	strb	r7, [r4, #7]
 80038ec:	e000      	b.n	80038f0 <f_lseek+0xf0>
		 && !(fp->flag & FA_WRITE)
#endif
		) ofs = fp->fsize;

	ifptr = fp->fptr;
	fp->fptr = nsect = 0; fp->csect = 255;
 80038ee:	460e      	mov	r6, r1
				nsect += fp->csect;
				fp->csect++;
			}
		}
	}
	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 80038f0:	68a3      	ldr	r3, [r4, #8]
 80038f2:	05db      	lsls	r3, r3, #23
 80038f4:	0ddb      	lsrs	r3, r3, #23
 80038f6:	b313      	cbz	r3, 800393e <f_lseek+0x13e>
 80038f8:	69a2      	ldr	r2, [r4, #24]
 80038fa:	4296      	cmp	r6, r2
 80038fc:	d01f      	beq.n	800393e <f_lseek+0x13e>
#if !_FS_TINY
#if !_FS_READONLY
		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 80038fe:	79a3      	ldrb	r3, [r4, #6]
 8003900:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003904:	d00b      	beq.n	800391e <f_lseek+0x11e>
			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 8003906:	4621      	mov	r1, r4
 8003908:	f851 3b24 	ldr.w	r3, [r1], #36
 800390c:	7858      	ldrb	r0, [r3, #1]
 800390e:	2301      	movs	r3, #1
 8003910:	f7fe fea8 	bl	8002664 <disk_write>
 8003914:	79a3      	ldrb	r3, [r4, #6]
 8003916:	b960      	cbnz	r0, 8003932 <f_lseek+0x132>
				ABORT(fp->fs, FR_DISK_ERR);
			fp->flag &= ~FA__DIRTY;
 8003918:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800391c:	71a3      	strb	r3, [r4, #6]
		}
#endif
		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 800391e:	4621      	mov	r1, r4
 8003920:	f851 3b24 	ldr.w	r3, [r1], #36
 8003924:	4632      	mov	r2, r6
 8003926:	7858      	ldrb	r0, [r3, #1]
 8003928:	2301      	movs	r3, #1
 800392a:	f7fe fe8b 	bl	8002644 <disk_read>
 800392e:	b128      	cbz	r0, 800393c <f_lseek+0x13c>
			ABORT(fp->fs, FR_DISK_ERR);
 8003930:	79a3      	ldrb	r3, [r4, #6]
 8003932:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003936:	71a3      	strb	r3, [r4, #6]
 8003938:	2501      	movs	r5, #1
 800393a:	e00b      	b.n	8003954 <f_lseek+0x154>
#endif
		fp->dsect = nsect;
 800393c:	61a6      	str	r6, [r4, #24]
	}
#if !_FS_READONLY
	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 800393e:	68a3      	ldr	r3, [r4, #8]
 8003940:	68e2      	ldr	r2, [r4, #12]
 8003942:	4293      	cmp	r3, r2
 8003944:	d906      	bls.n	8003954 <f_lseek+0x154>
		fp->fsize = fp->fptr;
 8003946:	60e3      	str	r3, [r4, #12]
		fp->flag |= FA__WRITTEN;
 8003948:	79a3      	ldrb	r3, [r4, #6]
 800394a:	f043 0320 	orr.w	r3, r3, #32
 800394e:	71a3      	strb	r3, [r4, #6]
 8003950:	e000      	b.n	8003954 <f_lseek+0x154>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8003952:	2502      	movs	r5, #2
		fp->flag |= FA__WRITTEN;
	}
#endif

	LEAVE_FF(fp->fs, res);
}
 8003954:	4628      	mov	r0, r5
 8003956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003958 <f_opendir>:

FRESULT f_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const XCHAR *path	/* Pointer to the directory path */
)
{
 8003958:	b510      	push	{r4, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	4604      	mov	r4, r0
 800395e:	a806      	add	r0, sp, #24
 8003960:	f840 1d14 	str.w	r1, [r0, #-20]!
	FRESULT res;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj->fs, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	4621      	mov	r1, r4
 8003968:	f7fe ff52 	bl	8002810 <auto_mount>
	if (res == FR_OK) {
 800396c:	bb18      	cbnz	r0, 80039b6 <f_opendir+0x5e>
		INITBUF((*dj), sfn, lfn);
 800396e:	ab03      	add	r3, sp, #12
 8003970:	61a3      	str	r3, [r4, #24]
		res = follow_path(dj, path);			/* Follow the path to the directory */
 8003972:	4620      	mov	r0, r4
 8003974:	9901      	ldr	r1, [sp, #4]
 8003976:	f7ff fbd9 	bl	800312c <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800397a:	b9b8      	cbnz	r0, 80039ac <f_opendir+0x54>
			dir = dj->dir;
 800397c:	6963      	ldr	r3, [r4, #20]
			if (dir) {							/* It is not the root dir */
 800397e:	b173      	cbz	r3, 800399e <f_opendir+0x46>
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 8003980:	7ada      	ldrb	r2, [r3, #11]
 8003982:	f012 0f10 	tst.w	r2, #16
 8003986:	d015      	beq.n	80039b4 <f_opendir+0x5c>
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8003988:	7d59      	ldrb	r1, [r3, #21]
 800398a:	7d1a      	ldrb	r2, [r3, #20]
 800398c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003990:	7ed9      	ldrb	r1, [r3, #27]
 8003992:	7e9b      	ldrb	r3, [r3, #26]
 8003994:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003998:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800399c:	60a3      	str	r3, [r4, #8]
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 800399e:	6823      	ldr	r3, [r4, #0]
				res = dir_seek(dj, 0);			/* Rewind dir */
 80039a0:	4620      	mov	r0, r4
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 80039a2:	88db      	ldrh	r3, [r3, #6]
				res = dir_seek(dj, 0);			/* Rewind dir */
 80039a4:	2100      	movs	r1, #0
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				dj->id = dj->fs->id;
 80039a6:	80a3      	strh	r3, [r4, #4]
				res = dir_seek(dj, 0);			/* Rewind dir */
 80039a8:	f7ff f93a 	bl	8002c20 <dir_seek>
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80039ac:	2804      	cmp	r0, #4
 80039ae:	bf08      	it	eq
 80039b0:	2005      	moveq	r0, #5
 80039b2:	e000      	b.n	80039b6 <f_opendir+0x5e>
			dir = dj->dir;
			if (dir) {							/* It is not the root dir */
				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
				} else {						/* The object is not a directory */
					res = FR_NO_PATH;
 80039b4:	2005      	movs	r0, #5
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}

	LEAVE_FF(dj->fs, res);
}
 80039b6:	b006      	add	sp, #24
 80039b8:	bd10      	pop	{r4, pc}

080039ba <f_readdir>:

FRESULT f_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 80039ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80039bc:	4604      	mov	r4, r0
 80039be:	460e      	mov	r6, r1
	FRESULT res;
	NAMEBUF(sfn, lfn);


	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 80039c0:	6800      	ldr	r0, [r0, #0]
 80039c2:	88a1      	ldrh	r1, [r4, #4]
 80039c4:	f7fe fee0 	bl	8002788 <validate>
	if (res == FR_OK) {
 80039c8:	4605      	mov	r5, r0
 80039ca:	b9e8      	cbnz	r0, 8003a08 <f_readdir+0x4e>
		INITBUF((*dj), sfn, lfn);
 80039cc:	ab01      	add	r3, sp, #4
 80039ce:	61a3      	str	r3, [r4, #24]
		if (!fno) {
 80039d0:	b926      	cbnz	r6, 80039dc <f_readdir+0x22>
			res = dir_seek(dj, 0);
 80039d2:	4620      	mov	r0, r4
 80039d4:	4629      	mov	r1, r5
 80039d6:	f7ff f923 	bl	8002c20 <dir_seek>
 80039da:	e014      	b.n	8003a06 <f_readdir+0x4c>
		} else {
			res = dir_read(dj);
 80039dc:	4620      	mov	r0, r4
 80039de:	f7ff fb27 	bl	8003030 <dir_read>
			if (res == FR_NO_FILE) {
 80039e2:	2804      	cmp	r0, #4
 80039e4:	d101      	bne.n	80039ea <f_readdir+0x30>
				dj->sect = 0;
 80039e6:	6125      	str	r5, [r4, #16]
 80039e8:	e000      	b.n	80039ec <f_readdir+0x32>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80039ea:	b960      	cbnz	r0, 8003a06 <f_readdir+0x4c>
				get_fileinfo(dj, fno);		/* Get the object information */
 80039ec:	4620      	mov	r0, r4
 80039ee:	4631      	mov	r1, r6
 80039f0:	f7fe fe73 	bl	80026da <get_fileinfo>
				res = dir_next(dj, FALSE);	/* Increment index for next */
 80039f4:	2100      	movs	r1, #0
 80039f6:	4620      	mov	r0, r4
 80039f8:	f7ff fa50 	bl	8002e9c <dir_next>
				if (res == FR_NO_FILE) {
 80039fc:	2804      	cmp	r0, #4
 80039fe:	d102      	bne.n	8003a06 <f_readdir+0x4c>
					dj->sect = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	e000      	b.n	8003a08 <f_readdir+0x4e>
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, fno);		/* Get the object information */
				res = dir_next(dj, FALSE);	/* Increment index for next */
				if (res == FR_NO_FILE) {
 8003a06:	4605      	mov	r5, r0
			}
		}
	}

	LEAVE_FF(dj->fs, res);
}
 8003a08:	4628      	mov	r0, r5
 8003a0a:	b004      	add	sp, #16
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}

08003a0e <f_stat>:

FRESULT f_stat (
	const XCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
 8003a0e:	b530      	push	{r4, r5, lr}
 8003a10:	b08d      	sub	sp, #52	; 0x34
 8003a12:	ab0c      	add	r3, sp, #48	; 0x30
 8003a14:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8003a18:	460c      	mov	r4, r1
	FRESULT res;
	DIR dj;
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	a902      	add	r1, sp, #8
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f7fe fef6 	bl	8002810 <auto_mount>
	if (res == FR_OK) {
 8003a24:	4605      	mov	r5, r0
 8003a26:	b978      	cbnz	r0, 8003a48 <f_stat+0x3a>
		INITBUF(dj, sfn, lfn);
 8003a28:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);	/* Follow the file path */
 8003a2a:	a802      	add	r0, sp, #8
 8003a2c:	9901      	ldr	r1, [sp, #4]
	NAMEBUF(sfn, lfn);


	res = auto_mount(&path, &dj.fs, 0);
	if (res == FR_OK) {
		INITBUF(dj, sfn, lfn);
 8003a2e:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003a30:	f7ff fb7c 	bl	800312c <follow_path>
		if (res == FR_OK) {				/* Follwo completed */
 8003a34:	4605      	mov	r5, r0
 8003a36:	b938      	cbnz	r0, 8003a48 <f_stat+0x3a>
			if (dj.dir)	/* Found an object */
 8003a38:	9b07      	ldr	r3, [sp, #28]
 8003a3a:	b123      	cbz	r3, 8003a46 <f_stat+0x38>
				get_fileinfo(&dj, fno);
 8003a3c:	a802      	add	r0, sp, #8
 8003a3e:	4621      	mov	r1, r4
 8003a40:	f7fe fe4b 	bl	80026da <get_fileinfo>
 8003a44:	e000      	b.n	8003a48 <f_stat+0x3a>
			else		/* It is root dir */
				res = FR_INVALID_NAME;
 8003a46:	2506      	movs	r5, #6
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003a48:	4628      	mov	r0, r5
 8003a4a:	b00d      	add	sp, #52	; 0x34
 8003a4c:	bd30      	pop	{r4, r5, pc}

08003a4e <f_getfree>:
FRESULT f_getfree (
	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
)
{
 8003a4e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a52:	ab02      	add	r3, sp, #8
 8003a54:	f843 0d04 	str.w	r0, [r3, #-4]!
 8003a58:	460d      	mov	r5, r1
 8003a5a:	4614      	mov	r4, r2
	UINT i;
	BYTE fat, *p;


	/* Get drive number */
	res = auto_mount(&path, fatfs, 0);
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	f7fe fed5 	bl	8002810 <auto_mount>
	if (res != FR_OK) LEAVE_FF(*fatfs, res);
 8003a66:	4606      	mov	r6, r0
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d160      	bne.n	8003b2e <f_getfree+0xe0>

	/* If number of free cluster is valid, return it without cluster scan. */
	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	f8d3 801c 	ldr.w	r8, [r3, #28]
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	f1a8 0102 	sub.w	r1, r8, #2
 8003a78:	428a      	cmp	r2, r1
 8003a7a:	d801      	bhi.n	8003a80 <f_getfree+0x32>
		*nclst = (*fatfs)->free_clust;
 8003a7c:	602a      	str	r2, [r5, #0]
		LEAVE_FF(*fatfs, FR_OK);
 8003a7e:	e056      	b.n	8003b2e <f_getfree+0xe0>
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
 8003a80:	f893 9000 	ldrb.w	r9, [r3]
	n = 0;
	if (fat == FS_FAT12) {
 8003a84:	f1b9 0f01 	cmp.w	r9, #1
 8003a88:	d114      	bne.n	8003ab4 <f_getfree+0x66>
 8003a8a:	f04f 0802 	mov.w	r8, #2
 8003a8e:	4607      	mov	r7, r0
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	4641      	mov	r1, r8
 8003a94:	f7ff f858 	bl	8002b48 <get_fat>
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 8003a98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a9c:	d042      	beq.n	8003b24 <f_getfree+0xd6>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 8003a9e:	2801      	cmp	r0, #1
 8003aa0:	d042      	beq.n	8003b28 <f_getfree+0xda>
			if (stat == 0) n++;
 8003aa2:	b900      	cbnz	r0, 8003aa6 <f_getfree+0x58>
 8003aa4:	3701      	adds	r7, #1
		} while (++clst < (*fatfs)->max_clust);
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	f108 0801 	add.w	r8, r8, #1
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4598      	cmp	r8, r3
 8003ab0:	d3ee      	bcc.n	8003a90 <f_getfree+0x42>
 8003ab2:	e02e      	b.n	8003b12 <f_getfree+0xc4>
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
 8003ab4:	f8d3 a020 	ldr.w	sl, [r3, #32]
		i = 0; p = 0;
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4603      	mov	r3, r0
		LEAVE_FF(*fatfs, FR_OK);
	}

	/* Get number of free clusters */
	fat = (*fatfs)->fs_type;
	n = 0;
 8003abc:	4607      	mov	r7, r0
	} else {
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
 8003abe:	b95a      	cbnz	r2, 8003ad8 <f_getfree+0x8a>
				res = move_window(*fatfs, sect++);
 8003ac0:	6820      	ldr	r0, [r4, #0]
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	f7ff f802 	bl	8002acc <move_window>
				if (res != FR_OK)
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	d12f      	bne.n	8003b2c <f_getfree+0xde>
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
 8003acc:	6823      	ldr	r3, [r4, #0]
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
				if (res != FR_OK)
					LEAVE_FF(*fatfs, res);
				p = (*fatfs)->win;
 8003ad2:	3330      	adds	r3, #48	; 0x30
				i = SS(*fatfs);
 8003ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
			}
			if (fat == FS_FAT16) {
 8003ad8:	f1b9 0f02 	cmp.w	r9, #2
 8003adc:	d108      	bne.n	8003af0 <f_getfree+0xa2>
				if (LD_WORD(p) == 0) n++;
 8003ade:	7858      	ldrb	r0, [r3, #1]
 8003ae0:	7819      	ldrb	r1, [r3, #0]
 8003ae2:	ea51 2100 	orrs.w	r1, r1, r0, lsl #8
 8003ae6:	bf08      	it	eq
 8003ae8:	3701      	addeq	r7, #1
				p += 2; i -= 2;
 8003aea:	3302      	adds	r3, #2
 8003aec:	3a02      	subs	r2, #2
 8003aee:	e00d      	b.n	8003b0c <f_getfree+0xbe>
			} else {
				if (LD_DWORD(p) == 0) n++;
 8003af0:	7899      	ldrb	r1, [r3, #2]
 8003af2:	78d8      	ldrb	r0, [r3, #3]
 8003af4:	0409      	lsls	r1, r1, #16
 8003af6:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
 8003afa:	7818      	ldrb	r0, [r3, #0]
 8003afc:	4301      	orrs	r1, r0
 8003afe:	7858      	ldrb	r0, [r3, #1]
 8003b00:	ea51 2000 	orrs.w	r0, r1, r0, lsl #8
 8003b04:	bf08      	it	eq
 8003b06:	3701      	addeq	r7, #1
				p += 4; i -= 4;
 8003b08:	3304      	adds	r3, #4
 8003b0a:	3a04      	subs	r2, #4
			}
		} while (--clst);
 8003b0c:	f1b8 0801 	subs.w	r8, r8, #1
 8003b10:	d1d5      	bne.n	8003abe <f_getfree+0x70>
	}
	(*fatfs)->free_clust = n;
 8003b12:	6823      	ldr	r3, [r4, #0]
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 8003b14:	f1b9 0f03 	cmp.w	r9, #3
				if (LD_DWORD(p) == 0) n++;
				p += 4; i -= 4;
			}
		} while (--clst);
	}
	(*fatfs)->free_clust = n;
 8003b18:	611f      	str	r7, [r3, #16]
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 8003b1a:	d101      	bne.n	8003b20 <f_getfree+0xd2>
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	729a      	strb	r2, [r3, #10]
	*nclst = n;
 8003b20:	602f      	str	r7, [r5, #0]

	LEAVE_FF(*fatfs, FR_OK);
 8003b22:	e004      	b.n	8003b2e <f_getfree+0xe0>
	n = 0;
	if (fat == FS_FAT12) {
		clst = 2;
		do {
			stat = get_fat(*fatfs, clst);
			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 8003b24:	2601      	movs	r6, #1
 8003b26:	e002      	b.n	8003b2e <f_getfree+0xe0>
			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 8003b28:	2602      	movs	r6, #2
 8003b2a:	e000      	b.n	8003b2e <f_getfree+0xe0>
		clst = (*fatfs)->max_clust;
		sect = (*fatfs)->fatbase;
		i = 0; p = 0;
		do {
			if (!i) {
				res = move_window(*fatfs, sect++);
 8003b2c:	4606      	mov	r6, r0
	(*fatfs)->free_clust = n;
	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
	*nclst = n;

	LEAVE_FF(*fatfs, FR_OK);
}
 8003b2e:	4630      	mov	r0, r6
 8003b30:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}

08003b34 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL *fp		/* Pointer to the file object */
)
{
 8003b34:	b570      	push	{r4, r5, r6, lr}
 8003b36:	4604      	mov	r4, r0
	FRESULT res;
	DWORD ncl;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 8003b38:	88a1      	ldrh	r1, [r4, #4]
 8003b3a:	6800      	ldr	r0, [r0, #0]
 8003b3c:	f7fe fe24 	bl	8002788 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8003b40:	4606      	mov	r6, r0
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d136      	bne.n	8003bb4 <f_truncate+0x80>
	if (fp->flag & FA__ERROR)			/* Check abort flag */
 8003b46:	79a3      	ldrb	r3, [r4, #6]
 8003b48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b4c:	d12f      	bne.n	8003bae <f_truncate+0x7a>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
 8003b4e:	f013 0f02 	tst.w	r3, #2
 8003b52:	d02e      	beq.n	8003bb2 <f_truncate+0x7e>
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
 8003b54:	68a5      	ldr	r5, [r4, #8]
 8003b56:	68e2      	ldr	r2, [r4, #12]
 8003b58:	42aa      	cmp	r2, r5
 8003b5a:	d92b      	bls.n	8003bb4 <f_truncate+0x80>
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA__WRITTEN;
 8003b5c:	f043 0320 	orr.w	r3, r3, #32
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);

	if (fp->fsize > fp->fptr) {
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 8003b60:	60e5      	str	r5, [r4, #12]
		fp->flag |= FA__WRITTEN;
 8003b62:	71a3      	strb	r3, [r4, #6]
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8003b64:	b935      	cbnz	r5, 8003b74 <f_truncate+0x40>
			res = remove_chain(fp->fs, fp->org_clust);
 8003b66:	6820      	ldr	r0, [r4, #0]
 8003b68:	6921      	ldr	r1, [r4, #16]
 8003b6a:	f7ff f96a 	bl	8002e42 <remove_chain>
			fp->org_clust = 0;
 8003b6e:	6125      	str	r5, [r4, #16]

	if (fp->fsize > fp->fptr) {
		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA__WRITTEN;
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(fp->fs, fp->org_clust);
 8003b70:	4606      	mov	r6, r0
 8003b72:	e016      	b.n	8003ba2 <f_truncate+0x6e>
			fp->org_clust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	6961      	ldr	r1, [r4, #20]
 8003b78:	f7fe ffe6 	bl	8002b48 <get_fat>
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003b7c:	f1b0 3fff 	cmp.w	r0, #4294967295
		fp->flag |= FA__WRITTEN;
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(fp->fs, fp->org_clust);
			fp->org_clust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
 8003b80:	4605      	mov	r5, r0
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003b82:	d019      	beq.n	8003bb8 <f_truncate+0x84>
			if (ncl == 1) res = FR_INT_ERR;
 8003b84:	2801      	cmp	r0, #1
 8003b86:	d11b      	bne.n	8003bc0 <f_truncate+0x8c>
 8003b88:	e018      	b.n	8003bbc <f_truncate+0x88>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
 8003b8a:	6961      	ldr	r1, [r4, #20]
 8003b8c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8003b90:	f7ff f88b 	bl	8002caa <put_fat>
				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 8003b94:	4606      	mov	r6, r0
 8003b96:	b928      	cbnz	r0, 8003ba4 <f_truncate+0x70>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7ff f951 	bl	8002e42 <remove_chain>
 8003ba0:	4606      	mov	r6, r0
			}
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;
 8003ba2:	b13e      	cbz	r6, 8003bb4 <f_truncate+0x80>
 8003ba4:	79a3      	ldrb	r3, [r4, #6]
 8003ba6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003baa:	71a3      	strb	r3, [r4, #6]
 8003bac:	e002      	b.n	8003bb4 <f_truncate+0x80>


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
	if (fp->flag & FA__ERROR)			/* Check abort flag */
		LEAVE_FF(fp->fs, FR_INT_ERR);
 8003bae:	2602      	movs	r6, #2
 8003bb0:	e000      	b.n	8003bb4 <f_truncate+0x80>
	if (!(fp->flag & FA_WRITE))			/* Check access mode */
		LEAVE_FF(fp->fs, FR_DENIED);
 8003bb2:	2607      	movs	r6, #7
		}
	}
	if (res != FR_OK) fp->flag |= FA__ERROR;

	LEAVE_FF(fp->fs, res);
}
 8003bb4:	4630      	mov	r0, r6
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
			res = remove_chain(fp->fs, fp->org_clust);
			fp->org_clust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(fp->fs, fp->curr_clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003bb8:	2601      	movs	r6, #1
 8003bba:	e7f3      	b.n	8003ba4 <f_truncate+0x70>
			if (ncl == 1) res = FR_INT_ERR;
 8003bbc:	2602      	movs	r6, #2
 8003bbe:	e7f1      	b.n	8003ba4 <f_truncate+0x70>
			if (res == FR_OK && ncl < fp->fs->max_clust) {
 8003bc0:	6820      	ldr	r0, [r4, #0]
 8003bc2:	69c3      	ldr	r3, [r0, #28]
 8003bc4:	429d      	cmp	r5, r3
 8003bc6:	d2f5      	bcs.n	8003bb4 <f_truncate+0x80>
 8003bc8:	e7df      	b.n	8003b8a <f_truncate+0x56>

08003bca <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const XCHAR *path		/* Pointer to the file or directory path */
)
{
 8003bca:	b530      	push	{r4, r5, lr}
 8003bcc:	b095      	sub	sp, #84	; 0x54
 8003bce:	ab14      	add	r3, sp, #80	; 0x50
 8003bd0:	f843 0d4c 	str.w	r0, [r3, #-76]!
	NAMEBUF(sfn, lfn);
	BYTE *dir;
	DWORD dclst;


	res = auto_mount(&path, &dj.fs, 1);
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	a90a      	add	r1, sp, #40	; 0x28
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f7fe fe19 	bl	8002810 <auto_mount>
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003bde:	4604      	mov	r4, r0
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d147      	bne.n	8003c74 <f_unlink+0xaa>

	INITBUF(dj, sfn, lfn);
 8003be4:	ab11      	add	r3, sp, #68	; 0x44
	res = follow_path(&dj, path);			/* Follow the file path */
 8003be6:	a80a      	add	r0, sp, #40	; 0x28
 8003be8:	9901      	ldr	r1, [sp, #4]


	res = auto_mount(&path, &dj.fs, 1);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);

	INITBUF(dj, sfn, lfn);
 8003bea:	9310      	str	r3, [sp, #64]	; 0x40
	res = follow_path(&dj, path);			/* Follow the file path */
 8003bec:	f7ff fa9e 	bl	800312c <follow_path>
	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	d13e      	bne.n	8003c74 <f_unlink+0xaa>

	dir = dj.dir;
 8003bf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (!dir)								/* Is it the root directory? */
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d036      	beq.n	8003c6a <f_unlink+0xa0>
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 8003bfc:	7ada      	ldrb	r2, [r3, #11]
 8003bfe:	f012 0f01 	tst.w	r2, #1
 8003c02:	d136      	bne.n	8003c72 <f_unlink+0xa8>
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8003c04:	7d19      	ldrb	r1, [r3, #20]
 8003c06:	7d5d      	ldrb	r5, [r3, #21]

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 8003c08:	f012 0f10 	tst.w	r2, #16
	dir = dj.dir;
	if (!dir)								/* Is it the root directory? */
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 8003c0c:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
 8003c10:	7ed9      	ldrb	r1, [r3, #27]
 8003c12:	7e9b      	ldrb	r3, [r3, #26]
 8003c14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c18:	ea43 4505 	orr.w	r5, r3, r5, lsl #16

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 8003c1c:	d014      	beq.n	8003c48 <f_unlink+0x7e>
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 8003c1e:	2d01      	cmp	r5, #1
 8003c20:	d925      	bls.n	8003c6e <f_unlink+0xa4>
		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
 8003c22:	a803      	add	r0, sp, #12
 8003c24:	a90a      	add	r1, sp, #40	; 0x28
 8003c26:	221c      	movs	r2, #28
 8003c28:	f7fe fd30 	bl	800268c <mem_cpy>
		sdj.sclust = dclst;
		res = dir_seek(&sdj, 0);
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	a803      	add	r0, sp, #12
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
 8003c30:	9505      	str	r5, [sp, #20]
		res = dir_seek(&sdj, 0);
 8003c32:	f7fe fff5 	bl	8002c20 <dir_seek>
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003c36:	4604      	mov	r4, r0
 8003c38:	b9e0      	cbnz	r0, 8003c74 <f_unlink+0xaa>
		res = dir_read(&sdj);
 8003c3a:	a803      	add	r0, sp, #12
 8003c3c:	f7ff f9f8 	bl	8003030 <dir_read>
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 8003c40:	4604      	mov	r4, r0
 8003c42:	b1b0      	cbz	r0, 8003c72 <f_unlink+0xa8>
		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 8003c44:	2804      	cmp	r0, #4
 8003c46:	d115      	bne.n	8003c74 <f_unlink+0xaa>
	}

	res = dir_remove(&dj);					/* Remove directory entry */
 8003c48:	a80a      	add	r0, sp, #40	; 0x28
 8003c4a:	f7ff f9df 	bl	800300c <dir_remove>
	if (res == FR_OK) {
 8003c4e:	4604      	mov	r4, r0
 8003c50:	b980      	cbnz	r0, 8003c74 <f_unlink+0xaa>
		if (dclst)
 8003c52:	b12d      	cbz	r5, 8003c60 <f_unlink+0x96>
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
 8003c54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c56:	4629      	mov	r1, r5
 8003c58:	f7ff f8f3 	bl	8002e42 <remove_chain>
		if (res == FR_OK) res = sync(dj.fs);
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	b948      	cbnz	r0, 8003c74 <f_unlink+0xaa>
 8003c60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003c62:	f7ff fa0a 	bl	800307a <sync>
 8003c66:	4604      	mov	r4, r0
 8003c68:	e004      	b.n	8003c74 <f_unlink+0xaa>
		res = FR_INVALID_NAME;
	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */

	dir = dj.dir;
	if (!dir)								/* Is it the root directory? */
		LEAVE_FF(dj.fs, FR_INVALID_NAME);
 8003c6a:	2406      	movs	r4, #6
 8003c6c:	e002      	b.n	8003c74 <f_unlink+0xaa>
	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
		LEAVE_FF(dj.fs, FR_DENIED);
	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);

	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 8003c6e:	2402      	movs	r4, #2
 8003c70:	e000      	b.n	8003c74 <f_unlink+0xaa>
		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
		sdj.sclust = dclst;
		res = dir_seek(&sdj, 0);
		if (res != FR_OK) LEAVE_FF(dj.fs, res);
		res = dir_read(&sdj);
		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 8003c72:	2407      	movs	r4, #7
			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
		if (res == FR_OK) res = sync(dj.fs);
	}

	LEAVE_FF(dj.fs, res);
}
 8003c74:	4620      	mov	r0, r4
 8003c76:	b015      	add	sp, #84	; 0x54
 8003c78:	bd30      	pop	{r4, r5, pc}

08003c7a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const XCHAR *path		/* Pointer to the directory path */
)
{
 8003c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c7e:	b08f      	sub	sp, #60	; 0x3c
 8003c80:	ab0e      	add	r3, sp, #56	; 0x38
 8003c82:	f843 0d2c 	str.w	r0, [r3, #-44]!
	NAMEBUF(sfn, lfn);
	BYTE *dir, n;
	DWORD dsect, dclst, pclst, tim;


	res = auto_mount(&path, &dj.fs, 1);
 8003c86:	4618      	mov	r0, r3
 8003c88:	a904      	add	r1, sp, #16
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f7fe fdc0 	bl	8002810 <auto_mount>
 8003c90:	4681      	mov	r9, r0
 8003c92:	4604      	mov	r4, r0
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003c94:	2800      	cmp	r0, #0
 8003c96:	f040 80be 	bne.w	8003e16 <f_mkdir+0x19c>

	INITBUF(dj, sfn, lfn);
 8003c9a:	ab0b      	add	r3, sp, #44	; 0x2c
	res = follow_path(&dj, path);			/* Follow the file path */
 8003c9c:	a804      	add	r0, sp, #16
 8003c9e:	9903      	ldr	r1, [sp, #12]


	res = auto_mount(&path, &dj.fs, 1);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);

	INITBUF(dj, sfn, lfn);
 8003ca0:	930a      	str	r3, [sp, #40]	; 0x28
	res = follow_path(&dj, path);			/* Follow the file path */
 8003ca2:	f7ff fa43 	bl	800312c <follow_path>
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 8003ca6:	4681      	mov	r9, r0
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	f000 80b2 	beq.w	8003e12 <f_mkdir+0x198>
	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
		res = FR_INVALID_NAME;
	if (res != FR_NO_FILE)					/* Any error occured */
 8003cae:	2804      	cmp	r0, #4
 8003cb0:	f040 80b1 	bne.w	8003e16 <f_mkdir+0x19c>
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
 8003cb4:	9804      	ldr	r0, [sp, #16]
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	f7ff f872 	bl	8002da0 <create_chain>
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
 8003cbc:	4605      	mov	r5, r0
 8003cbe:	2800      	cmp	r0, #0
 8003cc0:	f000 80ad 	beq.w	8003e1e <f_mkdir+0x1a4>
	if (dclst == 1) res = FR_INT_ERR;
 8003cc4:	2801      	cmp	r0, #1
 8003cc6:	f000 80ad 	beq.w	8003e24 <f_mkdir+0x1aa>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003cca:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003cce:	f000 80ac 	beq.w	8003e2a <f_mkdir+0x1b0>
 8003cd2:	e0ad      	b.n	8003e30 <f_mkdir+0x1b6>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);
 8003cd4:	9c04      	ldr	r4, [sp, #16]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7fe fcf2 	bl	80026c2 <clust2sect>

	dir = dj.fs->win;						/* Initialize the new directory table */
 8003cde:	f104 0630 	add.w	r6, r4, #48	; 0x30
	mem_set(dir, 0, SS(dj.fs));
 8003ce2:	4641      	mov	r1, r8
 8003ce4:	f44f 7200 	mov.w	r2, #512	; 0x200
	if (dclst == 1) res = FR_INT_ERR;
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
	dsect = clust2sect(dj.fs, dclst);
 8003ce8:	4607      	mov	r7, r0

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
 8003cea:	4630      	mov	r0, r6
 8003cec:	f7fe fcd6 	bl	800269c <mem_set>
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
 8003cf0:	2120      	movs	r1, #32
 8003cf2:	220b      	movs	r2, #11
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f7fe fcd1 	bl	800269c <mem_set>
	dir[DIR_Name] = '.';
 8003cfa:	f04f 092e 	mov.w	r9, #46	; 0x2e
	dir[DIR_Attr] = AM_DIR;
 8003cfe:	2310      	movs	r3, #16
 8003d00:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	dsect = clust2sect(dj.fs, dclst);

	dir = dj.fs->win;						/* Initialize the new directory table */
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
 8003d04:	f884 9030 	strb.w	r9, [r4, #48]	; 0x30
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
 8003d08:	f7fe fcbe 	bl	8002688 <get_fattime>
	ST_DWORD(dir+DIR_WrtTime, tim);
 8003d0c:	b283      	uxth	r3, r0
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f88d 3009 	strb.w	r3, [sp, #9]
 8003d14:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	ST_WORD(dir+DIR_FstClusLO, dclst);
 8003d18:	b2ab      	uxth	r3, r5
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	b2ea      	uxtb	r2, r5
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 8003d1e:	ea4f 4a10 	mov.w	sl, r0, lsr #16
	ST_WORD(dir+DIR_FstClusLO, dclst);
 8003d22:	f88d 300a 	strb.w	r3, [sp, #10]
 8003d26:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 8003d2a:	0c2b      	lsrs	r3, r5, #16
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 8003d2c:	fa5f f880 	uxtb.w	r8, r0
 8003d30:	ea4f 6b10 	mov.w	fp, r0, lsr #24
	ST_WORD(dir+DIR_FstClusLO, dclst);
 8003d34:	9200      	str	r2, [sp, #0]
 8003d36:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 8003d3a:	fa5f fa8a 	uxtb.w	sl, sl
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	9201      	str	r2, [sp, #4]
 8003d44:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8003d48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	4631      	mov	r1, r6
	mem_set(dir, 0, SS(dj.fs));
	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
 8003d50:	f884 8046 	strb.w	r8, [r4, #70]	; 0x46
 8003d54:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
 8003d58:	f884 b049 	strb.w	fp, [r4, #73]	; 0x49
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 8003d5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
	dir[DIR_Name] = '.';
	dir[DIR_Attr] = AM_DIR;
	tim = get_fattime();
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 8003d60:	f88d 300b 	strb.w	r3, [sp, #11]
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 8003d64:	f7fe fc92 	bl	800268c <mem_cpy>
	dir[33] = '.';
 8003d68:	f884 9051 	strb.w	r9, [r4, #81]	; 0x51
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 8003d6c:	9a04      	ldr	r2, [sp, #16]
	ST_DWORD(dir+DIR_WrtTime, tim);
	ST_WORD(dir+DIR_FstClusLO, dclst);
	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
	pclst = dj.sclust;
 8003d6e:	9b06      	ldr	r3, [sp, #24]
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 8003d70:	7811      	ldrb	r1, [r2, #0]
 8003d72:	2903      	cmp	r1, #3
 8003d74:	d103      	bne.n	8003d7e <f_mkdir+0x104>
 8003d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
		pclst = 0;
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bf08      	it	eq
 8003d7c:	2300      	moveq	r3, #0
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 8003d7e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8003d82:	0a1a      	lsrs	r2, r3, #8
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8003d8a:	0a1b      	lsrs	r3, r3, #8
	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
	dir[33] = '.';
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 8003d8c:	f884 206b 	strb.w	r2, [r4, #107]	; 0x6b
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 8003d90:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 8003d94:	2400      	movs	r4, #0
 8003d96:	e011      	b.n	8003dbc <f_mkdir+0x142>
		dj.fs->winsect = dsect++;
		dj.fs->wflag = 1;
 8003d98:	2301      	movs	r3, #1
		res = move_window(dj.fs, 0);
 8003d9a:	2100      	movs	r1, #0
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
		dj.fs->winsect = dsect++;
 8003d9c:	62c7      	str	r7, [r0, #44]	; 0x2c
		dj.fs->wflag = 1;
 8003d9e:	7103      	strb	r3, [r0, #4]
		res = move_window(dj.fs, 0);
 8003da0:	f7fe fe94 	bl	8002acc <move_window>
 8003da4:	4601      	mov	r1, r0
 8003da6:	4681      	mov	r9, r0
		if (res) LEAVE_FF(dj.fs, res);
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d134      	bne.n	8003e16 <f_mkdir+0x19c>
		mem_set(dir, 0, SS(dj.fs));
 8003dac:	4630      	mov	r0, r6
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	f7fe fc73 	bl	800269c <mem_set>
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 8003db6:	3401      	adds	r4, #1
		dj.fs->winsect = dsect++;
 8003db8:	3701      	adds	r7, #1
	pclst = dj.sclust;
	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
		pclst = 0;
	ST_WORD(dir+32+DIR_FstClusLO, pclst);
	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 8003dba:	b2e4      	uxtb	r4, r4
 8003dbc:	9804      	ldr	r0, [sp, #16]
 8003dbe:	7883      	ldrb	r3, [r0, #2]
 8003dc0:	42a3      	cmp	r3, r4
 8003dc2:	d8e9      	bhi.n	8003d98 <f_mkdir+0x11e>
		res = move_window(dj.fs, 0);
		if (res) LEAVE_FF(dj.fs, res);
		mem_set(dir, 0, SS(dj.fs));
	}

	res = dir_register(&dj);
 8003dc4:	a804      	add	r0, sp, #16
 8003dc6:	f7ff f8ed 	bl	8002fa4 <dir_register>
	if (res != FR_OK) {
 8003dca:	4681      	mov	r9, r0
 8003dcc:	b120      	cbz	r0, 8003dd8 <f_mkdir+0x15e>
		remove_chain(dj.fs, dclst);
 8003dce:	9804      	ldr	r0, [sp, #16]
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7ff f836 	bl	8002e42 <remove_chain>
 8003dd6:	e01e      	b.n	8003e16 <f_mkdir+0x19c>
	} else {
		dir = dj.dir;
 8003dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		dir[DIR_Attr] = AM_DIR;					/* Attribute */
 8003dda:	2210      	movs	r2, #16
 8003ddc:	72da      	strb	r2, [r3, #11]
		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 8003dde:	f883 8016 	strb.w	r8, [r3, #22]
 8003de2:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8003de6:	f883 a018 	strb.w	sl, [r3, #24]
 8003dea:	75da      	strb	r2, [r3, #23]
 8003dec:	f883 b019 	strb.w	fp, [r3, #25]
		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 8003df0:	9a00      	ldr	r2, [sp, #0]
 8003df2:	769a      	strb	r2, [r3, #26]
 8003df4:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8003df8:	76da      	strb	r2, [r3, #27]
		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 8003dfa:	9a01      	ldr	r2, [sp, #4]
 8003dfc:	751a      	strb	r2, [r3, #20]
 8003dfe:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003e02:	755a      	strb	r2, [r3, #21]
		dj.fs->wflag = 1;
 8003e04:	9804      	ldr	r0, [sp, #16]
 8003e06:	2301      	movs	r3, #1
 8003e08:	7103      	strb	r3, [r0, #4]
		res = sync(dj.fs);
 8003e0a:	f7ff f936 	bl	800307a <sync>
 8003e0e:	4681      	mov	r9, r0
 8003e10:	e001      	b.n	8003e16 <f_mkdir+0x19c>
	res = auto_mount(&path, &dj.fs, 1);
	if (res != FR_OK) LEAVE_FF(dj.fs, res);

	INITBUF(dj, sfn, lfn);
	res = follow_path(&dj, path);			/* Follow the file path */
	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 8003e12:	f04f 0908 	mov.w	r9, #8
		dj.fs->wflag = 1;
		res = sync(dj.fs);
	}

	LEAVE_FF(dj.fs, res);
}
 8003e16:	4648      	mov	r0, r9
 8003e18:	b00f      	add	sp, #60	; 0x3c
 8003e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (res != FR_NO_FILE)					/* Any error occured */
		LEAVE_FF(dj.fs, res);

	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
	res = FR_OK;
	if (dclst == 0) res = FR_DENIED;
 8003e1e:	f04f 0907 	mov.w	r9, #7
 8003e22:	e7f8      	b.n	8003e16 <f_mkdir+0x19c>
	if (dclst == 1) res = FR_INT_ERR;
 8003e24:	f04f 0902 	mov.w	r9, #2
 8003e28:	e7f5      	b.n	8003e16 <f_mkdir+0x19c>
	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8003e2a:	f04f 0901 	mov.w	r9, #1
 8003e2e:	e7f2      	b.n	8003e16 <f_mkdir+0x19c>
	if (res == FR_OK)
		res = move_window(dj.fs, 0);
 8003e30:	9804      	ldr	r0, [sp, #16]
 8003e32:	4621      	mov	r1, r4
 8003e34:	f7fe fe4a 	bl	8002acc <move_window>
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4681      	mov	r9, r0
	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f43f af49 	beq.w	8003cd4 <f_mkdir+0x5a>
 8003e42:	e7e8      	b.n	8003e16 <f_mkdir+0x19c>

08003e44 <f_chmod>:
FRESULT f_chmod (
	const XCHAR *path,	/* Pointer to the file path */
	BYTE value,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
 8003e44:	b530      	push	{r4, r5, lr}
 8003e46:	b08d      	sub	sp, #52	; 0x34
 8003e48:	ab0c      	add	r3, sp, #48	; 0x30
 8003e4a:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8003e4e:	460c      	mov	r4, r1
 8003e50:	4615      	mov	r5, r2
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
 8003e52:	4618      	mov	r0, r3
 8003e54:	a902      	add	r1, sp, #8
 8003e56:	2201      	movs	r2, #1
 8003e58:	f7fe fcda 	bl	8002810 <auto_mount>
	if (res == FR_OK) {
 8003e5c:	b9c0      	cbnz	r0, 8003e90 <f_chmod+0x4c>
		INITBUF(dj, sfn, lfn);
 8003e5e:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);		/* Follow the file path */
 8003e60:	a802      	add	r0, sp, #8
 8003e62:	9901      	ldr	r1, [sp, #4]
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INITBUF(dj, sfn, lfn);
 8003e64:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);		/* Follow the file path */
 8003e66:	f7ff f961 	bl	800312c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 8003e6a:	b988      	cbnz	r0, 8003e90 <f_chmod+0x4c>
			dir = dj.dir;
 8003e6c:	9b07      	ldr	r3, [sp, #28]
			if (!dir) {						/* Is it a root directory? */
 8003e6e:	b173      	cbz	r3, 8003e8e <f_chmod+0x4a>
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8003e70:	7ada      	ldrb	r2, [r3, #11]
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
			} else {						/* File or sub directory */
				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 8003e72:	f005 0527 	and.w	r5, r5, #39	; 0x27
				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 8003e76:	ea22 0205 	bic.w	r2, r2, r5
 8003e7a:	4025      	ands	r5, r4
 8003e7c:	ea42 0505 	orr.w	r5, r2, r5
 8003e80:	72dd      	strb	r5, [r3, #11]
				dj.fs->wflag = 1;
 8003e82:	9802      	ldr	r0, [sp, #8]
 8003e84:	2301      	movs	r3, #1
 8003e86:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
 8003e88:	f7ff f8f7 	bl	800307a <sync>
 8003e8c:	e000      	b.n	8003e90 <f_chmod+0x4c>
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {						/* Is it a root directory? */
				res = FR_INVALID_NAME;
 8003e8e:	2006      	movs	r0, #6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003e90:	b00d      	add	sp, #52	; 0x34
 8003e92:	bd30      	pop	{r4, r5, pc}

08003e94 <f_utime>:

FRESULT f_utime (
	const XCHAR *path,	/* Pointer to the file/directory name */
	const FILINFO *fno	/* Pointer to the timestamp to be set */
)
{
 8003e94:	b510      	push	{r4, lr}
 8003e96:	b08c      	sub	sp, #48	; 0x30
 8003e98:	ab0c      	add	r3, sp, #48	; 0x30
 8003e9a:	f843 0d2c 	str.w	r0, [r3, #-44]!
 8003e9e:	460c      	mov	r4, r1
	DIR dj;
	NAMEBUF(sfn, lfn);
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	a902      	add	r1, sp, #8
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f7fe fcb3 	bl	8002810 <auto_mount>
	if (res == FR_OK) {
 8003eaa:	b9c8      	cbnz	r0, 8003ee0 <f_utime+0x4c>
		INITBUF(dj, sfn, lfn);
 8003eac:	ab09      	add	r3, sp, #36	; 0x24
		res = follow_path(&dj, path);	/* Follow the file path */
 8003eae:	a802      	add	r0, sp, #8
 8003eb0:	9901      	ldr	r1, [sp, #4]
	BYTE *dir;


	res = auto_mount(&path, &dj.fs, 1);
	if (res == FR_OK) {
		INITBUF(dj, sfn, lfn);
 8003eb2:	9308      	str	r3, [sp, #32]
		res = follow_path(&dj, path);	/* Follow the file path */
 8003eb4:	f7ff f93a 	bl	800312c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
 8003eb8:	b990      	cbnz	r0, 8003ee0 <f_utime+0x4c>
			dir = dj.dir;
 8003eba:	9b07      	ldr	r3, [sp, #28]
			if (!dir) {				/* Root directory */
 8003ebc:	b17b      	cbz	r3, 8003ede <f_utime+0x4a>
				res = FR_INVALID_NAME;
			} else {				/* File or sub-directory */
				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 8003ebe:	88e2      	ldrh	r2, [r4, #6]
 8003ec0:	759a      	strb	r2, [r3, #22]
 8003ec2:	88e2      	ldrh	r2, [r4, #6]
 8003ec4:	0a12      	lsrs	r2, r2, #8
 8003ec6:	75da      	strb	r2, [r3, #23]
				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 8003ec8:	88a2      	ldrh	r2, [r4, #4]
 8003eca:	761a      	strb	r2, [r3, #24]
 8003ecc:	88a2      	ldrh	r2, [r4, #4]
 8003ece:	0a12      	lsrs	r2, r2, #8
 8003ed0:	765a      	strb	r2, [r3, #25]
				dj.fs->wflag = 1;
 8003ed2:	9802      	ldr	r0, [sp, #8]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	7103      	strb	r3, [r0, #4]
				res = sync(dj.fs);
 8003ed8:	f7ff f8cf 	bl	800307a <sync>
 8003edc:	e000      	b.n	8003ee0 <f_utime+0x4c>
		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
		if (res == FR_OK) {
			dir = dj.dir;
			if (!dir) {				/* Root directory */
				res = FR_INVALID_NAME;
 8003ede:	2006      	movs	r0, #6
			}
		}
	}

	LEAVE_FF(dj.fs, res);
}
 8003ee0:	b00c      	add	sp, #48	; 0x30
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <f_rename>:

FRESULT f_rename (
	const XCHAR *path_old,	/* Pointer to the old name */
	const XCHAR *path_new	/* Pointer to the new name */
)
{
 8003ee4:	b530      	push	{r4, r5, lr}
 8003ee6:	b09b      	sub	sp, #108	; 0x6c
 8003ee8:	9001      	str	r0, [sp, #4]
 8003eea:	460c      	mov	r4, r1
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
 8003eec:	ab17      	add	r3, sp, #92	; 0x5c
	res = auto_mount(&path_old, &dj_old.fs, 1);
 8003eee:	a801      	add	r0, sp, #4
 8003ef0:	a90a      	add	r1, sp, #40	; 0x28
 8003ef2:	2201      	movs	r2, #1
	NAMEBUF(sfn, lfn);
	BYTE buf[21], *dir;
	DWORD dw;


	INITBUF(dj_old, sfn, lfn);
 8003ef4:	9310      	str	r3, [sp, #64]	; 0x40
	res = auto_mount(&path_old, &dj_old.fs, 1);
 8003ef6:	f7fe fc8b 	bl	8002810 <auto_mount>
	if (res == FR_OK) {
 8003efa:	2800      	cmp	r0, #0
 8003efc:	d16e      	bne.n	8003fdc <f_rename+0xf8>
		dj_new.fs = dj_old.fs;
 8003efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		res = follow_path(&dj_old, path_old);	/* Check old object */
 8003f00:	a80a      	add	r0, sp, #40	; 0x28
 8003f02:	9901      	ldr	r1, [sp, #4]


	INITBUF(dj_old, sfn, lfn);
	res = auto_mount(&path_old, &dj_old.fs, 1);
	if (res == FR_OK) {
		dj_new.fs = dj_old.fs;
 8003f04:	9303      	str	r3, [sp, #12]
		res = follow_path(&dj_old, path_old);	/* Check old object */
 8003f06:	f7ff f911 	bl	800312c <follow_path>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
 8003f0a:	2800      	cmp	r0, #0
 8003f0c:	d166      	bne.n	8003fdc <f_rename+0xf8>

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 8003f0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003f10:	2900      	cmp	r1, #0
 8003f12:	d060      	beq.n	8003fd6 <f_rename+0xf2>
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 8003f14:	a811      	add	r0, sp, #68	; 0x44
 8003f16:	310b      	adds	r1, #11
 8003f18:	2215      	movs	r2, #21
 8003f1a:	f7fe fbb7 	bl	800268c <mem_cpy>

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
 8003f1e:	a803      	add	r0, sp, #12
 8003f20:	a90a      	add	r1, sp, #40	; 0x28
 8003f22:	221c      	movs	r2, #28
 8003f24:	f7fe fbb2 	bl	800268c <mem_cpy>
	res = follow_path(&dj_new, path_new);		/* Check new object */
 8003f28:	a803      	add	r0, sp, #12
 8003f2a:	4621      	mov	r1, r4
 8003f2c:	f7ff f8fe 	bl	800312c <follow_path>
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d052      	beq.n	8003fda <f_rename+0xf6>
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 8003f34:	2804      	cmp	r0, #4
 8003f36:	d151      	bne.n	8003fdc <f_rename+0xf8>
		res = dir_register(&dj_new);			/* Register the new object */
 8003f38:	a803      	add	r0, sp, #12
 8003f3a:	f7ff f833 	bl	8002fa4 <dir_register>
		if (res == FR_OK) {
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d14c      	bne.n	8003fdc <f_rename+0xf8>
			dir = dj_new.dir;					/* Copy object information into new entry */
 8003f42:	9c08      	ldr	r4, [sp, #32]
			mem_cpy(dir+13, buf+2, 19);
 8003f44:	2213      	movs	r2, #19
 8003f46:	f104 000d 	add.w	r0, r4, #13
 8003f4a:	f10d 0146 	add.w	r1, sp, #70	; 0x46
 8003f4e:	f7fe fb9d 	bl	800268c <mem_cpy>
			dir[DIR_Attr] = buf[0] | AM_ARC;
 8003f52:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
			dj_old.fs->wflag = 1;
 8003f56:	2201      	movs	r2, #1
	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
		res = dir_register(&dj_new);			/* Register the new object */
		if (res == FR_OK) {
			dir = dj_new.dir;					/* Copy object information into new entry */
			mem_cpy(dir+13, buf+2, 19);
			dir[DIR_Attr] = buf[0] | AM_ARC;
 8003f58:	f043 0320 	orr.w	r3, r3, #32
 8003f5c:	72e3      	strb	r3, [r4, #11]
			dj_old.fs->wflag = 1;
 8003f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f60:	711a      	strb	r2, [r3, #4]
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
 8003f62:	7ae3      	ldrb	r3, [r4, #11]
 8003f64:	f013 0f10 	tst.w	r3, #16
 8003f68:	d02d      	beq.n	8003fc6 <f_rename+0xe2>
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
 8003f6a:	7ea3      	ldrb	r3, [r4, #26]
 8003f6c:	7ee1      	ldrb	r1, [r4, #27]
 8003f6e:	7d62      	ldrb	r2, [r4, #21]
 8003f70:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8003f74:	7d23      	ldrb	r3, [r4, #20]
 8003f76:	9d03      	ldr	r5, [sp, #12]
 8003f78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003f7c:	4319      	orrs	r1, r3
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fe fb9f 	bl	80026c2 <clust2sect>
				if (!dw) {
 8003f84:	4601      	mov	r1, r0
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d02a      	beq.n	8003fe0 <f_rename+0xfc>
					res = FR_INT_ERR;
				} else {
					res = move_window(dj_new.fs, dw);
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f7fe fd9e 	bl	8002acc <move_window>
					dir = dj_new.fs->win+32;
 8003f90:	9b03      	ldr	r3, [sp, #12]
					if (res == FR_OK && dir[1] == '.') {
 8003f92:	bb18      	cbnz	r0, 8003fdc <f_rename+0xf8>
 8003f94:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
 8003f98:	2a2e      	cmp	r2, #46	; 0x2e
 8003f9a:	d114      	bne.n	8003fc6 <f_rename+0xe2>
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	2a03      	cmp	r2, #3
 8003fa0:	9a05      	ldr	r2, [sp, #20]
 8003fa2:	d103      	bne.n	8003fac <f_rename+0xc8>
 8003fa4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fa6:	428a      	cmp	r2, r1
 8003fa8:	bf08      	it	eq
 8003faa:	2200      	moveq	r2, #0
						ST_WORD(dir+DIR_FstClusLO, dw);
 8003fac:	0a11      	lsrs	r1, r2, #8
 8003fae:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 8003fb2:	0c12      	lsrs	r2, r2, #16
 8003fb4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8003fb8:	0a12      	lsrs	r2, r2, #8
 8003fba:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
						dj_new.fs->wflag = 1;
 8003fbe:	2201      	movs	r2, #1
				} else {
					res = move_window(dj_new.fs, dw);
					dir = dj_new.fs->win+32;
					if (res == FR_OK && dir[1] == '.') {
						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.sclust;
						ST_WORD(dir+DIR_FstClusLO, dw);
 8003fc0:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
						dj_new.fs->wflag = 1;
 8003fc4:	711a      	strb	r2, [r3, #4]
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj_old);			/* Remove old entry */
 8003fc6:	a80a      	add	r0, sp, #40	; 0x28
 8003fc8:	f7ff f820 	bl	800300c <dir_remove>
				if (res == FR_OK)
 8003fcc:	b930      	cbnz	r0, 8003fdc <f_rename+0xf8>
					res = sync(dj_old.fs);
 8003fce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003fd0:	f7ff f853 	bl	800307a <sync>
 8003fd4:	e002      	b.n	8003fdc <f_rename+0xf8>
		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
			res = FR_INVALID_NAME;
	}
	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */

	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 8003fd6:	2004      	movs	r0, #4
 8003fd8:	e000      	b.n	8003fdc <f_rename+0xf8>
	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */

	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
	res = follow_path(&dj_new, path_new);		/* Check new object */
	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 8003fda:	2008      	movs	r0, #8
			}
		}
	}

	LEAVE_FF(dj_old.fs, res);
}
 8003fdc:	b01b      	add	sp, #108	; 0x6c
 8003fde:	bd30      	pop	{r4, r5, pc}
			dir[DIR_Attr] = buf[0] | AM_ARC;
			dj_old.fs->wflag = 1;
			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
				if (!dw) {
					res = FR_INT_ERR;
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	e7fb      	b.n	8003fdc <f_rename+0xf8>

08003fe4 <NVIC_PriorityGroupConfig>:
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003fe4:	f040 60be 	orr.w	r0, r0, #99614720	; 0x5f00000
 8003fe8:	4b02      	ldr	r3, [pc, #8]	; (8003ff4 <NVIC_PriorityGroupConfig+0x10>)
 8003fea:	f440 2020 	orr.w	r0, r0, #655360	; 0xa0000
 8003fee:	60d8      	str	r0, [r3, #12]
}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000ed00 	.word	0xe000ed00

08003ff8 <NVIC_Init>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003ff8:	78c3      	ldrb	r3, [r0, #3]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *   the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003ffa:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003ffc:	b1eb      	cbz	r3, 800403a <NVIC_Init+0x42>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <NVIC_Init+0x5c>)
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004000:	7841      	ldrb	r1, [r0, #1]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004002:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004004:	7884      	ldrb	r4, [r0, #2]
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8004006:	43db      	mvns	r3, r3
 8004008:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800400c:	0a1b      	lsrs	r3, r3, #8
    tmppre = (0x4 - tmppriority);
 800400e:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8004012:	4091      	lsls	r1, r2
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 8004014:	220f      	movs	r2, #15
 8004016:	40da      	lsrs	r2, r3

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8004018:	4022      	ands	r2, r4
 800401a:	430a      	orrs	r2, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800401c:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <NVIC_Init+0x60>)
 800401e:	7801      	ldrb	r1, [r0, #0]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    tmppriority = tmppriority << 0x04;
 8004020:	0112      	lsls	r2, r2, #4
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8004022:	18cb      	adds	r3, r1, r3
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800402a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800402c:	2201      	movs	r2, #1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800402e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	fa12 f303 	lsls.w	r3, r2, r3
 8004038:	e007      	b.n	800404a <NVIC_Init+0x52>
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800403a:	7803      	ldrb	r3, [r0, #0]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800403c:	2201      	movs	r2, #1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800403e:	0959      	lsrs	r1, r3, #5
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	fa12 f303 	lsls.w	r3, r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8004048:	3120      	adds	r1, #32
 800404a:	4a03      	ldr	r2, [pc, #12]	; (8004058 <NVIC_Init+0x60>)
 800404c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004050:	bd10      	pop	{r4, pc}
 8004052:	bf00      	nop
 8004054:	e000ed00 	.word	0xe000ed00
 8004058:	e000e100 	.word	0xe000e100

0800405c <NVIC_SetVectorTable>:
{ 
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800405c:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
 8004060:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <NVIC_SetVectorTable+0x10>)
 8004066:	4301      	orrs	r1, r0
 8004068:	6099      	str	r1, [r3, #8]
}
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00

08004070 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <NVIC_SystemLPConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8004072:	b111      	cbz	r1, 800407a <NVIC_SystemLPConfig+0xa>
  {
    SCB->SCR |= LowPowerMode;
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	4310      	orrs	r0, r2
 8004078:	e002      	b.n	8004080 <NVIC_SystemLPConfig+0x10>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	ea22 0000 	bic.w	r0, r2, r0
 8004080:	6118      	str	r0, [r3, #16]
 8004082:	4770      	bx	lr
 8004084:	e000ed00 	.word	0xe000ed00

08004088 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <SysTick_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800408a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	bf0c      	ite	eq
 8004090:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8004094:	f022 0204 	bicne.w	r2, r2, #4
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	4770      	bx	lr
 800409c:	e000e010 	.word	0xe000e010

080040a0 <DMA_DeInit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 80040a0:	6802      	ldr	r2, [r0, #0]
 80040a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80040a6:	ea02 0303 	and.w	r3, r2, r3
 80040aa:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	6003      	str	r3, [r0, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 80040b0:	6043      	str	r3, [r0, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 80040b2:	6083      	str	r3, [r0, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 80040b4:	60c3      	str	r3, [r0, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 80040b6:	4b2e      	ldr	r3, [pc, #184]	; (8004170 <DMA_DeInit+0xd0>)
 80040b8:	4298      	cmp	r0, r3
 80040ba:	d029      	beq.n	8004110 <DMA_DeInit+0x70>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel2)
 80040bc:	4b2d      	ldr	r3, [pc, #180]	; (8004174 <DMA_DeInit+0xd4>)
 80040be:	4298      	cmp	r0, r3
 80040c0:	d030      	beq.n	8004124 <DMA_DeInit+0x84>
  {
    /* Reset interrupt pending bits for DMA1 Channel2 */
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel3)
 80040c2:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <DMA_DeInit+0xd8>)
 80040c4:	4298      	cmp	r0, r3
 80040c6:	d037      	beq.n	8004138 <DMA_DeInit+0x98>
  {
    /* Reset interrupt pending bits for DMA1 Channel3 */
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel4)
 80040c8:	4b2c      	ldr	r3, [pc, #176]	; (800417c <DMA_DeInit+0xdc>)
 80040ca:	4298      	cmp	r0, r3
 80040cc:	d03e      	beq.n	800414c <DMA_DeInit+0xac>
  {
    /* Reset interrupt pending bits for DMA1 Channel4 */
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
  }
  else if (DMAy_Channelx == DMA1_Channel5)
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <DMA_DeInit+0xe0>)
 80040d0:	4298      	cmp	r0, r3
 80040d2:	d106      	bne.n	80040e2 <DMA_DeInit+0x42>
  {
    /* Reset interrupt pending bits for DMA1 Channel5 */
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 80040d4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80040d8:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 80040dc:	f843 2c54 	str.w	r2, [r3, #-84]
 80040e0:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel6)
 80040e2:	4b28      	ldr	r3, [pc, #160]	; (8004184 <DMA_DeInit+0xe4>)
 80040e4:	4298      	cmp	r0, r3
 80040e6:	d106      	bne.n	80040f6 <DMA_DeInit+0x56>
  {
    /* Reset interrupt pending bits for DMA1 Channel6 */
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 80040e8:	f853 2c68 	ldr.w	r2, [r3, #-104]
 80040ec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80040f0:	f843 2c68 	str.w	r2, [r3, #-104]
 80040f4:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA1_Channel7)
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <DMA_DeInit+0xe8>)
 80040f8:	4298      	cmp	r0, r3
 80040fa:	d106      	bne.n	800410a <DMA_DeInit+0x6a>
  {
    /* Reset interrupt pending bits for DMA1 Channel7 */
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 80040fc:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8004100:	f042 6270 	orr.w	r2, r2, #251658240	; 0xf000000
 8004104:	f843 2c7c 	str.w	r2, [r3, #-124]
 8004108:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel1)
 800410a:	4b20      	ldr	r3, [pc, #128]	; (800418c <DMA_DeInit+0xec>)
 800410c:	4298      	cmp	r0, r3
 800410e:	d106      	bne.n	800411e <DMA_DeInit+0x7e>
  {
    /* Reset interrupt pending bits for DMA2 Channel1 */
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8004110:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8004114:	f042 020f 	orr.w	r2, r2, #15
 8004118:	f843 2c04 	str.w	r2, [r3, #-4]
 800411c:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel2)
 800411e:	4b1c      	ldr	r3, [pc, #112]	; (8004190 <DMA_DeInit+0xf0>)
 8004120:	4298      	cmp	r0, r3
 8004122:	d106      	bne.n	8004132 <DMA_DeInit+0x92>
  {
    /* Reset interrupt pending bits for DMA2 Channel2 */
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8004124:	f853 2c18 	ldr.w	r2, [r3, #-24]
 8004128:	f042 02f0 	orr.w	r2, r2, #240	; 0xf0
 800412c:	f843 2c18 	str.w	r2, [r3, #-24]
 8004130:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel3)
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <DMA_DeInit+0xf4>)
 8004134:	4298      	cmp	r0, r3
 8004136:	d106      	bne.n	8004146 <DMA_DeInit+0xa6>
  {
    /* Reset interrupt pending bits for DMA2 Channel3 */
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8004138:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800413c:	f442 6270 	orr.w	r2, r2, #3840	; 0xf00
 8004140:	f843 2c2c 	str.w	r2, [r3, #-44]
 8004144:	4770      	bx	lr
  }
  else if (DMAy_Channelx == DMA2_Channel4)
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <DMA_DeInit+0xf8>)
 8004148:	4298      	cmp	r0, r3
 800414a:	d106      	bne.n	800415a <DMA_DeInit+0xba>
  {
    /* Reset interrupt pending bits for DMA2 Channel4 */
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 800414c:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8004150:	f442 4270 	orr.w	r2, r2, #61440	; 0xf000
 8004154:	f843 2c40 	str.w	r2, [r3, #-64]
 8004158:	4770      	bx	lr
  }
  else
  { 
    if (DMAy_Channelx == DMA2_Channel5)
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <DMA_DeInit+0xfc>)
 800415c:	4298      	cmp	r0, r3
 800415e:	d105      	bne.n	800416c <DMA_DeInit+0xcc>
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8004160:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004164:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
 8004168:	f843 2c54 	str.w	r2, [r3, #-84]
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40020008 	.word	0x40020008
 8004174:	4002001c 	.word	0x4002001c
 8004178:	40020030 	.word	0x40020030
 800417c:	40020044 	.word	0x40020044
 8004180:	40020058 	.word	0x40020058
 8004184:	4002006c 	.word	0x4002006c
 8004188:	40020080 	.word	0x40020080
 800418c:	40020408 	.word	0x40020408
 8004190:	4002041c 	.word	0x4002041c
 8004194:	40020430 	.word	0x40020430
 8004198:	40020444 	.word	0x40020444
 800419c:	40020458 	.word	0x40020458

080041a0 <DMA_Init>:
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80041a0:	688a      	ldr	r2, [r1, #8]
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *   contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 80041a2:	b510      	push	{r4, lr}
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80041a4:	6a0c      	ldr	r4, [r1, #32]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 80041a6:	6803      	ldr	r3, [r0, #0]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80041a8:	ea44 0202 	orr.w	r2, r4, r2
 80041ac:	690c      	ldr	r4, [r1, #16]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80041ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80041b2:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80041b4:	694c      	ldr	r4, [r1, #20]

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 80041b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80041ba:	4322      	orrs	r2, r4
 80041bc:	698c      	ldr	r4, [r1, #24]
 80041be:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80041c0:	69cc      	ldr	r4, [r1, #28]
 80041c2:	4322      	orrs	r2, r4
 80041c4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80041c6:	4322      	orrs	r2, r4
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 80041c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80041ca:	4322      	orrs	r2, r4
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 80041cc:	ea42 0303 	orr.w	r3, r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 80041d0:	6003      	str	r3, [r0, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 80041d2:	68cb      	ldr	r3, [r1, #12]
 80041d4:	6043      	str	r3, [r0, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80041d6:	680b      	ldr	r3, [r1, #0]
 80041d8:	6083      	str	r3, [r0, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 80041da:	684b      	ldr	r3, [r1, #4]
 80041dc:	60c3      	str	r3, [r0, #12]
}
 80041de:	bd10      	pop	{r4, pc}

080041e0 <DMA_StructInit>:
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
/*-------------- Reset DMA init structure parameters values ------------------*/
  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	6003      	str	r3, [r0, #0]
  /* Initialize the DMA_MemoryBaseAddr member */
  DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 80041e4:	6043      	str	r3, [r0, #4]
  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 80041e6:	6083      	str	r3, [r0, #8]
  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 80041e8:	60c3      	str	r3, [r0, #12]
  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80041ea:	6103      	str	r3, [r0, #16]
  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 80041ec:	6143      	str	r3, [r0, #20]
  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80041ee:	6183      	str	r3, [r0, #24]
  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80041f0:	61c3      	str	r3, [r0, #28]
  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 80041f2:	6203      	str	r3, [r0, #32]
  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 80041f4:	6243      	str	r3, [r0, #36]	; 0x24
  /* Initialize the DMA_M2M member */
  DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 80041f6:	6283      	str	r3, [r0, #40]	; 0x28
}
 80041f8:	4770      	bx	lr

080041fa <DMA_Cmd>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80041fa:	b119      	cbz	r1, 8004204 <DMA_Cmd+0xa>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 80041fc:	6803      	ldr	r3, [r0, #0]
 80041fe:	f043 0301 	orr.w	r3, r3, #1
 8004202:	e004      	b.n	800420e <DMA_Cmd+0x14>
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800420a:	ea02 0303 	and.w	r3, r2, r3
 800420e:	6003      	str	r3, [r0, #0]
 8004210:	4770      	bx	lr

08004212 <DMA_ITConfig>:
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004212:	b112      	cbz	r2, 800421a <DMA_ITConfig+0x8>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8004214:	6803      	ldr	r3, [r0, #0]
 8004216:	4319      	orrs	r1, r3
 8004218:	e002      	b.n	8004220 <DMA_ITConfig+0xe>
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 800421a:	6803      	ldr	r3, [r0, #0]
 800421c:	ea23 0101 	bic.w	r1, r3, r1
 8004220:	6001      	str	r1, [r0, #0]
 8004222:	4770      	bx	lr

08004224 <DMA_SetCurrDataCounter>:
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DataNumber;  
 8004224:	6041      	str	r1, [r0, #4]
}
 8004226:	4770      	bx	lr

08004228 <DMA_GetCurrDataCounter>:
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
{
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  /* Return the number of remaining data units for DMAy Channelx */
  return ((uint16_t)(DMAy_Channelx->CNDTR));
 8004228:	6840      	ldr	r0, [r0, #4]
}
 800422a:	b280      	uxth	r0, r0
 800422c:	4770      	bx	lr

0800422e <DMA_GetFlagStatus>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Calculate the used DMA */
  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800422e:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8004232:	bf14      	ite	ne
 8004234:	4b03      	ldrne	r3, [pc, #12]	; (8004244 <DMA_GetFlagStatus+0x16>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 8004236:	4b04      	ldreq	r3, [pc, #16]	; (8004248 <DMA_GetFlagStatus+0x1a>)
 8004238:	681b      	ldr	r3, [r3, #0]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800423a:	4203      	tst	r3, r0
    bitstatus = RESET;
  }
  
  /* Return the DMA_FLAG status */
  return  bitstatus;
}
 800423c:	bf0c      	ite	eq
 800423e:	2000      	moveq	r0, #0
 8004240:	2001      	movne	r0, #1
 8004242:	4770      	bx	lr
 8004244:	40020400 	.word	0x40020400
 8004248:	40020000 	.word	0x40020000

0800424c <DMA_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
  /* Calculate the used DMA */

  if ((DMA_FLAG & FLAG_Mask) != (uint32_t)RESET)
 800424c:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  {
    /* Clear the selected DMA flags */
    DMA2->IFCR = DMA_FLAG;
 8004250:	bf14      	ite	ne
 8004252:	4b02      	ldrne	r3, [pc, #8]	; (800425c <DMA_ClearFlag+0x10>)
  }
  else
  {
    /* Clear the selected DMA flags */
    DMA1->IFCR = DMA_FLAG;
 8004254:	4b02      	ldreq	r3, [pc, #8]	; (8004260 <DMA_ClearFlag+0x14>)
 8004256:	6058      	str	r0, [r3, #4]
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40020400 	.word	0x40020400
 8004260:	40020000 	.word	0x40020000

08004264 <DMA_GetITStatus>:
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
 8004264:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR ;
 8004268:	bf14      	ite	ne
 800426a:	4b04      	ldrne	r3, [pc, #16]	; (800427c <DMA_GetITStatus+0x18>)
  }
  else
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR ;
 800426c:	4b04      	ldreq	r3, [pc, #16]	; (8004280 <DMA_GetITStatus+0x1c>)
 800426e:	681b      	ldr	r3, [r3, #0]

  /* Check the status of the specified DMA interrupt */
  if ((tmpreg & DMA_IT) != (uint32_t)RESET)
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8004270:	4203      	tst	r3, r0
    /* DMA_IT is reset */
    bitstatus = RESET;
  }
  /* Return the DMA_IT status */
  return  bitstatus;
}
 8004272:	bf0c      	ite	eq
 8004274:	2000      	moveq	r0, #0
 8004276:	2001      	movne	r0, #1
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40020400 	.word	0x40020400
 8004280:	40020000 	.word	0x40020000

08004284 <DMA_ClearITPendingBit>:
{
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Calculate the used DMA */
  if ((DMA_IT & FLAG_Mask) != (uint32_t)RESET)
 8004284:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA2->IFCR = DMA_IT;
 8004288:	bf14      	ite	ne
 800428a:	4b02      	ldrne	r3, [pc, #8]	; (8004294 <DMA_ClearITPendingBit+0x10>)
  }
  else
  {
    /* Clear the selected DMA interrupt pending bits */
    DMA1->IFCR = DMA_IT;
 800428c:	4b02      	ldreq	r3, [pc, #8]	; (8004298 <DMA_ClearITPendingBit+0x14>)
 800428e:	6058      	str	r0, [r3, #4]
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40020400 	.word	0x40020400
 8004298:	40020000 	.word	0x40020000

0800429c <FLASH_SetLatency>:
  
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Read the ACR register */
  tmpreg = FLASH->ACR;  
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <FLASH_SetLatency+0x10>)
 800429e:	681a      	ldr	r2, [r3, #0]
  
  /* Sets the Latency value */
  tmpreg &= ACR_LATENCY_Mask;
 80042a0:	f002 0238 	and.w	r2, r2, #56	; 0x38
  tmpreg |= FLASH_Latency;
 80042a4:	ea40 0202 	orr.w	r2, r0, r2
  
  /* Write the ACR register */
  FLASH->ACR = tmpreg;
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	4770      	bx	lr
 80042ac:	40022000 	.word	0x40022000

080042b0 <FLASH_HalfCycleAccessCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <FLASH_HalfCycleAccessCmd+0x14>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	f022 0208 	bic.w	r2, r2, #8
 80042b8:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	ea40 0202 	orr.w	r2, r0, r2
 80042c0:	601a      	str	r2, [r3, #0]
}
 80042c2:	4770      	bx	lr
 80042c4:	40022000 	.word	0x40022000

080042c8 <FLASH_PrefetchBufferCmd>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 80042c8:	4b04      	ldr	r3, [pc, #16]	; (80042dc <FLASH_PrefetchBufferCmd+0x14>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f022 0210 	bic.w	r2, r2, #16
 80042d0:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	ea40 0202 	orr.w	r2, r0, r2
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	4770      	bx	lr
 80042dc:	40022000 	.word	0x40022000

080042e0 <FLASH_Unlock>:
  * @retval None
  */
void FLASH_Unlock(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <FLASH_Unlock+0xc>)
 80042e2:	4a03      	ldr	r2, [pc, #12]	; (80042f0 <FLASH_Unlock+0x10>)
 80042e4:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80042e6:	4a03      	ldr	r2, [pc, #12]	; (80042f4 <FLASH_Unlock+0x14>)
 80042e8:	605a      	str	r2, [r3, #4]
#ifdef STM32F10X_XL
  /* Authorize the FPEC of Bank2 Access */
  FLASH->KEYR2 = FLASH_KEY1;
  FLASH->KEYR2 = FLASH_KEY2;
#endif /* STM32F10X_XL */
}
 80042ea:	4770      	bx	lr
 80042ec:	40022000 	.word	0x40022000
 80042f0:	45670123 	.word	0x45670123
 80042f4:	cdef89ab 	.word	0xcdef89ab

080042f8 <FLASH_UnlockBank1>:
  * @retval None
  */
void FLASH_UnlockBank1(void)
{
  /* Authorize the FPEC of Bank1 Access */
  FLASH->KEYR = FLASH_KEY1;
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <FLASH_UnlockBank1+0xc>)
 80042fa:	4a03      	ldr	r2, [pc, #12]	; (8004308 <FLASH_UnlockBank1+0x10>)
 80042fc:	605a      	str	r2, [r3, #4]
  FLASH->KEYR = FLASH_KEY2;
 80042fe:	4a03      	ldr	r2, [pc, #12]	; (800430c <FLASH_UnlockBank1+0x14>)
 8004300:	605a      	str	r2, [r3, #4]
}
 8004302:	4770      	bx	lr
 8004304:	40022000 	.word	0x40022000
 8004308:	45670123 	.word	0x45670123
 800430c:	cdef89ab 	.word	0xcdef89ab

08004310 <FLASH_Lock>:
  * @retval None
  */
void FLASH_Lock(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8004310:	4b02      	ldr	r3, [pc, #8]	; (800431c <FLASH_Lock+0xc>)
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004318:	611a      	str	r2, [r3, #16]

#ifdef STM32F10X_XL
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
  FLASH->CR2 |= CR_LOCK_Set;
#endif /* STM32F10X_XL */
}
 800431a:	4770      	bx	lr
 800431c:	40022000 	.word	0x40022000

08004320 <FLASH_LockBank1>:
  * @retval None
  */
void FLASH_LockBank1(void)
{
  /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
  FLASH->CR |= CR_LOCK_Set;
 8004320:	4b02      	ldr	r3, [pc, #8]	; (800432c <FLASH_LockBank1+0xc>)
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004328:	611a      	str	r2, [r3, #16]
}
 800432a:	4770      	bx	lr
 800432c:	40022000 	.word	0x40022000

08004330 <FLASH_GetUserOptionByte>:
  *   and RST_STDBY(Bit2).
  */
uint32_t FLASH_GetUserOptionByte(void)
{
  /* Return the User Option Byte */
  return (uint32_t)(FLASH->OBR >> 2);
 8004330:	4b01      	ldr	r3, [pc, #4]	; (8004338 <FLASH_GetUserOptionByte+0x8>)
 8004332:	69d8      	ldr	r0, [r3, #28]
}
 8004334:	0880      	lsrs	r0, r0, #2
 8004336:	4770      	bx	lr
 8004338:	40022000 	.word	0x40022000

0800433c <FLASH_GetWriteProtectionOptionByte>:
  * @retval The FLASH Write Protection  Option Bytes Register value
  */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
  /* Return the Falsh write protection Register value */
  return (uint32_t)(FLASH->WRPR);
 800433c:	4b01      	ldr	r3, [pc, #4]	; (8004344 <FLASH_GetWriteProtectionOptionByte+0x8>)
 800433e:	6a18      	ldr	r0, [r3, #32]
}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40022000 	.word	0x40022000

08004348 <FLASH_GetReadOutProtectionStatus>:
  * @retval FLASH ReadOut Protection Status(SET or RESET)
  */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
  FlagStatus readoutstatus = RESET;
  if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <FLASH_GetReadOutProtectionStatus+0xc>)
 800434a:	69d8      	ldr	r0, [r3, #28]
  else
  {
    readoutstatus = RESET;
  }
  return readoutstatus;
}
 800434c:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40022000 	.word	0x40022000

08004358 <FLASH_GetPrefetchBufferStatus>:
  */
FlagStatus FLASH_GetPrefetchBufferStatus(void)
{
  FlagStatus bitstatus = RESET;
  
  if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
 8004358:	4b02      	ldr	r3, [pc, #8]	; (8004364 <FLASH_GetPrefetchBufferStatus+0xc>)
 800435a:	6818      	ldr	r0, [r3, #0]
  {
    bitstatus = RESET;
  }
  /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
  return bitstatus; 
}
 800435c:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40022000 	.word	0x40022000

08004368 <FLASH_ITConfig>:
  * @param  NewState: new state of the specified Flash interrupts.
  *   This parameter can be: ENABLE or DISABLE.      
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <FLASH_ITConfig+0x14>)
#else
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800436a:	b111      	cbz	r1, 8004372 <FLASH_ITConfig+0xa>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	4310      	orrs	r0, r2
 8004370:	e002      	b.n	8004378 <FLASH_ITConfig+0x10>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8004372:	691a      	ldr	r2, [r3, #16]
 8004374:	ea22 0000 	bic.w	r0, r2, r0
 8004378:	6118      	str	r0, [r3, #16]
 800437a:	4770      	bx	lr
 800437c:	40022000 	.word	0x40022000

08004380 <FLASH_GetFlagStatus>:
    }
  }
#else
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
  if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 8004380:	2801      	cmp	r0, #1
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <FLASH_GetFlagStatus+0x1c>)
 8004384:	d103      	bne.n	800438e <FLASH_GetFlagStatus+0xe>
  {
    if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 8004386:	69d8      	ldr	r0, [r3, #28]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8004388:	f000 0001 	and.w	r0, r0, #1
 800438c:	4770      	bx	lr
    }
  }
  else
  {
   if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 800438e:	68db      	ldr	r3, [r3, #12]
    {
      bitstatus = SET;
    }
    else
    {
      bitstatus = RESET;
 8004390:	4218      	tst	r0, r3
 8004392:	bf0c      	ite	eq
 8004394:	2000      	moveq	r0, #0
 8004396:	2001      	movne	r0, #1
  }
#endif /* STM32F10X_XL */

  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus;
}
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40022000 	.word	0x40022000

080043a0 <FLASH_ClearFlag>:
#else
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <FLASH_ClearFlag+0x8>)
 80043a2:	60d8      	str	r0, [r3, #12]
#endif /* STM32F10X_XL */
}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	40022000 	.word	0x40022000

080043ac <FLASH_GetStatus>:
  */
FLASH_Status FLASH_GetStatus(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <FLASH_GetStatus+0x2c>)
 80043ae:	68da      	ldr	r2, [r3, #12]
 80043b0:	f012 0f01 	tst.w	r2, #1
 80043b4:	d10b      	bne.n	80043ce <FLASH_GetStatus+0x22>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	f012 0f04 	tst.w	r2, #4
 80043bc:	d109      	bne.n	80043d2 <FLASH_GetStatus+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 80043be:	68d8      	ldr	r0, [r3, #12]
 80043c0:	f000 0010 	and.w	r0, r0, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80043c4:	2800      	cmp	r0, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2004      	moveq	r0, #4
 80043ca:	2003      	movne	r0, #3
 80043cc:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80043ce:	2001      	movs	r0, #1
 80043d0:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 80043d2:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40022000 	.word	0x40022000

080043dc <FLASH_GetBank1Status>:
  */
FLASH_Status FLASH_GetBank1Status(void)
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 80043dc:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <FLASH_GetBank1Status+0x2c>)
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	f012 0f01 	tst.w	r2, #1
 80043e4:	d10b      	bne.n	80043fe <FLASH_GetBank1Status+0x22>
  {
    flashstatus = FLASH_BUSY;
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	f012 0f04 	tst.w	r2, #4
 80043ec:	d109      	bne.n	8004402 <FLASH_GetBank1Status+0x26>
    { 
      flashstatus = FLASH_ERROR_PG;
    }
    else 
    {
      if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 80043ee:	68d8      	ldr	r0, [r3, #12]
 80043f0:	f000 0010 	and.w	r0, r0, #16
      {
        flashstatus = FLASH_ERROR_WRP;
 80043f4:	2800      	cmp	r0, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2004      	moveq	r0, #4
 80043fa:	2003      	movne	r0, #3
 80043fc:	4770      	bx	lr
{
  FLASH_Status flashstatus = FLASH_COMPLETE;
  
  if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
  {
    flashstatus = FLASH_BUSY;
 80043fe:	2001      	movs	r0, #1
 8004400:	4770      	bx	lr
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
    { 
      flashstatus = FLASH_ERROR_PG;
 8004402:	2002      	movs	r0, #2
      }
    }
  }
  /* Return the Flash Status */
  return flashstatus;
}
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40022000 	.word	0x40022000

0800440c <FLASH_WaitForLastOperation>:
  * @param  Timeout: FLASH progamming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800440c:	b510      	push	{r4, lr}
 800440e:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 8004410:	f7ff ffe4 	bl	80043dc <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 8004414:	2801      	cmp	r0, #1
 8004416:	d105      	bne.n	8004424 <FLASH_WaitForLastOperation+0x18>
 8004418:	e000      	b.n	800441c <FLASH_WaitForLastOperation+0x10>
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 800441a:	3c01      	subs	r4, #1
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_BUSY) && (Timeout != 0x00))
 800441c:	2c00      	cmp	r4, #0
 800441e:	d1fc      	bne.n	800441a <FLASH_WaitForLastOperation+0xe>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 8004420:	2005      	movs	r0, #5
 8004422:	bd10      	pop	{r4, pc}
 8004424:	2c00      	cmp	r4, #0
 8004426:	bf08      	it	eq
 8004428:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 800442a:	bd10      	pop	{r4, pc}

0800442c <FLASH_UserOptionByteConfig>:
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  * FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 800442e:	4e12      	ldr	r6, [pc, #72]	; (8004478 <FLASH_UserOptionByteConfig+0x4c>)
 8004430:	4b12      	ldr	r3, [pc, #72]	; (800447c <FLASH_UserOptionByteConfig+0x50>)
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  * FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 8004432:	4604      	mov	r4, r0
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
 8004434:	60b3      	str	r3, [r6, #8]
  FLASH->OPTKEYR = FLASH_KEY2;
 8004436:	4b12      	ldr	r3, [pc, #72]	; (8004480 <FLASH_UserOptionByteConfig+0x54>)
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004438:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
 800443c:	60b3      	str	r3, [r6, #8]
  *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
  * FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
{
 800443e:	460d      	mov	r5, r1
 8004440:	4617      	mov	r7, r2
  /* Authorize the small information block programming */
  FLASH->OPTKEYR = FLASH_KEY1;
  FLASH->OPTKEYR = FLASH_KEY2;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004442:	f7ff ffe3 	bl	800440c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004446:	2804      	cmp	r0, #4
 8004448:	d115      	bne.n	8004476 <FLASH_UserOptionByteConfig+0x4a>
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 800444a:	6933      	ldr	r3, [r6, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 800444c:	f044 04f8 	orr.w	r4, r4, #248	; 0xf8
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {  
    /* Enable the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 8004450:	f043 0310 	orr.w	r3, r3, #16
 8004454:	6133      	str	r3, [r6, #16]
           
    OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 8004456:	4325      	orrs	r5, r4
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <FLASH_UserOptionByteConfig+0x58>)
 800445a:	432f      	orrs	r7, r5
 800445c:	805f      	strh	r7, [r3, #2]
  
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 800445e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004462:	f7ff ffd3 	bl	800440c <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 8004466:	2805      	cmp	r0, #5
 8004468:	d005      	beq.n	8004476 <FLASH_UserOptionByteConfig+0x4a>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 800446a:	6932      	ldr	r2, [r6, #16]
 800446c:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004470:	ea02 0303 	and.w	r3, r2, r3
 8004474:	6133      	str	r3, [r6, #16]
    }
  }    
  /* Return the Option Byte program Status */
  return status;
}
 8004476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004478:	40022000 	.word	0x40022000
 800447c:	45670123 	.word	0x45670123
 8004480:	cdef89ab 	.word	0xcdef89ab
 8004484:	1ffff800 	.word	0x1ffff800

08004488 <FLASH_ReadOutProtection>:
  *   This parameter can be: ENABLE or DISABLE.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
{
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4605      	mov	r5, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
 800448c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8004490:	f7ff ffbc 	bl	800440c <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 8004494:	2804      	cmp	r0, #4
 8004496:	d138      	bne.n	800450a <FLASH_ReadOutProtection+0x82>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004498:	4c1c      	ldr	r4, [pc, #112]	; (800450c <FLASH_ReadOutProtection+0x84>)
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <FLASH_ReadOutProtection+0x88>)
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800449c:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80044a0:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <FLASH_ReadOutProtection+0x8c>)
 80044a4:	60a3      	str	r3, [r4, #8]
    FLASH->CR |= CR_OPTER_Set;
 80044a6:	6923      	ldr	r3, [r4, #16]
 80044a8:	f043 0320 	orr.w	r3, r3, #32
 80044ac:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80044ae:	6923      	ldr	r3, [r4, #16]
 80044b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044b4:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80044b6:	f7ff ffa9 	bl	800440c <FLASH_WaitForLastOperation>
    if(status == FLASH_COMPLETE)
 80044ba:	2804      	cmp	r0, #4
 80044bc:	d11d      	bne.n	80044fa <FLASH_ReadOutProtection+0x72>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80044be:	6922      	ldr	r2, [r4, #16]
 80044c0:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80044c4:	ea02 0303 	and.w	r3, r2, r3
 80044c8:	6123      	str	r3, [r4, #16]
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set; 
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	f043 0310 	orr.w	r3, r3, #16
 80044d0:	6123      	str	r3, [r4, #16]
 80044d2:	4b11      	ldr	r3, [pc, #68]	; (8004518 <FLASH_ReadOutProtection+0x90>)
      if(NewState != DISABLE)
 80044d4:	b10d      	cbz	r5, 80044da <FLASH_ReadOutProtection+0x52>
      {
        OB->RDP = 0x00;
 80044d6:	2200      	movs	r2, #0
 80044d8:	e000      	b.n	80044dc <FLASH_ReadOutProtection+0x54>
      }
      else
      {
        OB->RDP = RDP_Key;  
 80044da:	22a5      	movs	r2, #165	; 0xa5
 80044dc:	801a      	strh	r2, [r3, #0]
      }
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(EraseTimeout); 
 80044de:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80044e2:	f7ff ff93 	bl	800440c <FLASH_WaitForLastOperation>
    
      if(status != FLASH_TIMEOUT)
 80044e6:	2805      	cmp	r0, #5
 80044e8:	d00f      	beq.n	800450a <FLASH_ReadOutProtection+0x82>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 80044ea:	4a08      	ldr	r2, [pc, #32]	; (800450c <FLASH_ReadOutProtection+0x84>)
 80044ec:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80044f0:	6911      	ldr	r1, [r2, #16]
 80044f2:	ea01 0303 	and.w	r3, r1, r3
 80044f6:	6113      	str	r3, [r2, #16]
 80044f8:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else 
    {
      if(status != FLASH_TIMEOUT)
 80044fa:	2805      	cmp	r0, #5
 80044fc:	d005      	beq.n	800450a <FLASH_ReadOutProtection+0x82>
      {
        /* Disable the OPTER Bit */
        FLASH->CR &= CR_OPTER_Reset;
 80044fe:	6922      	ldr	r2, [r4, #16]
 8004500:	f641 73df 	movw	r3, #8159	; 0x1fdf
 8004504:	ea02 0303 	and.w	r3, r2, r3
 8004508:	6123      	str	r3, [r4, #16]
      }
    }
  }
  /* Return the protection operation Status */
  return status;       
}
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	40022000 	.word	0x40022000
 8004510:	45670123 	.word	0x45670123
 8004514:	cdef89ab 	.word	0xcdef89ab
 8004518:	1ffff800 	.word	0x1ffff800

0800451c <FLASH_EnableWriteProtection>:
  *     @arg FLASH_WRProt_AllPages
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
 800451c:	b510      	push	{r4, lr}
 800451e:	4604      	mov	r4, r0
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004520:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004524:	f7ff ff72 	bl	800440c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004528:	2804      	cmp	r0, #4
 800452a:	d142      	bne.n	80045b2 <FLASH_EnableWriteProtection+0x96>
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <FLASH_EnableWriteProtection+0x98>)
 800452e:	4922      	ldr	r1, [pc, #136]	; (80045b8 <FLASH_EnableWriteProtection+0x9c>)
  FLASH_Status status = FLASH_COMPLETE;
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
 8004530:	43e4      	mvns	r4, r4
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 8004532:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 8004534:	4921      	ldr	r1, [pc, #132]	; (80045bc <FLASH_EnableWriteProtection+0xa0>)
  
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 8004536:	b2e2      	uxtb	r2, r4
  
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
 8004538:	6099      	str	r1, [r3, #8]
    FLASH->CR |= CR_OPTPG_Set;
 800453a:	6919      	ldr	r1, [r3, #16]
    if(WRP0_Data != 0xFF)
 800453c:	2aff      	cmp	r2, #255	; 0xff
  if(status == FLASH_COMPLETE)
  {
    /* Authorizes the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
 800453e:	f041 0110 	orr.w	r1, r1, #16
 8004542:	6119      	str	r1, [r3, #16]
    if(WRP0_Data != 0xFF)
 8004544:	d007      	beq.n	8004556 <FLASH_EnableWriteProtection+0x3a>
    {
      OB->WRP0 = WRP0_Data;
 8004546:	4b1e      	ldr	r3, [pc, #120]	; (80045c0 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004548:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    FLASH->OPTKEYR = FLASH_KEY1;
    FLASH->OPTKEYR = FLASH_KEY2;
    FLASH->CR |= CR_OPTPG_Set;
    if(WRP0_Data != 0xFF)
    {
      OB->WRP0 = WRP0_Data;
 800454c:	811a      	strh	r2, [r3, #8]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800454e:	f7ff ff5d 	bl	800440c <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 8004552:	2804      	cmp	r0, #4
 8004554:	d122      	bne.n	800459c <FLASH_EnableWriteProtection+0x80>
  /* Check the parameters */
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 8004556:	f404 437f 	and.w	r3, r4, #65280	; 0xff00
 800455a:	0a1b      	lsrs	r3, r3, #8
      OB->WRP0 = WRP0_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 800455c:	2bff      	cmp	r3, #255	; 0xff
 800455e:	d007      	beq.n	8004570 <FLASH_EnableWriteProtection+0x54>
    {
      OB->WRP1 = WRP1_Data;
 8004560:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004562:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
    {
      OB->WRP1 = WRP1_Data;
 8004566:	8153      	strh	r3, [r2, #10]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004568:	f7ff ff50 	bl	800440c <FLASH_WaitForLastOperation>
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 800456c:	2804      	cmp	r0, #4
 800456e:	d115      	bne.n	800459c <FLASH_EnableWriteProtection+0x80>
  assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 8004570:	f404 037f 	and.w	r3, r4, #16711680	; 0xff0000
 8004574:	0c1b      	lsrs	r3, r3, #16
      OB->WRP1 = WRP1_Data;
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 8004576:	2bff      	cmp	r3, #255	; 0xff
 8004578:	d007      	beq.n	800458a <FLASH_EnableWriteProtection+0x6e>
    {
      OB->WRP2 = WRP2_Data;
 800457a:	4a11      	ldr	r2, [pc, #68]	; (80045c0 <FLASH_EnableWriteProtection+0xa4>)
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 800457c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
    {
      OB->WRP2 = WRP2_Data;
 8004580:	8193      	strh	r3, [r2, #12]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004582:	f7ff ff43 	bl	800440c <FLASH_WaitForLastOperation>
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 8004586:	2804      	cmp	r0, #4
 8004588:	d108      	bne.n	800459c <FLASH_EnableWriteProtection+0x80>
  
  FLASH_Pages = (uint32_t)(~FLASH_Pages);
  WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
  WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
  WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
  WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 800458a:	0e24      	lsrs	r4, r4, #24
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 800458c:	2cff      	cmp	r4, #255	; 0xff
 800458e:	d008      	beq.n	80045a2 <FLASH_EnableWriteProtection+0x86>
    {
      OB->WRP3 = WRP3_Data;
 8004590:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <FLASH_EnableWriteProtection+0xa4>)
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004592:	f44f 5000 	mov.w	r0, #8192	; 0x2000
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
    {
      OB->WRP3 = WRP3_Data;
 8004596:	81dc      	strh	r4, [r3, #14]
     
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004598:	f7ff ff38 	bl	800440c <FLASH_WaitForLastOperation>
    }
          
    if(status != FLASH_TIMEOUT)
 800459c:	2805      	cmp	r0, #5
 800459e:	d101      	bne.n	80045a4 <FLASH_EnableWriteProtection+0x88>
 80045a0:	bd10      	pop	{r4, pc}
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
    }
    
    if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 80045a2:	2004      	movs	r0, #4
    }
          
    if(status != FLASH_TIMEOUT)
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80045a4:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <FLASH_EnableWriteProtection+0x98>)
 80045a6:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80045aa:	6911      	ldr	r1, [r2, #16]
 80045ac:	ea01 0303 	and.w	r3, r1, r3
 80045b0:	6113      	str	r3, [r2, #16]
    }
  } 
  /* Return the write protection operation Status */
  return status;       
}
 80045b2:	bd10      	pop	{r4, pc}
 80045b4:	40022000 	.word	0x40022000
 80045b8:	45670123 	.word	0x45670123
 80045bc:	cdef89ab 	.word	0xcdef89ab
 80045c0:	1ffff800 	.word	0x1ffff800

080045c4 <FLASH_ProgramOptionByteData>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 80045c4:	b570      	push	{r4, r5, r6, lr}
 80045c6:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
{
 80045cc:	460e      	mov	r6, r1
  FLASH_Status status = FLASH_COMPLETE;
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045ce:	f7ff ff1d 	bl	800440c <FLASH_WaitForLastOperation>

  if(status == FLASH_COMPLETE)
 80045d2:	2804      	cmp	r0, #4
 80045d4:	d115      	bne.n	8004602 <FLASH_ProgramOptionByteData+0x3e>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80045d6:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <FLASH_ProgramOptionByteData+0x40>)
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <FLASH_ProgramOptionByteData+0x44>)
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
    *(__IO uint16_t*)Address = Data;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);

  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80045de:	60ab      	str	r3, [r5, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80045e0:	4b0a      	ldr	r3, [pc, #40]	; (800460c <FLASH_ProgramOptionByteData+0x48>)
 80045e2:	60ab      	str	r3, [r5, #8]
    /* Enables the Option Bytes Programming operation */
    FLASH->CR |= CR_OPTPG_Set; 
 80045e4:	692b      	ldr	r3, [r5, #16]
 80045e6:	f043 0310 	orr.w	r3, r3, #16
 80045ea:	612b      	str	r3, [r5, #16]
    *(__IO uint16_t*)Address = Data;
 80045ec:	8026      	strh	r6, [r4, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 80045ee:	f7ff ff0d 	bl	800440c <FLASH_WaitForLastOperation>
    if(status != FLASH_TIMEOUT)
 80045f2:	2805      	cmp	r0, #5
 80045f4:	d005      	beq.n	8004602 <FLASH_ProgramOptionByteData+0x3e>
    {
      /* if the program operation is completed, disable the OPTPG Bit */
      FLASH->CR &= CR_OPTPG_Reset;
 80045f6:	692a      	ldr	r2, [r5, #16]
 80045f8:	f641 73ef 	movw	r3, #8175	; 0x1fef
 80045fc:	ea02 0303 	and.w	r3, r2, r3
 8004600:	612b      	str	r3, [r5, #16]
    }
  }
  /* Return the Option Byte Data Program Status */
  return status;
}
 8004602:	bd70      	pop	{r4, r5, r6, pc}
 8004604:	40022000 	.word	0x40022000
 8004608:	45670123 	.word	0x45670123
 800460c:	cdef89ab 	.word	0xcdef89ab

08004610 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004610:	b570      	push	{r4, r5, r6, lr}
 8004612:	4604      	mov	r4, r0
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004614:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8004618:	460e      	mov	r6, r1
      FLASH->CR2 &= CR_PG_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800461a:	f7ff fef7 	bl	800440c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800461e:	2804      	cmp	r0, #4
 8004620:	d10f      	bne.n	8004642 <FLASH_ProgramHalfWord+0x32>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004622:	4d08      	ldr	r5, [pc, #32]	; (8004644 <FLASH_ProgramHalfWord+0x34>)
  
    *(__IO uint16_t*)Address = Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004624:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  status = FLASH_WaitForLastOperation(ProgramTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR |= CR_PG_Set;
 8004628:	692b      	ldr	r3, [r5, #16]
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = Data;
 8004630:	8026      	strh	r6, [r4, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004632:	f7ff feeb 	bl	800440c <FLASH_WaitForLastOperation>
    
    /* Disable the PG Bit */
    FLASH->CR &= CR_PG_Reset;
 8004636:	692a      	ldr	r2, [r5, #16]
 8004638:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 800463c:	ea02 0303 	and.w	r3, r2, r3
 8004640:	612b      	str	r3, [r5, #16]
  } 
#endif  /* STM32F10X_XL */
  
  /* Return the Program Status */
  return status;
}
 8004642:	bd70      	pop	{r4, r5, r6, pc}
 8004644:	40022000 	.word	0x40022000

08004648 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004648:	b573      	push	{r0, r1, r4, r5, r6, lr}
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 800464a:	2300      	movs	r3, #0
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800464c:	4604      	mov	r4, r0
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 800464e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004652:	460e      	mov	r6, r1
  FLASH_Status status = FLASH_COMPLETE;
  __IO uint32_t tmp = 0;
 8004654:	9301      	str	r3, [sp, #4]
      }
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004656:	f7ff fed9 	bl	800440c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 800465a:	2804      	cmp	r0, #4
 800465c:	d11b      	bne.n	8004696 <FLASH_ProgramWord+0x4e>
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 800465e:	4d0e      	ldr	r5, [pc, #56]	; (8004698 <FLASH_ProgramWord+0x50>)
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004660:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to program the new first 
    half word */
    FLASH->CR |= CR_PG_Set;
 8004664:	692b      	ldr	r3, [r5, #16]
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	612b      	str	r3, [r5, #16]
  
    *(__IO uint16_t*)Address = (uint16_t)Data;
 800466c:	b2b3      	uxth	r3, r6
 800466e:	8023      	strh	r3, [r4, #0]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004670:	f7ff fecc 	bl	800440c <FLASH_WaitForLastOperation>
 
    if(status == FLASH_COMPLETE)
 8004674:	2804      	cmp	r0, #4
 8004676:	d108      	bne.n	800468a <FLASH_ProgramWord+0x42>
    {
      /* if the previous operation is completed, proceed to program the new second 
      half word */
      tmp = Address + 2;
 8004678:	3402      	adds	r4, #2
 800467a:	9401      	str	r4, [sp, #4]

      *(__IO uint16_t*) tmp = Data >> 16;
 800467c:	9b01      	ldr	r3, [sp, #4]
 800467e:	0c36      	lsrs	r6, r6, #16
 8004680:	801e      	strh	r6, [r3, #0]
    
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 8004682:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004686:	f7ff fec1 	bl	800440c <FLASH_WaitForLastOperation>
      FLASH->CR &= CR_PG_Reset;
    }
    else
    {
      /* Disable the PG Bit */
      FLASH->CR &= CR_PG_Reset;
 800468a:	692a      	ldr	r2, [r5, #16]
 800468c:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8004690:	ea02 0303 	and.w	r3, r2, r3
 8004694:	612b      	str	r3, [r5, #16]
  }         
#endif /* STM32F10X_XL */
   
  /* Return the Program Status */
  return status;
}
 8004696:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
 8004698:	40022000 	.word	0x40022000

0800469c <FLASH_EraseOptionBytes>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
 800469c:	b538      	push	{r3, r4, r5, lr}
  uint16_t rdptmp = RDP_Key;

  FLASH_Status status = FLASH_COMPLETE;

  /* Get the actual read protection Option Byte value */ 
  if(FLASH_GetReadOutProtectionStatus() != RESET)
 800469e:	f7ff fe53 	bl	8004348 <FLASH_GetReadOutProtectionStatus>
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseOptionBytes(void)
{
  uint16_t rdptmp = RDP_Key;
 80046a2:	2800      	cmp	r0, #0
 80046a4:	bf0c      	ite	eq
 80046a6:	25a5      	moveq	r5, #165	; 0xa5
 80046a8:	2500      	movne	r5, #0
  {
    rdptmp = 0x00;  
  }

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 80046aa:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80046ae:	f7ff fead 	bl	800440c <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 80046b2:	2804      	cmp	r0, #4
 80046b4:	d133      	bne.n	800471e <FLASH_EraseOptionBytes+0x82>
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80046b6:	4c1a      	ldr	r4, [pc, #104]	; (8004720 <FLASH_EraseOptionBytes+0x84>)
 80046b8:	4b1a      	ldr	r3, [pc, #104]	; (8004724 <FLASH_EraseOptionBytes+0x88>)
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
    FLASH->CR |= CR_STRT_Set;
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80046ba:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* Authorize the small information block programming */
    FLASH->OPTKEYR = FLASH_KEY1;
 80046be:	60a3      	str	r3, [r4, #8]
    FLASH->OPTKEYR = FLASH_KEY2;
 80046c0:	4b19      	ldr	r3, [pc, #100]	; (8004728 <FLASH_EraseOptionBytes+0x8c>)
 80046c2:	60a3      	str	r3, [r4, #8]
    
    /* if the previous operation is completed, proceed to erase the option bytes */
    FLASH->CR |= CR_OPTER_Set;
 80046c4:	6923      	ldr	r3, [r4, #16]
 80046c6:	f043 0320 	orr.w	r3, r3, #32
 80046ca:	6123      	str	r3, [r4, #16]
    FLASH->CR |= CR_STRT_Set;
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046d2:	6123      	str	r3, [r4, #16]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 80046d4:	f7ff fe9a 	bl	800440c <FLASH_WaitForLastOperation>
    
    if(status == FLASH_COMPLETE)
 80046d8:	2804      	cmp	r0, #4
 80046da:	d118      	bne.n	800470e <FLASH_EraseOptionBytes+0x72>
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	f641 73df 	movw	r3, #8159	; 0x1fdf
 80046e2:	ea02 0303 	and.w	r3, r2, r3
 80046e6:	6123      	str	r3, [r4, #16]
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80046e8:	6923      	ldr	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80046ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    {
      /* if the erase operation is completed, disable the OPTER Bit */
      FLASH->CR &= CR_OPTER_Reset;
       
      /* Enable the Option Bytes Programming operation */
      FLASH->CR |= CR_OPTPG_Set;
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	6123      	str	r3, [r4, #16]
      /* Restore the last read protection Option Byte value */
      OB->RDP = (uint16_t)rdptmp; 
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <FLASH_EraseOptionBytes+0x90>)
 80046f6:	801d      	strh	r5, [r3, #0]
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(ProgramTimeout);
 80046f8:	f7ff fe88 	bl	800440c <FLASH_WaitForLastOperation>
 
      if(status != FLASH_TIMEOUT)
 80046fc:	2805      	cmp	r0, #5
 80046fe:	d00e      	beq.n	800471e <FLASH_EraseOptionBytes+0x82>
      {
        /* if the program operation is completed, disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8004700:	6922      	ldr	r2, [r4, #16]
 8004702:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004706:	ea02 0303 	and.w	r3, r2, r3
 800470a:	6123      	str	r3, [r4, #16]
 800470c:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      if (status != FLASH_TIMEOUT)
 800470e:	2805      	cmp	r0, #5
 8004710:	d005      	beq.n	800471e <FLASH_EraseOptionBytes+0x82>
      {
        /* Disable the OPTPG Bit */
        FLASH->CR &= CR_OPTPG_Reset;
 8004712:	6922      	ldr	r2, [r4, #16]
 8004714:	f641 73ef 	movw	r3, #8175	; 0x1fef
 8004718:	ea02 0303 	and.w	r3, r2, r3
 800471c:	6123      	str	r3, [r4, #16]
      }
    }  
  }
  /* Return the erase status */
  return status;
}
 800471e:	bd38      	pop	{r3, r4, r5, pc}
 8004720:	40022000 	.word	0x40022000
 8004724:	45670123 	.word	0x45670123
 8004728:	cdef89ab 	.word	0xcdef89ab
 800472c:	1ffff800 	.word	0x1ffff800

08004730 <FLASH_EraseAllPages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllPages(void)
{
 8004730:	b510      	push	{r4, lr}
    /* Disable the MER Bit */
    FLASH->CR2 &= CR_MER_Reset;
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004732:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8004736:	f7ff fe69 	bl	800440c <FLASH_WaitForLastOperation>
  if(status == FLASH_COMPLETE)
 800473a:	2804      	cmp	r0, #4
 800473c:	d112      	bne.n	8004764 <FLASH_EraseAllPages+0x34>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 800473e:	4c0a      	ldr	r4, [pc, #40]	; (8004768 <FLASH_EraseAllPages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004740:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 8004744:	6923      	ldr	r3, [r4, #16]
 8004746:	f043 0304 	orr.w	r3, r3, #4
 800474a:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004752:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004754:	f7ff fe5a 	bl	800440c <FLASH_WaitForLastOperation>

    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 800475e:	ea02 0303 	and.w	r3, r2, r3
 8004762:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 8004764:	bd10      	pop	{r4, pc}
 8004766:	bf00      	nop
 8004768:	40022000 	.word	0x40022000

0800476c <FLASH_ErasePage>:
  * @param  Page_Address: The page address to be erased.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4605      	mov	r5, r0
      FLASH->CR2 &= CR_PER_Reset;
    }
  }
#else
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(EraseTimeout);
 8004770:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 8004774:	f7ff fe4a 	bl	800440c <FLASH_WaitForLastOperation>
  
  if(status == FLASH_COMPLETE)
 8004778:	2804      	cmp	r0, #4
 800477a:	d113      	bne.n	80047a4 <FLASH_ErasePage+0x38>
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 800477c:	4c0a      	ldr	r4, [pc, #40]	; (80047a8 <FLASH_ErasePage+0x3c>)
    FLASH->AR = Page_Address; 
    FLASH->CR|= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 800477e:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastOperation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  { 
    /* if the previous operation is completed, proceed to erase the page */
    FLASH->CR|= CR_PER_Set;
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	6123      	str	r3, [r4, #16]
    FLASH->AR = Page_Address; 
 800478a:	6165      	str	r5, [r4, #20]
    FLASH->CR|= CR_STRT_Set;
 800478c:	6923      	ldr	r3, [r4, #16]
 800478e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004792:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(EraseTimeout);
 8004794:	f7ff fe3a 	bl	800440c <FLASH_WaitForLastOperation>
    
    /* Disable the PER Bit */
    FLASH->CR &= CR_PER_Reset;
 8004798:	6922      	ldr	r2, [r4, #16]
 800479a:	f641 73fd 	movw	r3, #8189	; 0x1ffd
 800479e:	ea02 0303 	and.w	r3, r2, r3
 80047a2:	6123      	str	r3, [r4, #16]
  }
#endif /* STM32F10X_XL */

  /* Return the Erase Status */
  return status;
}
 80047a4:	bd38      	pop	{r3, r4, r5, pc}
 80047a6:	bf00      	nop
 80047a8:	40022000 	.word	0x40022000

080047ac <FLASH_WaitForLastBank1Operation>:
  * @param  Timeout: FLASH progamming Timeout
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{ 
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4604      	mov	r4, r0
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
 80047b0:	f7ff fe14 	bl	80043dc <FLASH_GetBank1Status>
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80047b4:	2801      	cmp	r0, #1
 80047b6:	d105      	bne.n	80047c4 <FLASH_WaitForLastBank1Operation+0x18>
 80047b8:	e000      	b.n	80047bc <FLASH_WaitForLastBank1Operation+0x10>
  {
    status = FLASH_GetBank1Status();
    Timeout--;
 80047ba:	3c01      	subs	r4, #1
  FLASH_Status status = FLASH_COMPLETE;
   
  /* Check for the Flash Status */
  status = FLASH_GetBank1Status();
  /* Wait for a Flash operation to complete or a TIMEOUT to occur */
  while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 80047bc:	2c00      	cmp	r4, #0
 80047be:	d1fc      	bne.n	80047ba <FLASH_WaitForLastBank1Operation+0xe>
    status = FLASH_GetBank1Status();
    Timeout--;
  }
  if(Timeout == 0x00 )
  {
    status = FLASH_TIMEOUT;
 80047c0:	2005      	movs	r0, #5
 80047c2:	bd10      	pop	{r4, pc}
 80047c4:	2c00      	cmp	r4, #0
 80047c6:	bf08      	it	eq
 80047c8:	2005      	moveq	r0, #5
  }
  /* Return the operation status */
  return status;
}
 80047ca:	bd10      	pop	{r4, pc}

080047cc <FLASH_EraseAllBank1Pages>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
  *   FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
  */
FLASH_Status FLASH_EraseAllBank1Pages(void)
{
 80047cc:	b510      	push	{r4, lr}
  FLASH_Status status = FLASH_COMPLETE;
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80047ce:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
 80047d2:	f7ff ffeb 	bl	80047ac <FLASH_WaitForLastBank1Operation>
  
  if(status == FLASH_COMPLETE)
 80047d6:	2804      	cmp	r0, #4
 80047d8:	d112      	bne.n	8004800 <FLASH_EraseAllBank1Pages+0x34>
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80047da:	4c0a      	ldr	r4, [pc, #40]	; (8004804 <FLASH_EraseAllBank1Pages+0x38>)
     FLASH->CR |= CR_STRT_Set;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80047dc:	f44f 2030 	mov.w	r0, #720896	; 0xb0000
  status = FLASH_WaitForLastBank1Operation(EraseTimeout);
  
  if(status == FLASH_COMPLETE)
  {
    /* if the previous operation is completed, proceed to erase all pages */
     FLASH->CR |= CR_MER_Set;
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	f043 0304 	orr.w	r3, r3, #4
 80047e6:	6123      	str	r3, [r4, #16]
     FLASH->CR |= CR_STRT_Set;
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047ee:	6123      	str	r3, [r4, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 80047f0:	f7ff ffdc 	bl	80047ac <FLASH_WaitForLastBank1Operation>
    
    /* Disable the MER Bit */
    FLASH->CR &= CR_MER_Reset;
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	f641 73fb 	movw	r3, #8187	; 0x1ffb
 80047fa:	ea02 0303 	and.w	r3, r2, r3
 80047fe:	6123      	str	r3, [r4, #16]
  }    
  /* Return the Erase Status */
  return status;
}
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	40022000 	.word	0x40022000

08004808 <GPIO_DeInit>:
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 8004808:	4b23      	ldr	r3, [pc, #140]	; (8004898 <GPIO_DeInit+0x90>)
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800480a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
 800480c:	4298      	cmp	r0, r3
 800480e:	d105      	bne.n	800481c <GPIO_DeInit+0x14>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8004810:	2004      	movs	r0, #4
 8004812:	2101      	movs	r1, #1
 8004814:	f000 fc5c 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
 8004818:	2004      	movs	r0, #4
 800481a:	e036      	b.n	800488a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOB)
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <GPIO_DeInit+0x94>)
 800481e:	4298      	cmp	r0, r3
 8004820:	d105      	bne.n	800482e <GPIO_DeInit+0x26>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8004822:	2008      	movs	r0, #8
 8004824:	2101      	movs	r1, #1
 8004826:	f000 fc53 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
 800482a:	2008      	movs	r0, #8
 800482c:	e02d      	b.n	800488a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOC)
 800482e:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <GPIO_DeInit+0x98>)
 8004830:	4298      	cmp	r0, r3
 8004832:	d105      	bne.n	8004840 <GPIO_DeInit+0x38>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8004834:	2010      	movs	r0, #16
 8004836:	2101      	movs	r1, #1
 8004838:	f000 fc4a 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
 800483c:	2010      	movs	r0, #16
 800483e:	e024      	b.n	800488a <GPIO_DeInit+0x82>
  }
  else if (GPIOx == GPIOD)
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <GPIO_DeInit+0x9c>)
 8004842:	4298      	cmp	r0, r3
 8004844:	d105      	bne.n	8004852 <GPIO_DeInit+0x4a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8004846:	2020      	movs	r0, #32
 8004848:	2101      	movs	r1, #1
 800484a:	f000 fc41 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
 800484e:	2020      	movs	r0, #32
 8004850:	e01b      	b.n	800488a <GPIO_DeInit+0x82>
  }    
  else if (GPIOx == GPIOE)
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <GPIO_DeInit+0xa0>)
 8004854:	4298      	cmp	r0, r3
 8004856:	d105      	bne.n	8004864 <GPIO_DeInit+0x5c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8004858:	2040      	movs	r0, #64	; 0x40
 800485a:	2101      	movs	r1, #1
 800485c:	f000 fc38 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
 8004860:	2040      	movs	r0, #64	; 0x40
 8004862:	e012      	b.n	800488a <GPIO_DeInit+0x82>
  } 
  else if (GPIOx == GPIOF)
 8004864:	4b11      	ldr	r3, [pc, #68]	; (80048ac <GPIO_DeInit+0xa4>)
 8004866:	4298      	cmp	r0, r3
 8004868:	d105      	bne.n	8004876 <GPIO_DeInit+0x6e>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800486a:	2080      	movs	r0, #128	; 0x80
 800486c:	2101      	movs	r1, #1
 800486e:	f000 fc2f 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
 8004872:	2080      	movs	r0, #128	; 0x80
 8004874:	e009      	b.n	800488a <GPIO_DeInit+0x82>
  }
  else
  {
    if (GPIOx == GPIOG)
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <GPIO_DeInit+0xa8>)
 8004878:	4298      	cmp	r0, r3
 800487a:	d10b      	bne.n	8004894 <GPIO_DeInit+0x8c>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
 800487c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004880:	2101      	movs	r1, #1
 8004882:	f000 fc25 	bl	80050d0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8004886:	f44f 7080 	mov.w	r0, #256	; 0x100
 800488a:	2100      	movs	r1, #0
    }
  }
}
 800488c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  {
    if (GPIOx == GPIOG)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
 8004890:	f000 bc1e 	b.w	80050d0 <RCC_APB2PeriphResetCmd>
 8004894:	bd10      	pop	{r4, pc}
 8004896:	bf00      	nop
 8004898:	40010800 	.word	0x40010800
 800489c:	40010c00 	.word	0x40010c00
 80048a0:	40011000 	.word	0x40011000
 80048a4:	40011400 	.word	0x40011400
 80048a8:	40011800 	.word	0x40011800
 80048ac:	40011c00 	.word	0x40011c00
 80048b0:	40012000 	.word	0x40012000

080048b4 <GPIO_AFIODeInit>:
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80048b4:	2001      	movs	r0, #1
 80048b6:	4601      	mov	r1, r0
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
 80048b8:	b510      	push	{r4, lr}
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
 80048ba:	f000 fc09 	bl	80050d0 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80048be:	2001      	movs	r0, #1
 80048c0:	2100      	movs	r1, #0
}
 80048c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
 80048c6:	f000 bc03 	b.w	80050d0 <RCC_APB2PeriphResetCmd>

080048ca <GPIO_Init>:
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80048ca:	78cb      	ldrb	r3, [r1, #3]
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80048ce:	f013 0f10 	tst.w	r3, #16
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80048d2:	f003 020f 	and.w	r2, r3, #15
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80048d6:	880e      	ldrh	r6, [r1, #0]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80048d8:	bf1c      	itt	ne
 80048da:	788b      	ldrbne	r3, [r1, #2]
 80048dc:	431a      	orrne	r2, r3
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80048de:	f016 0fff 	tst.w	r6, #255	; 0xff
 80048e2:	d01d      	beq.n	8004920 <GPIO_Init+0x56>
  {
    tmpreg = GPIOx->CRL;
 80048e4:	6804      	ldr	r4, [r0, #0]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80048e6:	2300      	movs	r3, #0
    {
      pos = ((uint32_t)0x01) << pinpos;
 80048e8:	2701      	movs	r7, #1
 80048ea:	409f      	lsls	r7, r3
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80048ec:	ea07 0506 	and.w	r5, r7, r6
      if (currentpin == pos)
 80048f0:	42bd      	cmp	r5, r7
 80048f2:	d111      	bne.n	8004918 <GPIO_Init+0x4e>
      {
        pos = pinpos << 2;
 80048f4:	009f      	lsls	r7, r3, #2
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80048f6:	f04f 0c0f 	mov.w	ip, #15
 80048fa:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80048fe:	fa12 f707 	lsls.w	r7, r2, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8004902:	ea24 040c 	bic.w	r4, r4, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004906:	433c      	orrs	r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8004908:	78cf      	ldrb	r7, [r1, #3]
 800490a:	2f28      	cmp	r7, #40	; 0x28
 800490c:	d101      	bne.n	8004912 <GPIO_Init+0x48>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800490e:	6145      	str	r5, [r0, #20]
 8004910:	e002      	b.n	8004918 <GPIO_Init+0x4e>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004912:	2f48      	cmp	r7, #72	; 0x48
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8004914:	bf08      	it	eq
 8004916:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004918:	3301      	adds	r3, #1
 800491a:	2b08      	cmp	r3, #8
 800491c:	d1e4      	bne.n	80048e8 <GPIO_Init+0x1e>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800491e:	6004      	str	r4, [r0, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8004920:	880e      	ldrh	r6, [r1, #0]
 8004922:	2eff      	cmp	r6, #255	; 0xff
 8004924:	d91f      	bls.n	8004966 <GPIO_Init+0x9c>
  {
    tmpreg = GPIOx->CRH;
 8004926:	6844      	ldr	r4, [r0, #4]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8004928:	2300      	movs	r3, #0
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *   contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
 800492a:	f103 0508 	add.w	r5, r3, #8
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800492e:	2701      	movs	r7, #1
 8004930:	40af      	lsls	r7, r5
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8004932:	ea07 0506 	and.w	r5, r7, r6
      if (currentpin == pos)
 8004936:	42bd      	cmp	r5, r7
 8004938:	d111      	bne.n	800495e <GPIO_Init+0x94>
      {
        pos = pinpos << 2;
 800493a:	009f      	lsls	r7, r3, #2
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800493c:	f04f 0c0f 	mov.w	ip, #15
 8004940:	fa0c fc07 	lsl.w	ip, ip, r7
        tmpreg &= ~pinmask;
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8004944:	fa12 f707 	lsls.w	r7, r2, r7
      if (currentpin == pos)
      {
        pos = pinpos << 2;
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
        tmpreg &= ~pinmask;
 8004948:	ea24 040c 	bic.w	r4, r4, ip
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800494c:	433c      	orrs	r4, r7
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800494e:	78cf      	ldrb	r7, [r1, #3]
 8004950:	2f28      	cmp	r7, #40	; 0x28
 8004952:	d101      	bne.n	8004958 <GPIO_Init+0x8e>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8004954:	6145      	str	r5, [r0, #20]
 8004956:	e002      	b.n	800495e <GPIO_Init+0x94>
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8004958:	2f48      	cmp	r7, #72	; 0x48
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800495a:	bf08      	it	eq
 800495c:	6105      	streq	r5, [r0, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800495e:	3301      	adds	r3, #1
 8004960:	2b08      	cmp	r3, #8
 8004962:	d1e2      	bne.n	800492a <GPIO_Init+0x60>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8004964:	6044      	str	r4, [r0, #4]
 8004966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004968 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8004968:	f04f 33ff 	mov.w	r3, #4294967295
 800496c:	8003      	strh	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800496e:	2302      	movs	r3, #2
 8004970:	7083      	strb	r3, [r0, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004972:	18db      	adds	r3, r3, r3
 8004974:	70c3      	strb	r3, [r0, #3]
}
 8004976:	4770      	bx	lr

08004978 <GPIO_ReadInputDataBit>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8004978:	6883      	ldr	r3, [r0, #8]
  {
    bitstatus = (uint8_t)Bit_SET;
 800497a:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800497c:	bf0c      	ite	eq
 800497e:	2000      	moveq	r0, #0
 8004980:	2001      	movne	r0, #1
 8004982:	4770      	bx	lr

08004984 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
 8004984:	6880      	ldr	r0, [r0, #8]
}
 8004986:	b280      	uxth	r0, r0
 8004988:	4770      	bx	lr

0800498a <GPIO_ReadOutputDataBit>:
  uint8_t bitstatus = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800498a:	68c3      	ldr	r3, [r0, #12]
  {
    bitstatus = (uint8_t)Bit_SET;
 800498c:	4219      	tst	r1, r3
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
}
 800498e:	bf0c      	ite	eq
 8004990:	2000      	moveq	r0, #0
 8004992:	2001      	movne	r0, #1
 8004994:	4770      	bx	lr

08004996 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 8004996:	68c0      	ldr	r0, [r0, #12]
}
 8004998:	b280      	uxth	r0, r0
 800499a:	4770      	bx	lr

0800499c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 800499c:	6101      	str	r1, [r0, #16]
}
 800499e:	4770      	bx	lr

080049a0 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 80049a0:	6141      	str	r1, [r0, #20]
}
 80049a2:	4770      	bx	lr

080049a4 <GPIO_WriteBit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80049a4:	b10a      	cbz	r2, 80049aa <GPIO_WriteBit+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049a6:	6101      	str	r1, [r0, #16]
 80049a8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
 80049aa:	6141      	str	r1, [r0, #20]
 80049ac:	4770      	bx	lr

080049ae <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80049ae:	60c1      	str	r1, [r0, #12]
}
 80049b0:	4770      	bx	lr

080049b2 <GPIO_PinLockConfig>:
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
 80049b2:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80049b6:	6183      	str	r3, [r0, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80049b8:	6181      	str	r1, [r0, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80049ba:	6183      	str	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80049bc:	6983      	ldr	r3, [r0, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80049be:	6983      	ldr	r3, [r0, #24]
}
 80049c0:	4770      	bx	lr

080049c2 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80049c2:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80049c4:	4a05      	ldr	r2, [pc, #20]	; (80049dc <GPIO_EventOutputConfig+0x1a>)
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80049c6:	f64f 7380 	movw	r3, #65408	; 0xff80
  uint32_t tmpreg = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
 80049ca:	6814      	ldr	r4, [r2, #0]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
 80049cc:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
 80049d0:	ea04 0303 	and.w	r3, r4, r3
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
  tmpreg |= GPIO_PinSource;
 80049d4:	ea41 0303 	orr.w	r3, r1, r3
  AFIO->EVCR = tmpreg;
 80049d8:	6013      	str	r3, [r2, #0]
}
 80049da:	bd10      	pop	{r4, pc}
 80049dc:	40010000 	.word	0x40010000

080049e0 <GPIO_EventOutputCmd>:
void GPIO_EventOutputCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <GPIO_EventOutputCmd+0x8>)
 80049e2:	6018      	str	r0, [r3, #0]
}
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	4220001c 	.word	0x4220001c

080049ec <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80049ec:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80049ee:	2800      	cmp	r0, #0
 80049f0:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <GPIO_PinRemapConfig+0x64>)
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80049f2:	f400 1440 	and.w	r4, r0, #3145728	; 0x300000
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
  {
    tmpreg = AFIO->MAPR2;
 80049f6:	bfb4      	ite	lt
 80049f8:	69db      	ldrlt	r3, [r3, #28]
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80049fa:	685b      	ldrge	r3, [r3, #4]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80049fc:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;
 8004a00:	b282      	uxth	r2, r0

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8004a02:	d107      	bne.n	8004a14 <GPIO_PinRemapConfig+0x28>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004a04:	4c12      	ldr	r4, [pc, #72]	; (8004a50 <GPIO_PinRemapConfig+0x64>)
  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
  tmp = GPIO_Remap & LSB_MASK;

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8004a06:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8004a0a:	6865      	ldr	r5, [r4, #4]
 8004a0c:	f025 6570 	bic.w	r5, r5, #251658240	; 0xf000000
 8004a10:	6065      	str	r5, [r4, #4]
 8004a12:	e011      	b.n	8004a38 <GPIO_PinRemapConfig+0x4c>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8004a14:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8004a18:	d006      	beq.n	8004a28 <GPIO_PinRemapConfig+0x3c>
  else
  {
    tmpreg = AFIO->MAPR;
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8004a1a:	f400 2470 	and.w	r4, r0, #983040	; 0xf0000
 8004a1e:	0c24      	lsrs	r4, r4, #16
    tmpreg &= DBGAFR_SWJCFG_MASK;
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8004a20:	2503      	movs	r5, #3
 8004a22:	fa15 f404 	lsls.w	r4, r5, r4
 8004a26:	e003      	b.n	8004a30 <GPIO_PinRemapConfig+0x44>
    tmpreg &= ~tmp1;
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004a28:	0d44      	lsrs	r4, r0, #21
 8004a2a:	0124      	lsls	r4, r4, #4
 8004a2c:	fa12 f404 	lsls.w	r4, r2, r4
 8004a30:	ea23 0304 	bic.w	r3, r3, r4
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8004a34:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
  }

  if (NewState != DISABLE)
 8004a38:	b119      	cbz	r1, 8004a42 <GPIO_PinRemapConfig+0x56>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8004a3a:	0d41      	lsrs	r1, r0, #21
 8004a3c:	0109      	lsls	r1, r1, #4
 8004a3e:	408a      	lsls	r2, r1
 8004a40:	4313      	orrs	r3, r2
 8004a42:	4a03      	ldr	r2, [pc, #12]	; (8004a50 <GPIO_PinRemapConfig+0x64>)
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8004a44:	2800      	cmp	r0, #0
  {
    AFIO->MAPR2 = tmpreg;
 8004a46:	bfb4      	ite	lt
 8004a48:	61d3      	strlt	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
 8004a4a:	6053      	strge	r3, [r2, #4]
 8004a4c:	bd30      	pop	{r4, r5, pc}
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000

08004a54 <GPIO_EXTILineConfig>:
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8004a54:	f001 0203 	and.w	r2, r1, #3
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8004a58:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0x00;
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	240f      	movs	r4, #15
 8004a5e:	4094      	lsls	r4, r2
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8004a60:	fa10 f202 	lsls.w	r2, r0, r2
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <GPIO_EXTILineConfig+0x30>)
 8004a66:	0889      	lsrs	r1, r1, #2
 8004a68:	3102      	adds	r1, #2
 8004a6a:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8004a6e:	ea25 0404 	bic.w	r4, r5, r4
 8004a72:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8004a76:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8004a7a:	ea42 0404 	orr.w	r4, r2, r4
 8004a7e:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
}
 8004a82:	bd30      	pop	{r4, r5, pc}
 8004a84:	40010000 	.word	0x40010000

08004a88 <GPIO_ETH_MediaInterfaceConfig>:
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
 8004a88:	4b01      	ldr	r3, [pc, #4]	; (8004a90 <GPIO_ETH_MediaInterfaceConfig+0x8>)
 8004a8a:	6018      	str	r0, [r3, #0]
}
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	422000dc 	.word	0x422000dc

08004a94 <I2C_DeInit>:
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8004a94:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <I2C_DeInit+0x30>)
  * @brief  Deinitializes the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8004a96:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8004a98:	4298      	cmp	r0, r3
 8004a9a:	d107      	bne.n	8004aac <I2C_DeInit+0x18>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8004a9c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	f000 fb21 	bl	80050e8 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 8004aa6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004aaa:	e006      	b.n	8004aba <I2C_DeInit+0x26>
  }
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 8004aac:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	f000 fb19 	bl	80050e8 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8004ab6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004aba:	2100      	movs	r1, #0
  }
}
 8004abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8004ac0:	f000 bb12 	b.w	80050e8 <RCC_APB1PeriphResetCmd>
 8004ac4:	40005400 	.word	0x40005400

08004ac8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aca:	b087      	sub	sp, #28
 8004acc:	4604      	mov	r4, r0
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8004ace:	8886      	ldrh	r6, [r0, #4]
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004ad0:	a801      	add	r0, sp, #4
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8004ad2:	460d      	mov	r5, r1
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004ad4:	4f30      	ldr	r7, [pc, #192]	; (8004b98 <I2C_Init+0xd0>)
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8004ad6:	f000 fa8d 	bl	8004ff4 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8004ada:	9803      	ldr	r0, [sp, #12]

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8004adc:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8004ae0:	0436      	lsls	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004ae2:	fbb0 f7f7 	udiv	r7, r0, r7

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8004ae6:	0c36      	lsrs	r6, r6, #16
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
  pclk1 = rcc_clocks.PCLK1_Frequency;
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8004ae8:	b2bf      	uxth	r7, r7
  tmpreg |= freqrange;
 8004aea:	ea47 0606 	orr.w	r6, r7, r6
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8004aee:	80a6      	strh	r6, [r4, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004af0:	8821      	ldrh	r1, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004af2:	682a      	ldr	r2, [r5, #0]
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004af4:	f021 0101 	bic.w	r1, r1, #1
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <I2C_Init+0xd4>)
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004afa:	0409      	lsls	r1, r1, #16
 8004afc:	0c09      	lsrs	r1, r1, #16
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004afe:	429a      	cmp	r2, r3
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8004b00:	8021      	strh	r1, [r4, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8004b02:	d80a      	bhi.n	8004b1a <I2C_Init+0x52>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8004b04:	0053      	lsls	r3, r2, #1
 8004b06:	fbb0 f3f3 	udiv	r3, r0, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004b0a:	3701      	adds	r7, #1

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8004b0c:	b29b      	uxth	r3, r3
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8004b0e:	b2bf      	uxth	r7, r7
 8004b10:	8427      	strh	r7, [r4, #32]
    {
      /* Set minimum allowed value */
      result = 0x04;  
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	bf98      	it	ls
 8004b16:	2304      	movls	r3, #4
 8004b18:	e022      	b.n	8004b60 <I2C_Init+0x98>
    I2Cx->TRISE = freqrange + 1; 
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8004b1a:	88e9      	ldrh	r1, [r5, #6]
 8004b1c:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8004b20:	4299      	cmp	r1, r3
 8004b22:	d105      	bne.n	8004b30 <I2C_Init+0x68>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8004b24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004b28:	fbb0 f3f2 	udiv	r3, r0, r2
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	e006      	b.n	8004b3e <I2C_Init+0x76>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8004b30:	2319      	movs	r3, #25
 8004b32:	4353      	muls	r3, r2
 8004b34:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b38:	b29b      	uxth	r3, r3
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8004b3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8004b3e:	051a      	lsls	r2, r3, #20
 8004b40:	0d12      	lsrs	r2, r2, #20
 8004b42:	b90a      	cbnz	r2, 8004b48 <I2C_Init+0x80>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8004b44:	f043 0301 	orr.w	r3, r3, #1
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004b48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b4c:	4357      	muls	r7, r2
 8004b4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b52:	fb97 f7f2 	sdiv	r7, r7, r2
 8004b56:	3701      	adds	r7, #1
 8004b58:	b2bf      	uxth	r7, r7
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8004b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8004b5e:	8427      	strh	r7, [r4, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8004b60:	83a3      	strh	r3, [r4, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8004b62:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004b64:	8969      	ldrh	r1, [r5, #10]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8004b6e:	8823      	ldrh	r3, [r4, #0]
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004b70:	88aa      	ldrh	r2, [r5, #4]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b76:	f023 030a 	bic.w	r3, r3, #10
 8004b7a:	041b      	lsls	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004b7c:	ea41 0202 	orr.w	r2, r1, r2

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8004b80:	0c1b      	lsrs	r3, r3, #16
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8004b82:	4313      	orrs	r3, r2
 8004b84:	b29b      	uxth	r3, r3
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8004b86:	8023      	strh	r3, [r4, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8004b88:	892a      	ldrh	r2, [r5, #8]
 8004b8a:	89ab      	ldrh	r3, [r5, #12]
 8004b8c:	ea42 0303 	orr.w	r3, r2, r3
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	8123      	strh	r3, [r4, #8]
}
 8004b94:	b007      	add	sp, #28
 8004b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b98:	000f4240 	.word	0x000f4240
 8004b9c:	000186a0 	.word	0x000186a0

08004ba0 <I2C_StructInit>:
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 8004ba0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004ba4:	6003      	str	r3, [r0, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	8083      	strh	r3, [r0, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004baa:	f64b 72ff 	movw	r2, #49151	; 0xbfff
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8004bae:	8103      	strh	r3, [r0, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 8004bb0:	8143      	strh	r3, [r0, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004bb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 8004bb6:	80c2      	strh	r2, [r0, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8004bb8:	8183      	strh	r3, [r0, #12]
}
 8004bba:	4770      	bx	lr

08004bbc <I2C_Cmd>:
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bbc:	b121      	cbz	r1, 8004bc8 <I2C_Cmd+0xc>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8004bbe:	8803      	ldrh	r3, [r0, #0]
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	e004      	b.n	8004bd2 <I2C_Cmd+0x16>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
 8004bc8:	8803      	ldrh	r3, [r0, #0]
 8004bca:	f023 0301 	bic.w	r3, r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	8003      	strh	r3, [r0, #0]
 8004bd4:	4770      	bx	lr

08004bd6 <I2C_DMACmd>:
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bd6:	b121      	cbz	r1, 8004be2 <I2C_DMACmd+0xc>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= CR2_DMAEN_Set;
 8004bd8:	8883      	ldrh	r3, [r0, #4]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004be0:	e004      	b.n	8004bec <I2C_DMACmd+0x16>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= CR2_DMAEN_Reset;
 8004be2:	8883      	ldrh	r3, [r0, #4]
 8004be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004be8:	041b      	lsls	r3, r3, #16
 8004bea:	0c1b      	lsrs	r3, r3, #16
 8004bec:	8083      	strh	r3, [r0, #4]
 8004bee:	4770      	bx	lr

08004bf0 <I2C_DMALastTransferCmd>:
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004bf0:	b121      	cbz	r1, 8004bfc <I2C_DMALastTransferCmd+0xc>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= CR2_LAST_Set;
 8004bf2:	8883      	ldrh	r3, [r0, #4]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bfa:	e004      	b.n	8004c06 <I2C_DMALastTransferCmd+0x16>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= CR2_LAST_Reset;
 8004bfc:	8883      	ldrh	r3, [r0, #4]
 8004bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	8083      	strh	r3, [r0, #4]
 8004c08:	4770      	bx	lr

08004c0a <I2C_GenerateSTART>:
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c0a:	b121      	cbz	r1, 8004c16 <I2C_GenerateSTART+0xc>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8004c0c:	8803      	ldrh	r3, [r0, #0]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	e004      	b.n	8004c20 <I2C_GenerateSTART+0x16>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
 8004c16:	8803      	ldrh	r3, [r0, #0]
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	8003      	strh	r3, [r0, #0]
 8004c22:	4770      	bx	lr

08004c24 <I2C_GenerateSTOP>:
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c24:	b121      	cbz	r1, 8004c30 <I2C_GenerateSTOP+0xc>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 8004c26:	8803      	ldrh	r3, [r0, #0]
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c2e:	e004      	b.n	8004c3a <I2C_GenerateSTOP+0x16>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
 8004c30:	8803      	ldrh	r3, [r0, #0]
 8004c32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c36:	041b      	lsls	r3, r3, #16
 8004c38:	0c1b      	lsrs	r3, r3, #16
 8004c3a:	8003      	strh	r3, [r0, #0]
 8004c3c:	4770      	bx	lr

08004c3e <I2C_AcknowledgeConfig>:
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c3e:	b121      	cbz	r1, 8004c4a <I2C_AcknowledgeConfig+0xc>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8004c40:	8803      	ldrh	r3, [r0, #0]
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c48:	e004      	b.n	8004c54 <I2C_AcknowledgeConfig+0x16>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
 8004c4a:	8803      	ldrh	r3, [r0, #0]
 8004c4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	0c1b      	lsrs	r3, r3, #16
 8004c54:	8003      	strh	r3, [r0, #0]
 8004c56:	4770      	bx	lr

08004c58 <I2C_OwnAddress2Config>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 8004c58:	8983      	ldrh	r3, [r0, #12]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8004c5a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= OAR2_ADD2_Reset;
 8004c5e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8004c62:	041b      	lsls	r3, r3, #16
 8004c64:	0c1b      	lsrs	r3, r3, #16

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 8004c66:	ea41 0303 	orr.w	r3, r1, r3

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 8004c6a:	8183      	strh	r3, [r0, #12]
}
 8004c6c:	4770      	bx	lr

08004c6e <I2C_DualAddressCmd>:
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c6e:	b121      	cbz	r1, 8004c7a <I2C_DualAddressCmd+0xc>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= OAR2_ENDUAL_Set;
 8004c70:	8983      	ldrh	r3, [r0, #12]
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	e004      	b.n	8004c84 <I2C_DualAddressCmd+0x16>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= OAR2_ENDUAL_Reset;
 8004c7a:	8983      	ldrh	r3, [r0, #12]
 8004c7c:	f023 0301 	bic.w	r3, r3, #1
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	0c1b      	lsrs	r3, r3, #16
 8004c84:	8183      	strh	r3, [r0, #12]
 8004c86:	4770      	bx	lr

08004c88 <I2C_GeneralCallCmd>:
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004c88:	b121      	cbz	r1, 8004c94 <I2C_GeneralCallCmd+0xc>
  {
    /* Enable generall call */
    I2Cx->CR1 |= CR1_ENGC_Set;
 8004c8a:	8803      	ldrh	r3, [r0, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c92:	e004      	b.n	8004c9e <I2C_GeneralCallCmd+0x16>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= CR1_ENGC_Reset;
 8004c94:	8803      	ldrh	r3, [r0, #0]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	041b      	lsls	r3, r3, #16
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	8003      	strh	r3, [r0, #0]
 8004ca0:	4770      	bx	lr

08004ca2 <I2C_ITConfig>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8004ca2:	b11a      	cbz	r2, 8004cac <I2C_ITConfig+0xa>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8004ca4:	8883      	ldrh	r3, [r0, #4]
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	4319      	orrs	r1, r3
 8004caa:	e003      	b.n	8004cb4 <I2C_ITConfig+0x12>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8004cac:	8883      	ldrh	r3, [r0, #4]
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	ea23 0101 	bic.w	r1, r3, r1
 8004cb4:	8081      	strh	r1, [r0, #4]
 8004cb6:	4770      	bx	lr

08004cb8 <I2C_SendData>:
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8004cb8:	8201      	strh	r1, [r0, #16]
}
 8004cba:	4770      	bx	lr

08004cbc <I2C_ReceiveData>:
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8004cbc:	8a00      	ldrh	r0, [r0, #16]
}
 8004cbe:	b2c0      	uxtb	r0, r0
 8004cc0:	4770      	bx	lr

08004cc2 <I2C_Send7bitAddress>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8004cc2:	b112      	cbz	r2, 8004cca <I2C_Send7bitAddress+0x8>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8004cc4:	f041 0101 	orr.w	r1, r1, #1
 8004cc8:	e001      	b.n	8004cce <I2C_Send7bitAddress+0xc>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8004cca:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
  }
  /* Send the address */
  I2Cx->DR = Address;
 8004cce:	8201      	strh	r1, [r0, #16]
}
 8004cd0:	4770      	bx	lr

08004cd2 <I2C_ReadRegister>:
  *     @arg I2C_Register_CCR:   CCR register.
  *     @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8004cd2:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8004cd8:	9001      	str	r0, [sp, #4]
  tmp += I2C_Register;
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	18cb      	adds	r3, r1, r3
 8004cde:	9301      	str	r3, [sp, #4]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8004ce0:	9b01      	ldr	r3, [sp, #4]
 8004ce2:	8818      	ldrh	r0, [r3, #0]
}
 8004ce4:	b280      	uxth	r0, r0
 8004ce6:	b002      	add	sp, #8
 8004ce8:	4770      	bx	lr

08004cea <I2C_SoftwareResetCmd>:
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004cea:	b131      	cbz	r1, 8004cfa <I2C_SoftwareResetCmd+0x10>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= CR1_SWRST_Set;
 8004cec:	8803      	ldrh	r3, [r0, #0]
 8004cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	e002      	b.n	8004d00 <I2C_SoftwareResetCmd+0x16>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= CR1_SWRST_Reset;
 8004cfa:	8803      	ldrh	r3, [r0, #0]
 8004cfc:	045b      	lsls	r3, r3, #17
 8004cfe:	0c5b      	lsrs	r3, r3, #17
 8004d00:	8003      	strh	r3, [r0, #0]
 8004d02:	4770      	bx	lr

08004d04 <I2C_SMBusAlertConfig>:
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 8004d04:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8004d08:	d104      	bne.n	8004d14 <I2C_SMBusAlertConfig+0x10>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 8004d0a:	8803      	ldrh	r3, [r0, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004d12:	e004      	b.n	8004d1e <I2C_SMBusAlertConfig+0x1a>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 8004d14:	8803      	ldrh	r3, [r0, #0]
 8004d16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	8003      	strh	r3, [r0, #0]
 8004d20:	4770      	bx	lr

08004d22 <I2C_TransmitPEC>:
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d22:	b121      	cbz	r1, 8004d2e <I2C_TransmitPEC+0xc>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= CR1_PEC_Set;
 8004d24:	8803      	ldrh	r3, [r0, #0]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d2c:	e004      	b.n	8004d38 <I2C_TransmitPEC+0x16>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= CR1_PEC_Reset;
 8004d2e:	8803      	ldrh	r3, [r0, #0]
 8004d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	0c1b      	lsrs	r3, r3, #16
 8004d38:	8003      	strh	r3, [r0, #0]
 8004d3a:	4770      	bx	lr

08004d3c <I2C_PECPositionConfig>:
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8004d3c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8004d40:	d104      	bne.n	8004d4c <I2C_PECPositionConfig+0x10>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8004d42:	8803      	ldrh	r3, [r0, #0]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d4a:	e004      	b.n	8004d56 <I2C_PECPositionConfig+0x1a>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8004d4c:	8803      	ldrh	r3, [r0, #0]
 8004d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d52:	041b      	lsls	r3, r3, #16
 8004d54:	0c1b      	lsrs	r3, r3, #16
 8004d56:	8003      	strh	r3, [r0, #0]
 8004d58:	4770      	bx	lr

08004d5a <I2C_CalculatePEC>:
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d5a:	b121      	cbz	r1, 8004d66 <I2C_CalculatePEC+0xc>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= CR1_ENPEC_Set;
 8004d5c:	8803      	ldrh	r3, [r0, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f043 0320 	orr.w	r3, r3, #32
 8004d64:	e004      	b.n	8004d70 <I2C_CalculatePEC+0x16>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= CR1_ENPEC_Reset;
 8004d66:	8803      	ldrh	r3, [r0, #0]
 8004d68:	f023 0320 	bic.w	r3, r3, #32
 8004d6c:	041b      	lsls	r3, r3, #16
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	8003      	strh	r3, [r0, #0]
 8004d72:	4770      	bx	lr

08004d74 <I2C_GetPEC>:
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8004d74:	8b00      	ldrh	r0, [r0, #24]
 8004d76:	b280      	uxth	r0, r0
}
 8004d78:	0a00      	lsrs	r0, r0, #8
 8004d7a:	4770      	bx	lr

08004d7c <I2C_ARPCmd>:
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d7c:	b121      	cbz	r1, 8004d88 <I2C_ARPCmd+0xc>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= CR1_ENARP_Set;
 8004d7e:	8803      	ldrh	r3, [r0, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f043 0310 	orr.w	r3, r3, #16
 8004d86:	e004      	b.n	8004d92 <I2C_ARPCmd+0x16>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= CR1_ENARP_Reset;
 8004d88:	8803      	ldrh	r3, [r0, #0]
 8004d8a:	f023 0310 	bic.w	r3, r3, #16
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	0c1b      	lsrs	r3, r3, #16
 8004d92:	8003      	strh	r3, [r0, #0]
 8004d94:	4770      	bx	lr

08004d96 <I2C_StretchClockCmd>:
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 8004d96:	b921      	cbnz	r1, 8004da2 <I2C_StretchClockCmd+0xc>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= CR1_NOSTRETCH_Set;
 8004d98:	8803      	ldrh	r3, [r0, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da0:	e004      	b.n	8004dac <I2C_StretchClockCmd+0x16>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= CR1_NOSTRETCH_Reset;
 8004da2:	8803      	ldrh	r3, [r0, #0]
 8004da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da8:	041b      	lsls	r3, r3, #16
 8004daa:	0c1b      	lsrs	r3, r3, #16
 8004dac:	8003      	strh	r3, [r0, #0]
 8004dae:	4770      	bx	lr

08004db0 <I2C_FastModeDutyCycleConfig>:
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 8004db0:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004db4:	d005      	beq.n	8004dc2 <I2C_FastModeDutyCycleConfig+0x12>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8004db6:	8b83      	ldrh	r3, [r0, #28]
 8004db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	0c1b      	lsrs	r3, r3, #16
 8004dc0:	e003      	b.n	8004dca <I2C_FastModeDutyCycleConfig+0x1a>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8004dc2:	8b83      	ldrh	r3, [r0, #28]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dca:	8383      	strh	r3, [r0, #28]
 8004dcc:	4770      	bx	lr

08004dce <I2C_CheckEvent>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004dce:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8004dd0:	8b00      	ldrh	r0, [r0, #24]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004dd2:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8004dd4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8004dd8:	4008      	ands	r0, r1

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8004dda:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
  }
  /* Return status */
  return status;
}
 8004dde:	1a43      	subs	r3, r0, r1
 8004de0:	4258      	negs	r0, r3
 8004de2:	eb40 0003 	adc.w	r0, r0, r3
 8004de6:	4770      	bx	lr

08004de8 <I2C_GetLastEvent>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004de8:	8a83      	ldrh	r3, [r0, #20]
  flag2 = I2Cx->SR2;
 8004dea:	8b00      	ldrh	r0, [r0, #24]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8004dec:	b29b      	uxth	r3, r3
  flag2 = I2Cx->SR2;
  flag2 = flag2 << 16;

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8004dee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16

  /* Return status */
  return lastevent;
}
 8004df2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8004df6:	4770      	bx	lr

08004df8 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)”ENDAD”
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8004df8:	b082      	sub	sp, #8
  FlagStatus bitstatus = RESET;
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	9300      	str	r3, [sp, #0]

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004e00:	0f0b      	lsrs	r3, r1, #28
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8004e02:	9000      	str	r0, [sp, #0]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8004e04:	9301      	str	r3, [sp, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
  
  if(i2creg != 0)
 8004e06:	9b01      	ldr	r3, [sp, #4]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8004e08:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
  
  if(i2creg != 0)
 8004e0c:	b113      	cbz	r3, 8004e14 <I2C_GetFlagStatus+0x1c>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8004e0e:	9b00      	ldr	r3, [sp, #0]
 8004e10:	3314      	adds	r3, #20
 8004e12:	e002      	b.n	8004e1a <I2C_GetFlagStatus+0x22>
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004e14:	9b00      	ldr	r3, [sp, #0]
    i2cxbase += 0x14;
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8004e16:	0c09      	lsrs	r1, r1, #16
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8004e18:	3318      	adds	r3, #24
 8004e1a:	9300      	str	r3, [sp, #0]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8004e1c:	9b00      	ldr	r3, [sp, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8004e20:	4219      	tst	r1, r3
    bitstatus = RESET;
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
}
 8004e22:	bf0c      	ite	eq
 8004e24:	2000      	moveq	r0, #0
 8004e26:	2001      	movne	r0, #1
 8004e28:	b002      	add	sp, #8
 8004e2a:	4770      	bx	lr

08004e2c <I2C_ClearFlag>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8004e2c:	43c9      	mvns	r1, r1
 8004e2e:	b289      	uxth	r1, r1
 8004e30:	8281      	strh	r1, [r0, #20]
}
 8004e32:	4770      	bx	lr

08004e34 <I2C_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8004e34:	8883      	ldrh	r3, [r0, #4]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004e36:	8a80      	ldrh	r0, [r0, #20]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8004e38:	b29b      	uxth	r3, r3
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;
 8004e3a:	b280      	uxth	r0, r0

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8004e3c:	4008      	ands	r0, r1
 8004e3e:	d006      	beq.n	8004e4e <I2C_GetITStatus+0x1a>
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8004e40:	f001 61e0 	and.w	r1, r1, #117440512	; 0x7000000
  *     @arg I2C_IT_ADDR: Address sent flag (Master mode) “ADSL”
  *                       Address matched flag (Slave mode)”ENDAD”
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
 8004e44:	ea13 4111 	ands.w	r1, r3, r1, lsr #16

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8004e48:	bf0c      	ite	eq
 8004e4a:	2000      	moveq	r0, #0
 8004e4c:	2001      	movne	r0, #1
    /* I2C_IT is reset */
    bitstatus = RESET;
  }
  /* Return the I2C_IT status */
  return  bitstatus;
}
 8004e4e:	4770      	bx	lr

08004e50 <I2C_ClearITPendingBit>:
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8004e50:	43c9      	mvns	r1, r1
 8004e52:	b289      	uxth	r1, r1
 8004e54:	8281      	strh	r1, [r0, #20]
}
 8004e56:	4770      	bx	lr

08004e58 <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <RCC_DeInit+0x38>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8004e62:	6859      	ldr	r1, [r3, #4]
 8004e64:	4a0b      	ldr	r2, [pc, #44]	; (8004e94 <RCC_DeInit+0x3c>)
 8004e66:	ea01 0202 	and.w	r2, r1, r2
 8004e6a:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004e72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e76:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004e86:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8004e88:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e8c:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
 8004e8e:	4770      	bx	lr
 8004e90:	40021000 	.word	0x40021000
 8004e94:	f8ff0000 	.word	0xf8ff0000

08004e98 <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <RCC_HSEConfig+0x34>)
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004e9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ea4:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eac:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 8004eae:	d003      	beq.n	8004eb8 <RCC_HSEConfig+0x20>
 8004eb0:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8004eb4:	d109      	bne.n	8004eca <RCC_HSEConfig+0x32>
 8004eb6:	e004      	b.n	8004ec2 <RCC_HSEConfig+0x2a>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ebe:	601a      	str	r2, [r3, #0]
      break;
 8004ec0:	4770      	bx	lr
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	4770      	bx	lr
 8004ecc:	40021000 	.word	0x40021000

08004ed0 <RCC_AdjustHSICalibrationValue>:
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <RCC_AdjustHSICalibrationValue+0x10>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
 8004ed4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 8004ed8:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
  /* Store the new value */
  RCC->CR = tmpreg;
 8004edc:	601a      	str	r2, [r3, #0]
}
 8004ede:	4770      	bx	lr
 8004ee0:	40021000 	.word	0x40021000

08004ee4 <RCC_HSICmd>:
  */
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8004ee4:	4b01      	ldr	r3, [pc, #4]	; (8004eec <RCC_HSICmd+0x8>)
 8004ee6:	6018      	str	r0, [r3, #0]
}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	42420000 	.word	0x42420000

08004ef0 <RCC_PLLConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
 8004ef0:	4b04      	ldr	r3, [pc, #16]	; (8004f04 <RCC_PLLConfig+0x14>)
 8004ef2:	685a      	ldr	r2, [r3, #4]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
 8004ef4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
 8004ef8:	ea40 0202 	orr.w	r2, r0, r2
 8004efc:	430a      	orrs	r2, r1
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004efe:	605a      	str	r2, [r3, #4]
}
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40021000 	.word	0x40021000

08004f08 <RCC_PLLCmd>:
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8004f08:	4b01      	ldr	r3, [pc, #4]	; (8004f10 <RCC_PLLCmd+0x8>)
 8004f0a:	6018      	str	r0, [r3, #0]
}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	42420060 	.word	0x42420060

08004f14 <RCC_SYSCLKConfig>:
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <RCC_SYSCLKConfig+0x10>)
 8004f16:	685a      	ldr	r2, [r3, #4]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 8004f18:	f022 0203 	bic.w	r2, r2, #3
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8004f1c:	ea40 0202 	orr.w	r2, r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004f20:	605a      	str	r2, [r3, #4]
}
 8004f22:	4770      	bx	lr
 8004f24:	40021000 	.word	0x40021000

08004f28 <RCC_GetSYSCLKSource>:
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 8004f28:	4b02      	ldr	r3, [pc, #8]	; (8004f34 <RCC_GetSYSCLKSource+0xc>)
 8004f2a:	6858      	ldr	r0, [r3, #4]
}
 8004f2c:	f000 000c 	and.w	r0, r0, #12
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop
 8004f34:	40021000 	.word	0x40021000

08004f38 <RCC_HCLKConfig>:
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
 8004f38:	4b03      	ldr	r3, [pc, #12]	; (8004f48 <RCC_HCLKConfig+0x10>)
 8004f3a:	685a      	ldr	r2, [r3, #4]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8004f3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8004f40:	ea40 0202 	orr.w	r2, r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004f44:	605a      	str	r2, [r3, #4]
}
 8004f46:	4770      	bx	lr
 8004f48:	40021000 	.word	0x40021000

08004f4c <RCC_PCLK1Config>:
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8004f4c:	4b03      	ldr	r3, [pc, #12]	; (8004f5c <RCC_PCLK1Config+0x10>)
 8004f4e:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 8004f50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8004f54:	ea40 0202 	orr.w	r2, r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004f58:	605a      	str	r2, [r3, #4]
}
 8004f5a:	4770      	bx	lr
 8004f5c:	40021000 	.word	0x40021000

08004f60 <RCC_PCLK2Config>:
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
 8004f60:	4b03      	ldr	r3, [pc, #12]	; (8004f70 <RCC_PCLK2Config+0x10>)
 8004f62:	685a      	ldr	r2, [r3, #4]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8004f64:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8004f68:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004f6c:	605a      	str	r2, [r3, #4]
}
 8004f6e:	4770      	bx	lr
 8004f70:	40021000 	.word	0x40021000

08004f74 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8004f74:	4b04      	ldr	r3, [pc, #16]	; (8004f88 <RCC_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004f76:	b111      	cbz	r1, 8004f7e <RCC_ITConfig+0xa>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8004f78:	781a      	ldrb	r2, [r3, #0]
 8004f7a:	4310      	orrs	r0, r2
 8004f7c:	e002      	b.n	8004f84 <RCC_ITConfig+0x10>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8004f7e:	781a      	ldrb	r2, [r3, #0]
 8004f80:	ea22 0000 	bic.w	r0, r2, r0
 8004f84:	7018      	strb	r0, [r3, #0]
 8004f86:	4770      	bx	lr
 8004f88:	40021009 	.word	0x40021009

08004f8c <RCC_USBCLKConfig>:
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <RCC_USBCLKConfig+0x8>)
 8004f8e:	6018      	str	r0, [r3, #0]
}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	424200d8 	.word	0x424200d8

08004f98 <RCC_ADCCLKConfig>:
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
  uint32_t tmpreg = 0;
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <RCC_ADCCLKConfig+0x10>)
 8004f9a:	685a      	ldr	r2, [r3, #4]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8004f9c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8004fa0:	ea40 0202 	orr.w	r2, r0, r2
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8004fa4:	605a      	str	r2, [r3, #4]
}
 8004fa6:	4770      	bx	lr
 8004fa8:	40021000 	.word	0x40021000

08004fac <RCC_LSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <RCC_LSEConfig+0x1c>)
 8004fae:	2200      	movs	r2, #0
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004fb0:	2801      	cmp	r0, #1
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004fb2:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8004fb4:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8004fb6:	d002      	beq.n	8004fbe <RCC_LSEConfig+0x12>
 8004fb8:	2804      	cmp	r0, #4
 8004fba:	d104      	bne.n	8004fc6 <RCC_LSEConfig+0x1a>
 8004fbc:	e001      	b.n	8004fc2 <RCC_LSEConfig+0x16>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8004fbe:	7018      	strb	r0, [r3, #0]
      break;
 8004fc0:	4770      	bx	lr
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	4770      	bx	lr
 8004fc8:	40021020 	.word	0x40021020

08004fcc <RCC_LSICmd>:
  */
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8004fcc:	4b01      	ldr	r3, [pc, #4]	; (8004fd4 <RCC_LSICmd+0x8>)
 8004fce:	6018      	str	r0, [r3, #0]
}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	42420480 	.word	0x42420480

08004fd8 <RCC_RTCCLKConfig>:
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8004fd8:	4b02      	ldr	r3, [pc, #8]	; (8004fe4 <RCC_RTCCLKConfig+0xc>)
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	ea40 0202 	orr.w	r2, r0, r2
 8004fe0:	621a      	str	r2, [r3, #32]
}
 8004fe2:	4770      	bx	lr
 8004fe4:	40021000 	.word	0x40021000

08004fe8 <RCC_RTCCLKCmd>:
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <RCC_RTCCLKCmd+0x8>)
 8004fea:	6018      	str	r0, [r3, #0]
}
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	4242043c 	.word	0x4242043c

08004ff4 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8004ff4:	b510      	push	{r4, lr}
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8004ff6:	4b20      	ldr	r3, [pc, #128]	; (8005078 <RCC_GetClocksFreq+0x84>)
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	f002 020c 	and.w	r2, r2, #12
  
  switch (tmp)
 8004ffe:	2a04      	cmp	r2, #4
 8005000:	d001      	beq.n	8005006 <RCC_GetClocksFreq+0x12>
 8005002:	2a08      	cmp	r2, #8
 8005004:	d002      	beq.n	800500c <RCC_GetClocksFreq+0x18>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8005006:	4b1d      	ldr	r3, [pc, #116]	; (800507c <RCC_GetClocksFreq+0x88>)
 8005008:	6003      	str	r3, [r0, #0]
      break;
 800500a:	e011      	b.n	8005030 <RCC_GetClocksFreq+0x3c>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800500c:	685a      	ldr	r2, [r3, #4]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800500e:	6859      	ldr	r1, [r3, #4]
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8005010:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8005014:	0c92      	lsrs	r2, r2, #18
 8005016:	3202      	adds	r2, #2
      
      if (pllsource == 0x00)
 8005018:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 800501c:	d003      	beq.n	8005026 <RCC_GetClocksFreq+0x32>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005024:	d001      	beq.n	800502a <RCC_GetClocksFreq+0x36>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <RCC_GetClocksFreq+0x8c>)
 8005028:	e000      	b.n	800502c <RCC_GetClocksFreq+0x38>
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <RCC_GetClocksFreq+0x88>)
 800502c:	435a      	muls	r2, r3
 800502e:	6002      	str	r2, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005030:	4a11      	ldr	r2, [pc, #68]	; (8005078 <RCC_GetClocksFreq+0x84>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
 8005032:	4b14      	ldr	r3, [pc, #80]	; (8005084 <RCC_GetClocksFreq+0x90>)
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005034:	6851      	ldr	r1, [r2, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp];
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005036:	6804      	ldr	r4, [r0, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8005038:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
  tmp = tmp >> 4;
 800503c:	0909      	lsrs	r1, r1, #4
  presc = APBAHBPrescTable[tmp];
 800503e:	5c59      	ldrb	r1, [r3, r1]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8005040:	fa34 f101 	lsrs.w	r1, r4, r1
 8005044:	6041      	str	r1, [r0, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8005046:	6854      	ldr	r4, [r2, #4]
 8005048:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  tmp = tmp >> 8;
 800504c:	0a24      	lsrs	r4, r4, #8
  presc = APBAHBPrescTable[tmp];
 800504e:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005050:	fa31 f404 	lsrs.w	r4, r1, r4
 8005054:	6084      	str	r4, [r0, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8005056:	6854      	ldr	r4, [r2, #4]
 8005058:	f404 5460 	and.w	r4, r4, #14336	; 0x3800
  tmp = tmp >> 11;
 800505c:	0ae4      	lsrs	r4, r4, #11
  presc = APBAHBPrescTable[tmp];
 800505e:	5d1c      	ldrb	r4, [r3, r4]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8005060:	40e1      	lsrs	r1, r4
 8005062:	60c1      	str	r1, [r0, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8005064:	6852      	ldr	r2, [r2, #4]
 8005066:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  tmp = tmp >> 14;
  presc = ADCPrescTable[tmp];
 800506a:	eb03 3392 	add.w	r3, r3, r2, lsr #14
 800506e:	7c1b      	ldrb	r3, [r3, #16]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8005070:	fbb1 f1f3 	udiv	r1, r1, r3
 8005074:	6101      	str	r1, [r0, #16]
}
 8005076:	bd10      	pop	{r4, pc}
 8005078:	40021000 	.word	0x40021000
 800507c:	007a1200 	.word	0x007a1200
 8005080:	003d0900 	.word	0x003d0900
 8005084:	20000010 	.word	0x20000010

08005088 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8005088:	4b04      	ldr	r3, [pc, #16]	; (800509c <RCC_AHBPeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800508a:	b111      	cbz	r1, 8005092 <RCC_AHBPeriphClockCmd+0xa>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	4310      	orrs	r0, r2
 8005090:	e002      	b.n	8005098 <RCC_AHBPeriphClockCmd+0x10>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8005092:	695a      	ldr	r2, [r3, #20]
 8005094:	ea22 0000 	bic.w	r0, r2, r0
 8005098:	6158      	str	r0, [r3, #20]
 800509a:	4770      	bx	lr
 800509c:	40021000 	.word	0x40021000

080050a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <RCC_APB2PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050a2:	b111      	cbz	r1, 80050aa <RCC_APB2PeriphClockCmd+0xa>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	4310      	orrs	r0, r2
 80050a8:	e002      	b.n	80050b0 <RCC_APB2PeriphClockCmd+0x10>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80050aa:	699a      	ldr	r2, [r3, #24]
 80050ac:	ea22 0000 	bic.w	r0, r2, r0
 80050b0:	6198      	str	r0, [r3, #24]
 80050b2:	4770      	bx	lr
 80050b4:	40021000 	.word	0x40021000

080050b8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <RCC_APB1PeriphClockCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050ba:	b111      	cbz	r1, 80050c2 <RCC_APB1PeriphClockCmd+0xa>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80050bc:	69da      	ldr	r2, [r3, #28]
 80050be:	4310      	orrs	r0, r2
 80050c0:	e002      	b.n	80050c8 <RCC_APB1PeriphClockCmd+0x10>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	ea22 0000 	bic.w	r0, r2, r0
 80050c8:	61d8      	str	r0, [r3, #28]
 80050ca:	4770      	bx	lr
 80050cc:	40021000 	.word	0x40021000

080050d0 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <RCC_APB2PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050d2:	b111      	cbz	r1, 80050da <RCC_APB2PeriphResetCmd+0xa>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	4310      	orrs	r0, r2
 80050d8:	e002      	b.n	80050e0 <RCC_APB2PeriphResetCmd+0x10>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	ea22 0000 	bic.w	r0, r2, r0
 80050e0:	60d8      	str	r0, [r3, #12]
 80050e2:	4770      	bx	lr
 80050e4:	40021000 	.word	0x40021000

080050e8 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <RCC_APB1PeriphResetCmd+0x14>)
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80050ea:	b111      	cbz	r1, 80050f2 <RCC_APB1PeriphResetCmd+0xa>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	4310      	orrs	r0, r2
 80050f0:	e002      	b.n	80050f8 <RCC_APB1PeriphResetCmd+0x10>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80050f2:	691a      	ldr	r2, [r3, #16]
 80050f4:	ea22 0000 	bic.w	r0, r2, r0
 80050f8:	6118      	str	r0, [r3, #16]
 80050fa:	4770      	bx	lr
 80050fc:	40021000 	.word	0x40021000

08005100 <RCC_BackupResetCmd>:
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8005100:	4b01      	ldr	r3, [pc, #4]	; (8005108 <RCC_BackupResetCmd+0x8>)
 8005102:	6018      	str	r0, [r3, #0]
}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	42420440 	.word	0x42420440

0800510c <RCC_ClockSecuritySystemCmd>:
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <RCC_ClockSecuritySystemCmd+0x8>)
 800510e:	6018      	str	r0, [r3, #0]
}
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	4242004c 	.word	0x4242004c

08005118 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8005118:	4b01      	ldr	r3, [pc, #4]	; (8005120 <RCC_MCOConfig+0x8>)
 800511a:	7018      	strb	r0, [r3, #0]
}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40021007 	.word	0x40021007

08005124 <RCC_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8005124:	0943      	lsrs	r3, r0, #5
  if (tmp == 1)               /* The flag to check is in CR register */
 8005126:	2b01      	cmp	r3, #1
 8005128:	4a07      	ldr	r2, [pc, #28]	; (8005148 <RCC_GetFlagStatus+0x24>)
 800512a:	d101      	bne.n	8005130 <RCC_GetFlagStatus+0xc>
  {
    statusreg = RCC->CR;
 800512c:	6813      	ldr	r3, [r2, #0]
 800512e:	e003      	b.n	8005138 <RCC_GetFlagStatus+0x14>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8005130:	2b02      	cmp	r3, #2
  {
    statusreg = RCC->BDCR;
 8005132:	bf0c      	ite	eq
 8005134:	6a13      	ldreq	r3, [r2, #32]
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8005136:	6a53      	ldrne	r3, [r2, #36]	; 0x24
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8005138:	f000 001f 	and.w	r0, r0, #31
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800513c:	fa33 f000 	lsrs.w	r0, r3, r0
    bitstatus = RESET;
  }

  /* Return the flag status */
  return bitstatus;
}
 8005140:	f000 0001 	and.w	r0, r0, #1
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40021000 	.word	0x40021000

0800514c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800514c:	b507      	push	{r0, r1, r2, lr}
  __IO uint32_t StartUpCounter = 0;
 800514e:	2300      	movs	r3, #0
 8005150:	9301      	str	r3, [sp, #4]
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8005152:	2031      	movs	r0, #49	; 0x31
 8005154:	f7ff ffe6 	bl	8005124 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8005158:	9b01      	ldr	r3, [sp, #4]
 800515a:	3301      	adds	r3, #1
 800515c:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800515e:	9b01      	ldr	r3, [sp, #4]
 8005160:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005164:	d001      	beq.n	800516a <RCC_WaitForHSEStartUp+0x1e>
 8005166:	2800      	cmp	r0, #0
 8005168:	d0f3      	beq.n	8005152 <RCC_WaitForHSEStartUp+0x6>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800516a:	2031      	movs	r0, #49	; 0x31
 800516c:	f7ff ffda 	bl	8005124 <RCC_GetFlagStatus>
  else
  {
    status = ERROR;
  }  
  return (status);
}
 8005170:	3800      	subs	r0, #0
 8005172:	bf18      	it	ne
 8005174:	2001      	movne	r0, #1
 8005176:	bd0e      	pop	{r1, r2, r3, pc}

08005178 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
 8005178:	4b02      	ldr	r3, [pc, #8]	; (8005184 <RCC_ClearFlag+0xc>)
 800517a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005180:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005182:	4770      	bx	lr
 8005184:	40021000 	.word	0x40021000

08005188 <RCC_GetITStatus>:
  ITStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <RCC_GetITStatus+0x10>)
 800518a:	689b      	ldr	r3, [r3, #8]
  {
    bitstatus = SET;
 800518c:	4218      	tst	r0, r3
    bitstatus = RESET;
  }

  /* Return the RCC_IT status */
  return  bitstatus;
}
 800518e:	bf0c      	ite	eq
 8005190:	2000      	moveq	r0, #0
 8005192:	2001      	movne	r0, #1
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800519c:	4b01      	ldr	r3, [pc, #4]	; (80051a4 <RCC_ClearITPendingBit+0x8>)
 800519e:	7018      	strb	r0, [r3, #0]
}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	4002100a 	.word	0x4002100a

080051a8 <SDIO_DeInit>:
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 80051a8:	4b06      	ldr	r3, [pc, #24]	; (80051c4 <SDIO_DeInit+0x1c>)
  SDIO->ARG = 0x00000000;
  SDIO->CMD = 0x00000000;
  SDIO->DTIMER = 0x00000000;
  SDIO->DLEN = 0x00000000;
  SDIO->DCTRL = 0x00000000;
  SDIO->ICR = 0x00C007FF;
 80051aa:	4907      	ldr	r1, [pc, #28]	; (80051c8 <SDIO_DeInit+0x20>)
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
  SDIO->POWER = 0x00000000;
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]
  SDIO->CLKCR = 0x00000000;
 80051b0:	605a      	str	r2, [r3, #4]
  SDIO->ARG = 0x00000000;
 80051b2:	609a      	str	r2, [r3, #8]
  SDIO->CMD = 0x00000000;
 80051b4:	60da      	str	r2, [r3, #12]
  SDIO->DTIMER = 0x00000000;
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24
  SDIO->DLEN = 0x00000000;
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28
  SDIO->DCTRL = 0x00000000;
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c
  SDIO->ICR = 0x00C007FF;
 80051bc:	6399      	str	r1, [r3, #56]	; 0x38
  SDIO->MASK = 0x00000000;
 80051be:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40018000 	.word	0x40018000
 80051c8:	00c007ff 	.word	0x00c007ff

080051cc <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *   that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 80051cc:	b510      	push	{r4, lr}
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80051ce:	6881      	ldr	r1, [r0, #8]
 80051d0:	6844      	ldr	r4, [r0, #4]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <SDIO_Init+0x30>)
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80051d4:	ea44 0101 	orr.w	r1, r4, r1
 80051d8:	68c4      	ldr	r4, [r0, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 80051da:	6853      	ldr	r3, [r2, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80051dc:	4321      	orrs	r1, r4
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80051de:	6804      	ldr	r4, [r0, #0]
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 80051e0:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80051e4:	4321      	orrs	r1, r4
 80051e6:	6904      	ldr	r4, [r0, #16]
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 80051e8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 80051ec:	4321      	orrs	r1, r4
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 80051ee:	ea41 0303 	orr.w	r3, r1, r3
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 80051f2:	7d01      	ldrb	r1, [r0, #20]
 80051f4:	430b      	orrs	r3, r1
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 80051f6:	6053      	str	r3, [r2, #4]
}
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	bf00      	nop
 80051fc:	40018000 	.word	0x40018000

08005200 <SDIO_StructInit>:
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 8005200:	2300      	movs	r3, #0
 8005202:	7503      	strb	r3, [r0, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 8005204:	6003      	str	r3, [r0, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 8005206:	6043      	str	r3, [r0, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 8005208:	6083      	str	r3, [r0, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800520a:	60c3      	str	r3, [r0, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800520c:	6103      	str	r3, [r0, #16]
}
 800520e:	4770      	bx	lr

08005210 <SDIO_ClockCmd>:
void SDIO_ClockCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 8005210:	4b01      	ldr	r3, [pc, #4]	; (8005218 <SDIO_ClockCmd+0x8>)
 8005212:	6018      	str	r0, [r3, #0]
}
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	423000a0 	.word	0x423000a0

0800521c <SDIO_SetPowerState>:
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER &= PWR_PWRCTRL_MASK;
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <SDIO_SetPowerState+0x14>)
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	f022 0203 	bic.w	r2, r2, #3
 8005224:	601a      	str	r2, [r3, #0]
  SDIO->POWER |= SDIO_PowerState;
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	ea40 0202 	orr.w	r2, r0, r2
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	4770      	bx	lr
 8005230:	40018000 	.word	0x40018000

08005234 <SDIO_GetPowerState>:
  * - 0x02: Power UP
  * - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 8005234:	4b02      	ldr	r3, [pc, #8]	; (8005240 <SDIO_GetPowerState+0xc>)
 8005236:	6818      	ldr	r0, [r3, #0]
}
 8005238:	f000 0003 	and.w	r0, r0, #3
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40018000 	.word	0x40018000

08005244 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 8005244:	4b04      	ldr	r3, [pc, #16]	; (8005258 <SDIO_ITConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8005246:	b111      	cbz	r1, 800524e <SDIO_ITConfig+0xa>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 8005248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524a:	4310      	orrs	r0, r2
 800524c:	e002      	b.n	8005254 <SDIO_ITConfig+0x10>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800524e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005250:	ea22 0000 	bic.w	r0, r2, r0
 8005254:	63d8      	str	r0, [r3, #60]	; 0x3c
 8005256:	4770      	bx	lr
 8005258:	40018000 	.word	0x40018000

0800525c <SDIO_DMACmd>:
void SDIO_DMACmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800525c:	4b01      	ldr	r3, [pc, #4]	; (8005264 <SDIO_DMACmd+0x8>)
 800525e:	6018      	str	r0, [r3, #0]
}
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	4230058c 	.word	0x4230058c

08005268 <SDIO_SendCommand>:
  * @param  SDIO_CmdInitStruct : pointer to a SDIO_CmdInitTypeDef 
  *   structure that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 8005268:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800526a:	6802      	ldr	r2, [r0, #0]
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <SDIO_SendCommand+0x2c>)
 800526e:	609a      	str	r2, [r3, #8]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8005270:	6884      	ldr	r4, [r0, #8]
 8005272:	6841      	ldr	r1, [r0, #4]
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 8005274:	68da      	ldr	r2, [r3, #12]
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 8005276:	ea44 0101 	orr.w	r1, r4, r1
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800527a:	68c4      	ldr	r4, [r0, #12]
 800527c:	6900      	ldr	r0, [r0, #16]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800527e:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005282:	4321      	orrs	r1, r4
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 8005284:	f022 020f 	bic.w	r2, r2, #15
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 8005288:	4301      	orrs	r1, r0
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800528a:	ea41 0202 	orr.w	r2, r1, r2
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800528e:	60da      	str	r2, [r3, #12]
}
 8005290:	bd10      	pop	{r4, pc}
 8005292:	bf00      	nop
 8005294:	40018000 	.word	0x40018000

08005298 <SDIO_CmdStructInit>:
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 8005298:	2300      	movs	r3, #0
 800529a:	6003      	str	r3, [r0, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800529c:	6043      	str	r3, [r0, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800529e:	6083      	str	r3, [r0, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 80052a0:	60c3      	str	r3, [r0, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 80052a2:	6103      	str	r3, [r0, #16]
}
 80052a4:	4770      	bx	lr

080052a6 <SDIO_GetCommandResponse>:
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
  return (uint8_t)(SDIO->RESPCMD);
 80052a6:	4b02      	ldr	r3, [pc, #8]	; (80052b0 <SDIO_GetCommandResponse+0xa>)
 80052a8:	6918      	ldr	r0, [r3, #16]
}
 80052aa:	b2c0      	uxtb	r0, r0
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40018000 	.word	0x40018000

080052b4 <SDIO_GetResponse>:
  *     @arg SDIO_RESP3: Response Register 3
  *     @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 80052b4:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 80052ba:	4b03      	ldr	r3, [pc, #12]	; (80052c8 <SDIO_GetResponse+0x14>)
 80052bc:	18c3      	adds	r3, r0, r3
 80052be:	9301      	str	r3, [sp, #4]
  
  return (*(__IO uint32_t *) tmp); 
 80052c0:	9b01      	ldr	r3, [sp, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
}
 80052c4:	b002      	add	sp, #8
 80052c6:	4770      	bx	lr
 80052c8:	40018014 	.word	0x40018014

080052cc <SDIO_DataConfig>:
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 80052cc:	6802      	ldr	r2, [r0, #0]
 80052ce:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <SDIO_DataConfig+0x28>)
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure that
  *   contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 80052d0:	b510      	push	{r4, lr}
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 80052d2:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 80052d4:	6842      	ldr	r2, [r0, #4]
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 80052d8:	68c4      	ldr	r4, [r0, #12]
 80052da:	6882      	ldr	r2, [r0, #8]
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 80052dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 80052de:	ea44 0202 	orr.w	r2, r4, r2
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 80052e2:	6904      	ldr	r4, [r0, #16]
 80052e4:	6940      	ldr	r0, [r0, #20]
 80052e6:	4322      	orrs	r2, r4

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 80052e8:	f021 01f7 	bic.w	r1, r1, #247	; 0xf7
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 80052ec:	4302      	orrs	r2, r0
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 80052ee:	430a      	orrs	r2, r1
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 80052f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80052f2:	bd10      	pop	{r4, pc}
 80052f4:	40018000 	.word	0x40018000

080052f8 <SDIO_DataStructInit>:
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295
 80052fc:	6003      	str	r3, [r0, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 80052fe:	3301      	adds	r3, #1
 8005300:	6043      	str	r3, [r0, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 8005302:	6083      	str	r3, [r0, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 8005304:	60c3      	str	r3, [r0, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 8005306:	6103      	str	r3, [r0, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 8005308:	6143      	str	r3, [r0, #20]
}
 800530a:	4770      	bx	lr

0800530c <SDIO_GetDataCounter>:
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
  return SDIO->DCOUNT;
 800530c:	4b01      	ldr	r3, [pc, #4]	; (8005314 <SDIO_GetDataCounter+0x8>)
 800530e:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40018000 	.word	0x40018000

08005318 <SDIO_ReadData>:
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
  return SDIO->FIFO;
 8005318:	4b01      	ldr	r3, [pc, #4]	; (8005320 <SDIO_ReadData+0x8>)
 800531a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
}
 800531e:	4770      	bx	lr
 8005320:	40018000 	.word	0x40018000

08005324 <SDIO_WriteData>:
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
  SDIO->FIFO = Data;
 8005324:	4b01      	ldr	r3, [pc, #4]	; (800532c <SDIO_WriteData+0x8>)
 8005326:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
}
 800532a:	4770      	bx	lr
 800532c:	40018000 	.word	0x40018000

08005330 <SDIO_GetFIFOCount>:
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
  return SDIO->FIFOCNT;
 8005330:	4b01      	ldr	r3, [pc, #4]	; (8005338 <SDIO_GetFIFOCount+0x8>)
 8005332:	6c98      	ldr	r0, [r3, #72]	; 0x48
}
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	40018000 	.word	0x40018000

0800533c <SDIO_StartSDIOReadWait>:
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800533c:	4b01      	ldr	r3, [pc, #4]	; (8005344 <SDIO_StartSDIOReadWait+0x8>)
 800533e:	6018      	str	r0, [r3, #0]
}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	423005a0 	.word	0x423005a0

08005348 <SDIO_StopSDIOReadWait>:
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 8005348:	4b01      	ldr	r3, [pc, #4]	; (8005350 <SDIO_StopSDIOReadWait+0x8>)
 800534a:	6018      	str	r0, [r3, #0]
}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	423005a4 	.word	0x423005a4

08005354 <SDIO_SetSDIOReadWaitMode>:
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 8005354:	4b01      	ldr	r3, [pc, #4]	; (800535c <SDIO_SetSDIOReadWaitMode+0x8>)
 8005356:	6018      	str	r0, [r3, #0]
}
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	423005a8 	.word	0x423005a8

08005360 <SDIO_SetSDIOOperation>:
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 8005360:	4b01      	ldr	r3, [pc, #4]	; (8005368 <SDIO_SetSDIOOperation+0x8>)
 8005362:	6018      	str	r0, [r3, #0]
}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	423005ac 	.word	0x423005ac

0800536c <SDIO_SendSDIOSuspendCmd>:
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800536c:	4b01      	ldr	r3, [pc, #4]	; (8005374 <SDIO_SendSDIOSuspendCmd+0x8>)
 800536e:	6018      	str	r0, [r3, #0]
}
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	423001ac 	.word	0x423001ac

08005378 <SDIO_CommandCompletionCmd>:
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 8005378:	4b01      	ldr	r3, [pc, #4]	; (8005380 <SDIO_CommandCompletionCmd+0x8>)
 800537a:	6018      	str	r0, [r3, #0]
}
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	423001b0 	.word	0x423001b0

08005384 <SDIO_CEATAITCmd>:
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 8005384:	f000 0001 	and.w	r0, r0, #1
 8005388:	4b02      	ldr	r3, [pc, #8]	; (8005394 <SDIO_CEATAITCmd+0x10>)
 800538a:	f080 0001 	eor.w	r0, r0, #1
 800538e:	6018      	str	r0, [r3, #0]
}
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	423001b4 	.word	0x423001b4

08005398 <SDIO_SendCEATACmd>:
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 8005398:	4b01      	ldr	r3, [pc, #4]	; (80053a0 <SDIO_SendCEATACmd+0x8>)
 800539a:	6018      	str	r0, [r3, #0]
}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	423001b8 	.word	0x423001b8

080053a4 <SDIO_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <SDIO_GetFlagStatus+0x10>)
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 80053a8:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80053aa:	bf0c      	ite	eq
 80053ac:	2000      	moveq	r0, #0
 80053ae:	2001      	movne	r0, #1
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40018000 	.word	0x40018000

080053b8 <SDIO_ClearFlag>:
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 80053b8:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <SDIO_ClearFlag+0x8>)
 80053ba:	6398      	str	r0, [r3, #56]	; 0x38
}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40018000 	.word	0x40018000

080053c4 <SDIO_GetITStatus>:
{ 
  ITStatus bitstatus = RESET;
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 80053c4:	4b03      	ldr	r3, [pc, #12]	; (80053d4 <SDIO_GetITStatus+0x10>)
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  {
    bitstatus = SET;
 80053c8:	4218      	tst	r0, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 80053ca:	bf0c      	ite	eq
 80053cc:	2000      	moveq	r0, #0
 80053ce:	2001      	movne	r0, #1
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40018000 	.word	0x40018000

080053d8 <SDIO_ClearITPendingBit>:
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <SDIO_ClearITPendingBit+0x8>)
 80053da:	6398      	str	r0, [r3, #56]	; 0x38
}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40018000 	.word	0x40018000

080053e4 <SPI_I2S_DeInit>:
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <SPI_I2S_DeInit+0x58>)
  *   reset values (Affects also the I2Ss).
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 80053e6:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 80053e8:	4298      	cmp	r0, r3
 80053ea:	d10b      	bne.n	8005404 <SPI_I2S_DeInit+0x20>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 80053ec:	2101      	movs	r1, #1
 80053ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053f2:	f7ff fe6d 	bl	80050d0 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 80053f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80053fa:	2100      	movs	r1, #0
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
    }
  }
}
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (SPIx == SPI1)
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 8005400:	f7ff be66 	b.w	80050d0 <RCC_APB2PeriphResetCmd>
  }
  else if (SPIx == SPI2)
 8005404:	4b0e      	ldr	r3, [pc, #56]	; (8005440 <SPI_I2S_DeInit+0x5c>)
 8005406:	4298      	cmp	r0, r3
 8005408:	d107      	bne.n	800541a <SPI_I2S_DeInit+0x36>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800540a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800540e:	2101      	movs	r1, #1
 8005410:	f7ff fe6a 	bl	80050e8 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 8005414:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005418:	e009      	b.n	800542e <SPI_I2S_DeInit+0x4a>
  }
  else
  {
    if (SPIx == SPI3)
 800541a:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <SPI_I2S_DeInit+0x60>)
 800541c:	4298      	cmp	r0, r3
 800541e:	d10b      	bne.n	8005438 <SPI_I2S_DeInit+0x54>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 8005420:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005424:	2101      	movs	r1, #1
 8005426:	f7ff fe5f 	bl	80050e8 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800542a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800542e:	2100      	movs	r1, #0
    }
  }
}
 8005430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (SPIx == SPI3)
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 8005434:	f7ff be58 	b.w	80050e8 <RCC_APB1PeriphResetCmd>
 8005438:	bd10      	pop	{r4, pc}
 800543a:	bf00      	nop
 800543c:	40013000 	.word	0x40013000
 8005440:	40003800 	.word	0x40003800
 8005444:	40003c00 	.word	0x40003c00

08005448 <SPI_Init>:
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005448:	880b      	ldrh	r3, [r1, #0]
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *   contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800544a:	b510      	push	{r4, lr}
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800544c:	884c      	ldrh	r4, [r1, #2]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800544e:	8802      	ldrh	r2, [r0, #0]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8005450:	ea44 0303 	orr.w	r3, r4, r3
 8005454:	888c      	ldrh	r4, [r1, #4]

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8005456:	f402 5241 	and.w	r2, r2, #12352	; 0x3040
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800545a:	4323      	orrs	r3, r4
 800545c:	88cc      	ldrh	r4, [r1, #6]
 800545e:	4323      	orrs	r3, r4
 8005460:	890c      	ldrh	r4, [r1, #8]
 8005462:	4323      	orrs	r3, r4
 8005464:	894c      	ldrh	r4, [r1, #10]
 8005466:	4323      	orrs	r3, r4
 8005468:	898c      	ldrh	r4, [r1, #12]
 800546a:	4323      	orrs	r3, r4
 800546c:	89cc      	ldrh	r4, [r1, #14]
 800546e:	4323      	orrs	r3, r4
 8005470:	ea42 0303 	orr.w	r3, r2, r3
 8005474:	b29b      	uxth	r3, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8005476:	8003      	strh	r3, [r0, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8005478:	8b83      	ldrh	r3, [r0, #28]
 800547a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800547e:	041b      	lsls	r3, r3, #16
 8005480:	0c1b      	lsrs	r3, r3, #16
 8005482:	8383      	strh	r3, [r0, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8005484:	8a0b      	ldrh	r3, [r1, #16]
 8005486:	8203      	strh	r3, [r0, #16]
}
 8005488:	bd10      	pop	{r4, pc}

0800548a <I2S_Init>:
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800548a:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 800548c:	8b83      	ldrh	r3, [r0, #28]
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800548e:	b087      	sub	sp, #28
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 8005490:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 8005494:	f023 031f 	bic.w	r3, r3, #31
 8005498:	041b      	lsls	r3, r3, #16
 800549a:	0c1b      	lsrs	r3, r3, #16
 800549c:	8383      	strh	r3, [r0, #28]
  SPIx->I2SPR = 0x0002;
 800549e:	2302      	movs	r3, #2
 80054a0:	8403      	strh	r3, [r0, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80054a2:	688b      	ldr	r3, [r1, #8]
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80054a4:	8b86      	ldrh	r6, [r0, #28]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80054a6:	2b02      	cmp	r3, #2
  *  and the product configuration). But in case the prescaler value is greater 
  *  than 511, the default value (0x02) will be configured instead.  *   
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 80054a8:	4604      	mov	r4, r0
 80054aa:	460d      	mov	r5, r1
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
  SPIx->I2SPR = 0x0002;
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 80054ac:	b2b6      	uxth	r6, r6
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 80054ae:	d023      	beq.n	80054f8 <I2S_Init+0x6e>
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 80054b0:	a801      	add	r0, sp, #4
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 80054b2:	888f      	ldrh	r7, [r1, #4]
      /* Get the source clock value: based on System Clock value */
      sourceclock = RCC_Clocks.SYSCLK_Frequency;
    }        
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
 80054b4:	f7ff fd9e 	bl	8004ff4 <RCC_GetClocksFreq>
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80054b8:	88eb      	ldrh	r3, [r5, #6]
  {
    /* Check the frame length (For the Prescaler computing) */
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 80054ba:	2f00      	cmp	r7, #0
 80054bc:	bf14      	ite	ne
 80054be:	2702      	movne	r7, #2
 80054c0:	2701      	moveq	r7, #1
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80054c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
#else /* STM32F10X_HD */
    /* I2S Clock source is System clock: Get System Clock frequency */
    RCC_GetClocksFreq(&RCC_Clocks);      
      
    /* Get the source clock value: based on System Clock value */
    sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 80054c6:	9a01      	ldr	r2, [sp, #4]
 80054c8:	f04f 030a 	mov.w	r3, #10
#endif /* STM32F10X_CL */    

    /* Compute the Real divider depending on the MCLK output state with a flaoting point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 80054cc:	d101      	bne.n	80054d2 <I2S_Init+0x48>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80054ce:	0a12      	lsrs	r2, r2, #8
 80054d0:	e002      	b.n	80054d8 <I2S_Init+0x4e>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80054d2:	017f      	lsls	r7, r7, #5
 80054d4:	fbb2 f2f7 	udiv	r2, r2, r7
 80054d8:	4353      	muls	r3, r2
 80054da:	68a9      	ldr	r1, [r5, #8]
    }
    
    /* Remove the flaoting point */
    tmp = tmp / 10;  
 80054dc:	220a      	movs	r2, #10
      tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 80054de:	fbb3 f3f1 	udiv	r3, r3, r1
 80054e2:	3305      	adds	r3, #5
 80054e4:	b29b      	uxth	r3, r3
    }
    
    /* Remove the flaoting point */
    tmp = tmp / 10;  
 80054e6:	fbb3 f3f2 	udiv	r3, r3, r2
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80054ea:	f003 0201 	and.w	r2, r3, #1
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80054ee:	0212      	lsls	r2, r2, #8
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	b29b      	uxth	r3, r3
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 80054f4:	b292      	uxth	r2, r2
 80054f6:	e000      	b.n	80054fa <I2S_Init+0x70>
  tmpreg = SPIx->I2SCFGR;
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
  {
    i2sodd = (uint16_t)0;
 80054f8:	2200      	movs	r2, #0
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
  }
  
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 80054fa:	1e99      	subs	r1, r3, #2
 80054fc:	b289      	uxth	r1, r1
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 80054fe:	29fe      	cmp	r1, #254	; 0xfe
 8005500:	bf28      	it	cs
 8005502:	2200      	movcs	r2, #0
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 8005504:	88e9      	ldrh	r1, [r5, #6]
  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
  {
    /* Set the default values */
    i2sdiv = 2;
    i2sodd = 0;
 8005506:	bf28      	it	cs
 8005508:	2302      	movcs	r3, #2
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 800550a:	4313      	orrs	r3, r2
 800550c:	430b      	orrs	r3, r1
 800550e:	b29b      	uxth	r3, r3
 8005510:	8423      	strh	r3, [r4, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005512:	882b      	ldrh	r3, [r5, #0]

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 8005514:	886a      	ldrh	r2, [r5, #2]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 8005516:	ea46 0303 	orr.w	r3, r6, r3
 800551a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));  
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800551e:	4313      	orrs	r3, r2
 8005520:	88aa      	ldrh	r2, [r5, #4]
 8005522:	4313      	orrs	r3, r2
 8005524:	89aa      	ldrh	r2, [r5, #12]
 8005526:	4313      	orrs	r3, r2
 8005528:	b29b      	uxth	r3, r3
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;   
 800552a:	83a3      	strh	r3, [r4, #28]
}
 800552c:	b007      	add	sp, #28
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005530 <SPI_StructInit>:
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8005530:	2300      	movs	r3, #0
 8005532:	8003      	strh	r3, [r0, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 8005534:	8043      	strh	r3, [r0, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 8005536:	8083      	strh	r3, [r0, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 8005538:	80c3      	strh	r3, [r0, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800553a:	8103      	strh	r3, [r0, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800553c:	8143      	strh	r3, [r0, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800553e:	8183      	strh	r3, [r0, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 8005540:	81c3      	strh	r3, [r0, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 8005542:	2307      	movs	r3, #7
 8005544:	8203      	strh	r3, [r0, #16]
}
 8005546:	4770      	bx	lr

08005548 <I2S_StructInit>:
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 8005548:	2300      	movs	r3, #0
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800554a:	2202      	movs	r2, #2
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800554c:	8003      	strh	r3, [r0, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800554e:	8043      	strh	r3, [r0, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 8005550:	8083      	strh	r3, [r0, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 8005552:	80c3      	strh	r3, [r0, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 8005554:	6082      	str	r2, [r0, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 8005556:	8183      	strh	r3, [r0, #12]
}
 8005558:	4770      	bx	lr

0800555a <SPI_Cmd>:
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800555a:	b121      	cbz	r1, 8005566 <SPI_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800555c:	8803      	ldrh	r3, [r0, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005564:	e004      	b.n	8005570 <SPI_Cmd+0x16>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
 8005566:	8803      	ldrh	r3, [r0, #0]
 8005568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800556c:	041b      	lsls	r3, r3, #16
 800556e:	0c1b      	lsrs	r3, r3, #16
 8005570:	8003      	strh	r3, [r0, #0]
 8005572:	4770      	bx	lr

08005574 <I2S_Cmd>:
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8005574:	b121      	cbz	r1, 8005580 <I2S_Cmd+0xc>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 8005576:	8b83      	ldrh	r3, [r0, #28]
 8005578:	b29b      	uxth	r3, r3
 800557a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800557e:	e004      	b.n	800558a <I2S_Cmd+0x16>
  }
  else
  {
    /* Disable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 8005580:	8b83      	ldrh	r3, [r0, #28]
 8005582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005586:	041b      	lsls	r3, r3, #16
 8005588:	0c1b      	lsrs	r3, r3, #16
 800558a:	8383      	strh	r3, [r0, #28]
 800558c:	4770      	bx	lr

0800558e <SPI_I2S_ITConfig>:

  /* Get the SPI/I2S IT index */
  itpos = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800558e:	0909      	lsrs	r1, r1, #4
 8005590:	2301      	movs	r3, #1
 8005592:	408b      	lsls	r3, r1
 8005594:	b29b      	uxth	r3, r3

  if (NewState != DISABLE)
 8005596:	b11a      	cbz	r2, 80055a0 <SPI_I2S_ITConfig+0x12>
  {
    /* Enable the selected SPI/I2S interrupt */
    SPIx->CR2 |= itmask;
 8005598:	8882      	ldrh	r2, [r0, #4]
 800559a:	b292      	uxth	r2, r2
 800559c:	4313      	orrs	r3, r2
 800559e:	e003      	b.n	80055a8 <SPI_I2S_ITConfig+0x1a>
  }
  else
  {
    /* Disable the selected SPI/I2S interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 80055a0:	8882      	ldrh	r2, [r0, #4]
 80055a2:	b292      	uxth	r2, r2
 80055a4:	ea22 0303 	bic.w	r3, r2, r3
 80055a8:	8083      	strh	r3, [r0, #4]
 80055aa:	4770      	bx	lr

080055ac <SPI_I2S_DMACmd>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
  if (NewState != DISABLE)
 80055ac:	b11a      	cbz	r2, 80055b6 <SPI_I2S_DMACmd+0xa>
  {
    /* Enable the selected SPI/I2S DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 80055ae:	8883      	ldrh	r3, [r0, #4]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4319      	orrs	r1, r3
 80055b4:	e003      	b.n	80055be <SPI_I2S_DMACmd+0x12>
  }
  else
  {
    /* Disable the selected SPI/I2S DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 80055b6:	8883      	ldrh	r3, [r0, #4]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	ea23 0101 	bic.w	r1, r3, r1
 80055be:	8081      	strh	r1, [r0, #4]
 80055c0:	4770      	bx	lr

080055c2 <SPI_I2S_SendData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80055c2:	8181      	strh	r1, [r0, #12]
}
 80055c4:	4770      	bx	lr

080055c6 <SPI_I2S_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80055c6:	8980      	ldrh	r0, [r0, #12]
}
 80055c8:	b280      	uxth	r0, r0
 80055ca:	4770      	bx	lr

080055cc <SPI_NSSInternalSoftwareConfig>:
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 80055cc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d004      	beq.n	80055de <SPI_NSSInternalSoftwareConfig+0x12>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 80055d4:	8803      	ldrh	r3, [r0, #0]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	e004      	b.n	80055e8 <SPI_NSSInternalSoftwareConfig+0x1c>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 80055de:	8803      	ldrh	r3, [r0, #0]
 80055e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	0c1b      	lsrs	r3, r3, #16
 80055e8:	8003      	strh	r3, [r0, #0]
 80055ea:	4770      	bx	lr

080055ec <SPI_SSOutputCmd>:
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80055ec:	b121      	cbz	r1, 80055f8 <SPI_SSOutputCmd+0xc>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= CR2_SSOE_Set;
 80055ee:	8883      	ldrh	r3, [r0, #4]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	f043 0304 	orr.w	r3, r3, #4
 80055f6:	e004      	b.n	8005602 <SPI_SSOutputCmd+0x16>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= CR2_SSOE_Reset;
 80055f8:	8883      	ldrh	r3, [r0, #4]
 80055fa:	f023 0304 	bic.w	r3, r3, #4
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	8083      	strh	r3, [r0, #4]
 8005604:	4770      	bx	lr

08005606 <SPI_DataSizeConfig>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 8005606:	8803      	ldrh	r3, [r0, #0]
 8005608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560c:	041b      	lsls	r3, r3, #16
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	8003      	strh	r3, [r0, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 8005612:	8803      	ldrh	r3, [r0, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	ea41 0303 	orr.w	r3, r1, r3
 800561a:	8003      	strh	r3, [r0, #0]
}
 800561c:	4770      	bx	lr

0800561e <SPI_TransmitCRC>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= CR1_CRCNext_Set;
 800561e:	8803      	ldrh	r3, [r0, #0]
 8005620:	b29b      	uxth	r3, r3
 8005622:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005626:	8003      	strh	r3, [r0, #0]
}
 8005628:	4770      	bx	lr

0800562a <SPI_CalculateCRC>:
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800562a:	b121      	cbz	r1, 8005636 <SPI_CalculateCRC+0xc>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= CR1_CRCEN_Set;
 800562c:	8803      	ldrh	r3, [r0, #0]
 800562e:	b29b      	uxth	r3, r3
 8005630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005634:	e004      	b.n	8005640 <SPI_CalculateCRC+0x16>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= CR1_CRCEN_Reset;
 8005636:	8803      	ldrh	r3, [r0, #0]
 8005638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800563c:	041b      	lsls	r3, r3, #16
 800563e:	0c1b      	lsrs	r3, r3, #16
 8005640:	8003      	strh	r3, [r0, #0]
 8005642:	4770      	bx	lr

08005644 <SPI_GetCRC>:
{
  uint16_t crcreg = 0;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 8005644:	2901      	cmp	r1, #1
 8005646:	d002      	beq.n	800564e <SPI_GetCRC+0xa>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 8005648:	8b00      	ldrh	r0, [r0, #24]
 800564a:	b280      	uxth	r0, r0
 800564c:	4770      	bx	lr
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800564e:	8a80      	ldrh	r0, [r0, #20]
 8005650:	b280      	uxth	r0, r0
  }
  /* Return the selected CRC register */
  return crcreg;
}
 8005652:	4770      	bx	lr

08005654 <SPI_GetCRCPolynomial>:
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 8005654:	8a00      	ldrh	r0, [r0, #16]
}
 8005656:	b280      	uxth	r0, r0
 8005658:	4770      	bx	lr

0800565a <SPI_BiDirectionalLineConfig>:
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800565a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800565e:	d104      	bne.n	800566a <SPI_BiDirectionalLineConfig+0x10>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 8005660:	8803      	ldrh	r3, [r0, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005668:	e004      	b.n	8005674 <SPI_BiDirectionalLineConfig+0x1a>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800566a:	8803      	ldrh	r3, [r0, #0]
 800566c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005670:	041b      	lsls	r3, r3, #16
 8005672:	0c1b      	lsrs	r3, r3, #16
 8005674:	8003      	strh	r3, [r0, #0]
 8005676:	4770      	bx	lr

08005678 <SPI_I2S_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8005678:	8903      	ldrh	r3, [r0, #8]
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800567a:	4219      	tst	r1, r3
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
}
 800567c:	bf0c      	ite	eq
 800567e:	2000      	moveq	r0, #0
 8005680:	2001      	movne	r0, #1
 8005682:	4770      	bx	lr

08005684 <SPI_I2S_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
    /* Clear the selected SPI CRC Error (CRCERR) flag */
    SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 8005684:	43c9      	mvns	r1, r1
 8005686:	b289      	uxth	r1, r1
 8005688:	8101      	strh	r1, [r0, #8]
}
 800568a:	4770      	bx	lr

0800568c <SPI_I2S_GetITStatus>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800568c:	2301      	movs	r3, #1
 800568e:	f001 020f 	and.w	r2, r1, #15
 8005692:	fa13 f202 	lsls.w	r2, r3, r2
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8005696:	b510      	push	{r4, lr}

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8005698:	8884      	ldrh	r4, [r0, #4]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800569a:	8900      	ldrh	r0, [r0, #8]

  /* Set the IT mask */
  itmask = 0x01 << itmask;

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800569c:	b2a4      	uxth	r4, r4

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800569e:	b280      	uxth	r0, r0
 80056a0:	4010      	ands	r0, r2
 80056a2:	d005      	beq.n	80056b0 <SPI_I2S_GetITStatus+0x24>

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 80056a4:	0909      	lsrs	r1, r1, #4
 80056a6:	408b      	lsls	r3, r1
  *     @arg SPI_IT_MODF: Mode Fault interrupt.
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 80056a8:	421c      	tst	r4, r3

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 80056aa:	bf0c      	ite	eq
 80056ac:	2000      	moveq	r0, #0
 80056ae:	2001      	movne	r0, #1
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
}
 80056b0:	bd10      	pop	{r4, pc}

080056b2 <SPI_I2S_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 80056b2:	f001 010f 	and.w	r1, r1, #15
 80056b6:	2301      	movs	r3, #1
 80056b8:	408b      	lsls	r3, r1

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 80056ba:	43db      	mvns	r3, r3
 80056bc:	b29b      	uxth	r3, r3
 80056be:	8103      	strh	r3, [r0, #8]
}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <memset>:
 80056c4:	2a03      	cmp	r2, #3
 80056c6:	b2c9      	uxtb	r1, r1
 80056c8:	b470      	push	{r4, r5, r6}
 80056ca:	d808      	bhi.n	80056de <memset+0x1a>
 80056cc:	b12a      	cbz	r2, 80056da <memset+0x16>
 80056ce:	4603      	mov	r3, r0
 80056d0:	1812      	adds	r2, r2, r0
 80056d2:	f803 1b01 	strb.w	r1, [r3], #1
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d1fb      	bne.n	80056d2 <memset+0xe>
 80056da:	bc70      	pop	{r4, r5, r6}
 80056dc:	4770      	bx	lr
 80056de:	1882      	adds	r2, r0, r2
 80056e0:	4604      	mov	r4, r0
 80056e2:	e001      	b.n	80056e8 <memset+0x24>
 80056e4:	f804 1b01 	strb.w	r1, [r4], #1
 80056e8:	f014 0f03 	tst.w	r4, #3
 80056ec:	d1fa      	bne.n	80056e4 <memset+0x20>
 80056ee:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
 80056f2:	fb03 f301 	mul.w	r3, r3, r1
 80056f6:	e01f      	b.n	8005738 <memset+0x74>
 80056f8:	f844 3c40 	str.w	r3, [r4, #-64]
 80056fc:	f844 3c3c 	str.w	r3, [r4, #-60]
 8005700:	f844 3c38 	str.w	r3, [r4, #-56]
 8005704:	f844 3c34 	str.w	r3, [r4, #-52]
 8005708:	f844 3c30 	str.w	r3, [r4, #-48]
 800570c:	f844 3c2c 	str.w	r3, [r4, #-44]
 8005710:	f844 3c28 	str.w	r3, [r4, #-40]
 8005714:	f844 3c24 	str.w	r3, [r4, #-36]
 8005718:	f844 3c20 	str.w	r3, [r4, #-32]
 800571c:	f844 3c1c 	str.w	r3, [r4, #-28]
 8005720:	f844 3c18 	str.w	r3, [r4, #-24]
 8005724:	f844 3c14 	str.w	r3, [r4, #-20]
 8005728:	f844 3c10 	str.w	r3, [r4, #-16]
 800572c:	f844 3c0c 	str.w	r3, [r4, #-12]
 8005730:	f844 3c08 	str.w	r3, [r4, #-8]
 8005734:	f844 3c04 	str.w	r3, [r4, #-4]
 8005738:	1b16      	subs	r6, r2, r4
 800573a:	4625      	mov	r5, r4
 800573c:	3440      	adds	r4, #64	; 0x40
 800573e:	2e3f      	cmp	r6, #63	; 0x3f
 8005740:	dcda      	bgt.n	80056f8 <memset+0x34>
 8005742:	462c      	mov	r4, r5
 8005744:	e007      	b.n	8005756 <memset+0x92>
 8005746:	f844 3c10 	str.w	r3, [r4, #-16]
 800574a:	f844 3c0c 	str.w	r3, [r4, #-12]
 800574e:	f844 3c08 	str.w	r3, [r4, #-8]
 8005752:	f844 3c04 	str.w	r3, [r4, #-4]
 8005756:	1b16      	subs	r6, r2, r4
 8005758:	4625      	mov	r5, r4
 800575a:	3410      	adds	r4, #16
 800575c:	2e0f      	cmp	r6, #15
 800575e:	dcf2      	bgt.n	8005746 <memset+0x82>
 8005760:	e001      	b.n	8005766 <memset+0xa2>
 8005762:	f845 3b04 	str.w	r3, [r5], #4
 8005766:	1b54      	subs	r4, r2, r5
 8005768:	2c03      	cmp	r4, #3
 800576a:	dcfa      	bgt.n	8005762 <memset+0x9e>
 800576c:	e001      	b.n	8005772 <memset+0xae>
 800576e:	f805 1b01 	strb.w	r1, [r5], #1
 8005772:	4295      	cmp	r5, r2
 8005774:	d3fb      	bcc.n	800576e <memset+0xaa>
 8005776:	e7b0      	b.n	80056da <memset+0x16>

08005778 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8005778:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800577a:	e003      	b.n	8005784 <LoopCopyDataInit>

0800577c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <LoopFillZerobss+0xc>)
  ldr  r3, [r3, r1]
 800577e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005780:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005782:	3104      	adds	r1, #4

08005784 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005784:	4808      	ldr	r0, [pc, #32]	; (80057a8 <LoopFillZerobss+0x10>)
  ldr  r3, =_edata
 8005786:	4b09      	ldr	r3, [pc, #36]	; (80057ac <LoopFillZerobss+0x14>)
  adds  r2, r0, r1
 8005788:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800578a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800578c:	d3f6      	bcc.n	800577c <CopyDataInit>
  ldr  r2, =_sbss
 800578e:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <LoopFillZerobss+0x18>)
  b  LoopFillZerobss
 8005790:	e002      	b.n	8005798 <LoopFillZerobss>

08005792 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005792:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005794:	f842 3b04 	str.w	r3, [r2], #4

08005798 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <LoopFillZerobss+0x1c>)
  cmp  r2, r3
 800579a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800579c:	d3f9      	bcc.n	8005792 <FillZerobss>
/* Call the clock system intitialization function.*/
//  bl  SystemInit
/* Call the application's entry point.*/
  bl  main
 800579e:	f7fa fdb7 	bl	8000310 <main>
  bx  lr
 80057a2:	4770      	bx	lr
 80057a4:	08005854 	.word	0x08005854
 80057a8:	20000000 	.word	0x20000000
 80057ac:	20000024 	.word	0x20000024
 80057b0:	20000024 	.word	0x20000024
 80057b4:	20000504 	.word	0x20000504

080057b8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057b8:	e7fe      	b.n	80057b8 <ADC1_2_IRQHandler>

080057ba <fatstr.3349>:
 80057ba:	4146 0054                                   FAT.

080057be <cvt.3309>:
 80057be:	8180 8382 8584 8786 8988 8b8a 8d8c 8f8e     ................
 80057ce:	9190 9392 9594 9796 9998 9b8a 8d8c 8f8e     ................
 80057de:	a1a0 a3a2 a5a4 a7a6 a9a8 abaa adac afae     ................
 80057ee:	b1b0 a3b2 b5b4 b7b6 a5b8 bbaa bdbc afbc     ................
 80057fe:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
 800580e:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
 800581e:	c1c0 c3c2 c5c4 c7c6 c9c8 cbca cdcc cfce     ................
 800582e:	d1d0 d3d2 d5d4 f7d6 d9d8 dbda dddc ffde     ................
 800583e:	6574 7473 6d2e 3370 2000 2a22 2c2b 3d5b     test.mp3. "*+,[=
 800584e:	7c5d 007f 0000                              ]|....

   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ff.c"
  23              	.Ltext0:
  24              		.file 1 "../fatfs/ff.c"
 19861              		.align	1
 19862              		.thumb
 19863              		.thumb_func
 19865              	mem_cpy:
 19866              	.LFB29:
   1:../fatfs/ff.c **** /*----------------------------------------------------------------------------/
   2:../fatfs/ff.c **** /  FatFs - FAT file system module  R0.07c                    (C)ChaN, 2009
   3:../fatfs/ff.c **** /-----------------------------------------------------------------------------/
   4:../fatfs/ff.c **** / FatFs module is an open source software to implement FAT file system to
   5:../fatfs/ff.c **** / small embedded systems. This is a free software and is opened for education,
   6:../fatfs/ff.c **** / research and commercial use under license policy of following trems.
   7:../fatfs/ff.c **** /
   8:../fatfs/ff.c **** /  Copyright (C) 2009, ChaN, all right reserved.
   9:../fatfs/ff.c **** /
  10:../fatfs/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../fatfs/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../fatfs/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../fatfs/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../fatfs/ff.c **** /
  15:../fatfs/ff.c **** /-----------------------------------------------------------------------------/
  16:../fatfs/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../fatfs/ff.c **** /
  18:../fatfs/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../fatfs/ff.c **** /
  20:../fatfs/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../fatfs/ff.c **** /                   Removed unbuffered mode.
  22:../fatfs/ff.c **** /                   Fixed a problem on small (<32M) patition.
  23:../fatfs/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../fatfs/ff.c **** /
  25:../fatfs/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../fatfs/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../fatfs/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algolithm to write files fast.
  28:../fatfs/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../fatfs/ff.c **** /
  30:../fatfs/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../fatfs/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../fatfs/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../fatfs/ff.c **** /                   Added f_mkfs().
  34:../fatfs/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a plysical drive.
  35:../fatfs/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../fatfs/ff.c **** /                   Added minimization level 3.
  37:../fatfs/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../fatfs/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../fatfs/ff.c **** /                   Added FSInfo support.
  40:../fatfs/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../fatfs/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../fatfs/ff.c **** /
  43:../fatfs/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../fatfs/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:../fatfs/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../fatfs/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../fatfs/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../fatfs/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../fatfs/ff.c **** /                   Fixed cached sector is not flushed when create and close
  50:../fatfs/ff.c **** /                   without write.
  51:../fatfs/ff.c **** /
  52:../fatfs/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  53:../fatfs/ff.c **** /                   Improved performance of f_lseek() on moving to the same
  54:../fatfs/ff.c **** /                   or following cluster.
  55:../fatfs/ff.c **** /
  56:../fatfs/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option.
  57:../fatfs/ff.c **** /                   Added long file name support.
  58:../fatfs/ff.c **** /                   Added multiple code page support.
  59:../fatfs/ff.c **** /                   Added re-entrancy for multitask operation.
  60:../fatfs/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  61:../fatfs/ff.c **** /                   Added rewind option to f_readdir().
  62:../fatfs/ff.c **** /                   Changed result code of critical errors.
  63:../fatfs/ff.c **** /                   Renamed string functions to avoid name collision.
  64:../fatfs/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  65:../fatfs/ff.c **** /                   Added multiple sector size support.
  66:../fatfs/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() may return FR_OK on error.
  67:../fatfs/ff.c **** /                   Fixed wrong cache control in f_lseek().
  68:../fatfs/ff.c **** /                   Added relative path feature.
  69:../fatfs/ff.c **** /                   Added f_chdir() and f_chdrive().
  70:../fatfs/ff.c **** /                   Added proper case conversion to extended char.
  71:../fatfs/ff.c **** /---------------------------------------------------------------------------*/
  72:../fatfs/ff.c **** 
  73:../fatfs/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  74:../fatfs/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  75:../fatfs/ff.c **** #include "Config.h"			/* FatFs configurations and declarations */
  76:../fatfs/ff.c **** /*--------------------------------------------------------------------------
  77:../fatfs/ff.c **** 
  78:../fatfs/ff.c ****    Module Private Definitions
  79:../fatfs/ff.c **** 
  80:../fatfs/ff.c **** ---------------------------------------------------------------------------*/
  81:../fatfs/ff.c **** 
  82:../fatfs/ff.c **** #if _FS_REENTRANT
  83:../fatfs/ff.c **** #if _USE_LFN == 1
  84:../fatfs/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
  85:../fatfs/ff.c **** #endif
  86:../fatfs/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
  87:../fatfs/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
  88:../fatfs/ff.c **** 
  89:../fatfs/ff.c **** #else
  90:../fatfs/ff.c **** #define	ENTER_FF(fs)
  91:../fatfs/ff.c **** #define LEAVE_FF(fs, res)	return res
  92:../fatfs/ff.c **** 
  93:../fatfs/ff.c **** #endif
  94:../fatfs/ff.c **** 
  95:../fatfs/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
  96:../fatfs/ff.c **** 
  97:../fatfs/ff.c **** #ifndef NULL
  98:../fatfs/ff.c **** #define	NULL	0
  99:../fatfs/ff.c **** #endif
 100:../fatfs/ff.c **** 
 101:../fatfs/ff.c **** /* Name status flags */
 102:../fatfs/ff.c **** #define NS_LOSS		0x01	/* Lossy conversion */
 103:../fatfs/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 104:../fatfs/ff.c **** #define NS_LAST		0x04	/* Last segment */
 105:../fatfs/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 106:../fatfs/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 107:../fatfs/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 108:../fatfs/ff.c **** 
 109:../fatfs/ff.c **** 
 110:../fatfs/ff.c **** 
 111:../fatfs/ff.c **** 
 112:../fatfs/ff.c **** /*--------------------------------------------------------------------------
 113:../fatfs/ff.c **** 
 114:../fatfs/ff.c ****    Private Work Area
 115:../fatfs/ff.c **** 
 116:../fatfs/ff.c **** ---------------------------------------------------------------------------*/
 117:../fatfs/ff.c **** 
 118:../fatfs/ff.c **** static
 119:../fatfs/ff.c **** FATFS *FatFs[_DRIVES];	/* Pointer to the file system objects (logical drives) */
 120:../fatfs/ff.c **** 
 121:../fatfs/ff.c **** static
 122:../fatfs/ff.c **** WORD Fsid;				/* File system mount ID */
 123:../fatfs/ff.c **** 
 124:../fatfs/ff.c **** #if _FS_RPATH
 125:../fatfs/ff.c **** static
 126:../fatfs/ff.c **** BYTE Drive;				/* Current drive */
 127:../fatfs/ff.c **** #endif
 128:../fatfs/ff.c **** 
 129:../fatfs/ff.c **** 
 130:../fatfs/ff.c **** #if _USE_LFN == 1	/* LFN with static LFN working buffer */
 131:../fatfs/ff.c **** static
 132:../fatfs/ff.c **** WORD LfnBuf[_MAX_LFN + 1];
 133:../fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR *lp = LfnBuf
 134:../fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 135:../fatfs/ff.c **** 
 136:../fatfs/ff.c **** #elif _USE_LFN > 1	/* LFN with dynamic LFN working buffer */
 137:../fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]; WCHAR lbuf[_MAX_LFN + 1], *lp = lbuf
 138:../fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp; dj.lfn = lp
 139:../fatfs/ff.c **** 
 140:../fatfs/ff.c **** #else				/* No LFN */
 141:../fatfs/ff.c **** #define	NAMEBUF(sp,lp)	BYTE sp[12]
 142:../fatfs/ff.c **** #define INITBUF(dj,sp,lp)	dj.fn = sp
 143:../fatfs/ff.c **** 
 144:../fatfs/ff.c **** #endif
 145:../fatfs/ff.c **** 
 146:../fatfs/ff.c **** 
 147:../fatfs/ff.c **** 
 148:../fatfs/ff.c **** 
 149:../fatfs/ff.c **** /*--------------------------------------------------------------------------
 150:../fatfs/ff.c **** 
 151:../fatfs/ff.c ****    Private Functions
 152:../fatfs/ff.c **** 
 153:../fatfs/ff.c **** ---------------------------------------------------------------------------*/
 154:../fatfs/ff.c **** 
 155:../fatfs/ff.c **** 
 156:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 157:../fatfs/ff.c **** /* String functions                                                      */
 158:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 159:../fatfs/ff.c **** 
 160:../fatfs/ff.c **** /* Copy memory to memory */
 161:../fatfs/ff.c **** static
 162:../fatfs/ff.c **** void mem_cpy (void* dst, const void* src, int cnt) {
 19867              		.loc 1 162 0
 19868              		.cfi_startproc
 19869              		@ args = 0, pretend = 0, frame = 0
 19870              		@ frame_needed = 0, uses_anonymous_args = 0
 19871              		@ link register save eliminated.
 19872              	.LVL0:
 163:../fatfs/ff.c **** 	char *d = (char*)dst;
 164:../fatfs/ff.c **** 	const char *s = (const char *)src;
 165:../fatfs/ff.c **** 	while (cnt--) *d++ = *s++;
 19873              		.loc 1 165 0
 19874 0000 03E0     		b	.L2
 19875              	.LVL1:
 19876              	.L3:
 19877              		.loc 1 165 0 is_stmt 0 discriminator 2
 19878 0002 11F8013B 		ldrb	r3, [r1], #1	@ zero_extendqisi2
 19879 0006 00F8013B 		strb	r3, [r0], #1
 19880              	.LVL2:
 19881              	.L2:
 19882              		.loc 1 165 0 discriminator 1
 19883 000a 013A     		subs	r2, r2, #1
 19884              	.LVL3:
 19885 000c F9D2     		bcs	.L3
 166:../fatfs/ff.c **** }
 19886              		.loc 1 166 0 is_stmt 1
 19887 000e 7047     		bx	lr
 19888              		.cfi_endproc
 19889              	.LFE29:
 19891              		.align	1
 19892              		.thumb
 19893              		.thumb_func
 19895              	mem_set:
 19896              	.LFB30:
 167:../fatfs/ff.c **** 
 168:../fatfs/ff.c **** /* Fill memory */
 169:../fatfs/ff.c **** static
 170:../fatfs/ff.c **** void mem_set (void* dst, int val, int cnt) {
 19897              		.loc 1 170 0
 19898              		.cfi_startproc
 19899              		@ args = 0, pretend = 0, frame = 0
 19900              		@ frame_needed = 0, uses_anonymous_args = 0
 19901              		@ link register save eliminated.
 19902              	.LVL4:
 171:../fatfs/ff.c **** 	char *d = (char*)dst;
 172:../fatfs/ff.c **** 	while (cnt--) *d++ = (char)val;
 19903              		.loc 1 172 0
 19904 0010 01E0     		b	.L5
 19905              	.LVL5:
 19906              	.L6:
 19907              		.loc 1 172 0 is_stmt 0 discriminator 2
 19908 0012 00F8011B 		strb	r1, [r0], #1
 19909              	.LVL6:
 19910              	.L5:
 19911              		.loc 1 172 0 discriminator 1
 19912 0016 013A     		subs	r2, r2, #1
 19913              	.LVL7:
 19914 0018 FBD2     		bcs	.L6
 173:../fatfs/ff.c **** }
 19915              		.loc 1 173 0 is_stmt 1
 19916 001a 7047     		bx	lr
 19917              		.cfi_endproc
 19918              	.LFE30:
 19920              		.align	1
 19921              		.thumb
 19922              		.thumb_func
 19924              	mem_cmp:
 19925              	.LFB31:
 174:../fatfs/ff.c **** 
 175:../fatfs/ff.c **** /* Compare memory to memory */
 176:../fatfs/ff.c **** static
 177:../fatfs/ff.c **** int mem_cmp (const void* dst, const void* src, int cnt) {
 19926              		.loc 1 177 0
 19927              		.cfi_startproc
 19928              		@ args = 0, pretend = 0, frame = 0
 19929              		@ frame_needed = 0, uses_anonymous_args = 0
 19930              	.LVL8:
 19931 001c 30B5     		push	{r4, r5, lr}
 19932              	.LCFI0:
 19933              		.cfi_def_cfa_offset 12
 19934              		.loc 1 177 0
 19935 001e 0346     		mov	r3, r0
 19936              	.LVL9:
 178:../fatfs/ff.c **** 	const char *d = (const char *)dst, *s = (const char *)src;
 179:../fatfs/ff.c **** 	int r = 0;
 180:../fatfs/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 19937              		.loc 1 180 0
 19938 0020 0024     		movs	r4, #0
 19939              		.cfi_offset 14, -4
 19940              		.cfi_offset 5, -8
 19941              		.cfi_offset 4, -12
 19942              	.LVL10:
 19943              	.L9:
 19944              		.loc 1 180 0 is_stmt 0 discriminator 1
 19945 0022 32B1     		cbz	r2, .L10
 19946              		.loc 1 180 0 discriminator 2
 19947 0024 1D5D     		ldrb	r5, [r3, r4]	@ zero_extendqisi2
 19948 0026 085D     		ldrb	r0, [r1, r4]	@ zero_extendqisi2
 19949              	.LVL11:
 19950 0028 013A     		subs	r2, r2, #1
 19951 002a 0134     		adds	r4, r4, #1
 19952 002c 281A     		subs	r0, r5, r0
 19953              	.LVL12:
 19954 002e F8D0     		beq	.L9
 19955 0030 30BD     		pop	{r4, r5, pc}
 19956              	.LVL13:
 19957              	.L10:
 19958              		.loc 1 180 0
 19959 0032 1046     		mov	r0, r2
 19960              	.LVL14:
 181:../fatfs/ff.c **** 	return r;
 182:../fatfs/ff.c **** }
 19961              		.loc 1 182 0 is_stmt 1
 19962 0034 30BD     		pop	{r4, r5, pc}
 19963              		.cfi_endproc
 19964              	.LFE31:
 19966              		.align	1
 19967              		.thumb
 19968              		.thumb_func
 19970              	clust2sect:
 19971              	.LFB39:
 183:../fatfs/ff.c **** 
 184:../fatfs/ff.c **** /* Check if chr is contained in the string */
 185:../fatfs/ff.c **** static
 186:../fatfs/ff.c **** int chk_chr (const char* str, int chr) {
 187:../fatfs/ff.c **** 	while (*str && *str != chr) str++;
 188:../fatfs/ff.c **** 	return *str;
 189:../fatfs/ff.c **** }
 190:../fatfs/ff.c **** 
 191:../fatfs/ff.c **** 
 192:../fatfs/ff.c **** 
 193:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 194:../fatfs/ff.c **** /* Request/Release grant to access the volume                            */
 195:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 196:../fatfs/ff.c **** #if _FS_REENTRANT
 197:../fatfs/ff.c **** 
 198:../fatfs/ff.c **** static
 199:../fatfs/ff.c **** BOOL lock_fs (
 200:../fatfs/ff.c **** 	FATFS *fs		/* File system object */
 201:../fatfs/ff.c **** )
 202:../fatfs/ff.c **** {
 203:../fatfs/ff.c **** 	return ff_req_grant(fs->sobj);
 204:../fatfs/ff.c **** }
 205:../fatfs/ff.c **** 
 206:../fatfs/ff.c **** 
 207:../fatfs/ff.c **** static
 208:../fatfs/ff.c **** void unlock_fs (
 209:../fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 210:../fatfs/ff.c **** 	FRESULT res		/* Result code to be returned */
 211:../fatfs/ff.c **** )
 212:../fatfs/ff.c **** {
 213:../fatfs/ff.c **** 	if (res != FR_NOT_ENABLED &&
 214:../fatfs/ff.c **** 		res != FR_INVALID_DRIVE &&
 215:../fatfs/ff.c **** 		res != FR_INVALID_OBJECT &&
 216:../fatfs/ff.c **** 		res != FR_TIMEOUT) {
 217:../fatfs/ff.c **** 		ff_rel_grant(fs->sobj);
 218:../fatfs/ff.c **** 	}
 219:../fatfs/ff.c **** }
 220:../fatfs/ff.c **** #endif
 221:../fatfs/ff.c **** 
 222:../fatfs/ff.c **** 
 223:../fatfs/ff.c **** 
 224:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 225:../fatfs/ff.c **** /* Change window offset                                                  */
 226:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 227:../fatfs/ff.c **** 
 228:../fatfs/ff.c **** static
 229:../fatfs/ff.c **** FRESULT move_window (
 230:../fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 231:../fatfs/ff.c **** 	DWORD sector	/* Sector number to make apperance in the fs->win[] */
 232:../fatfs/ff.c **** )					/* Move to zero only writes back dirty window */
 233:../fatfs/ff.c **** {
 234:../fatfs/ff.c **** 	DWORD wsect;
 235:../fatfs/ff.c **** 
 236:../fatfs/ff.c **** 
 237:../fatfs/ff.c **** 	wsect = fs->winsect;
 238:../fatfs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 239:../fatfs/ff.c **** #if !_FS_READONLY
 240:../fatfs/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 241:../fatfs/ff.c **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 242:../fatfs/ff.c **** 				return FR_DISK_ERR;
 243:../fatfs/ff.c **** 			fs->wflag = 0;
 244:../fatfs/ff.c **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 245:../fatfs/ff.c **** 				BYTE nf;
 246:../fatfs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 247:../fatfs/ff.c **** 					wsect += fs->sects_fat;
 248:../fatfs/ff.c **** 					disk_write(fs->drive, fs->win, wsect, 1);
 249:../fatfs/ff.c **** 				}
 250:../fatfs/ff.c **** 			}
 251:../fatfs/ff.c **** 		}
 252:../fatfs/ff.c **** #endif
 253:../fatfs/ff.c **** 		if (sector) {
 254:../fatfs/ff.c **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 255:../fatfs/ff.c **** 				return FR_DISK_ERR;
 256:../fatfs/ff.c **** 			fs->winsect = sector;
 257:../fatfs/ff.c **** 		}
 258:../fatfs/ff.c **** 	}
 259:../fatfs/ff.c **** 
 260:../fatfs/ff.c **** 	return FR_OK;
 261:../fatfs/ff.c **** }
 262:../fatfs/ff.c **** 
 263:../fatfs/ff.c **** 
 264:../fatfs/ff.c **** 
 265:../fatfs/ff.c **** 
 266:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 267:../fatfs/ff.c **** /* Clean-up cached data                                                  */
 268:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 269:../fatfs/ff.c **** #if !_FS_READONLY
 270:../fatfs/ff.c **** static
 271:../fatfs/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 272:../fatfs/ff.c **** 	FATFS *fs	/* File system object */
 273:../fatfs/ff.c **** )
 274:../fatfs/ff.c **** {
 275:../fatfs/ff.c **** 	FRESULT res;
 276:../fatfs/ff.c **** 
 277:../fatfs/ff.c **** 
 278:../fatfs/ff.c **** 	res = move_window(fs, 0);
 279:../fatfs/ff.c **** 	if (res == FR_OK) {
 280:../fatfs/ff.c **** 		/* Update FSInfo sector if needed */
 281:../fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 282:../fatfs/ff.c **** 			fs->winsect = 0;
 283:../fatfs/ff.c **** 			mem_set(fs->win, 0, 512);
 284:../fatfs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 285:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 286:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 287:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 288:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 289:../fatfs/ff.c **** 			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 290:../fatfs/ff.c **** 			fs->fsi_flag = 0;
 291:../fatfs/ff.c **** 		}
 292:../fatfs/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 293:../fatfs/ff.c **** 		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 294:../fatfs/ff.c **** 			res = FR_DISK_ERR;
 295:../fatfs/ff.c **** 	}
 296:../fatfs/ff.c **** 
 297:../fatfs/ff.c **** 	return res;
 298:../fatfs/ff.c **** }
 299:../fatfs/ff.c **** #endif
 300:../fatfs/ff.c **** 
 301:../fatfs/ff.c **** 
 302:../fatfs/ff.c **** 
 303:../fatfs/ff.c **** 
 304:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 305:../fatfs/ff.c **** /* FAT access - Read value of a FAT entry                                */
 306:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 307:../fatfs/ff.c **** 
 308:../fatfs/ff.c **** static
 309:../fatfs/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Interal error, Else:Cluster status */
 310:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 311:../fatfs/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 312:../fatfs/ff.c **** )
 313:../fatfs/ff.c **** {
 314:../fatfs/ff.c **** 	UINT wc, bc;
 315:../fatfs/ff.c **** 	DWORD fsect;
 316:../fatfs/ff.c **** 
 317:../fatfs/ff.c **** 
 318:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 319:../fatfs/ff.c **** 		return 1;
 320:../fatfs/ff.c **** 
 321:../fatfs/ff.c **** 	fsect = fs->fatbase;
 322:../fatfs/ff.c **** 	switch (fs->fs_type) {
 323:../fatfs/ff.c **** 	case FS_FAT12 :
 324:../fatfs/ff.c **** 		bc = clst; bc += bc / 2;
 325:../fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 326:../fatfs/ff.c **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 327:../fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 328:../fatfs/ff.c **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 329:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 330:../fatfs/ff.c **** 
 331:../fatfs/ff.c **** 	case FS_FAT16 :
 332:../fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 333:../fatfs/ff.c **** 		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 334:../fatfs/ff.c **** 
 335:../fatfs/ff.c **** 	case FS_FAT32 :
 336:../fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 337:../fatfs/ff.c **** 		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 338:../fatfs/ff.c **** 	}
 339:../fatfs/ff.c **** 
 340:../fatfs/ff.c **** 	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 341:../fatfs/ff.c **** }
 342:../fatfs/ff.c **** 
 343:../fatfs/ff.c **** 
 344:../fatfs/ff.c **** 
 345:../fatfs/ff.c **** 
 346:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 347:../fatfs/ff.c **** /* FAT access - Change value of a FAT entry                              */
 348:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 349:../fatfs/ff.c **** #if !_FS_READONLY
 350:../fatfs/ff.c **** static
 351:../fatfs/ff.c **** FRESULT put_fat (
 352:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
 353:../fatfs/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->max_clust - 1 */
 354:../fatfs/ff.c **** 	DWORD val	/* New value to mark the cluster */
 355:../fatfs/ff.c **** )
 356:../fatfs/ff.c **** {
 357:../fatfs/ff.c **** 	UINT bc;
 358:../fatfs/ff.c **** 	BYTE *p;
 359:../fatfs/ff.c **** 	DWORD fsect;
 360:../fatfs/ff.c **** 	FRESULT res;
 361:../fatfs/ff.c **** 
 362:../fatfs/ff.c **** 
 363:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 364:../fatfs/ff.c **** 		res = FR_INT_ERR;
 365:../fatfs/ff.c **** 
 366:../fatfs/ff.c **** 	} else {
 367:../fatfs/ff.c **** 		fsect = fs->fatbase;
 368:../fatfs/ff.c **** 		switch (fs->fs_type) {
 369:../fatfs/ff.c **** 		case FS_FAT12 :
 370:../fatfs/ff.c **** 			bc = clst; bc += bc / 2;
 371:../fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 372:../fatfs/ff.c **** 			if (res != FR_OK) break;
 373:../fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 374:../fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 375:../fatfs/ff.c **** 			bc++;
 376:../fatfs/ff.c **** 			fs->wflag = 1;
 377:../fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 378:../fatfs/ff.c **** 			if (res != FR_OK) break;
 379:../fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 380:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 381:../fatfs/ff.c **** 			break;
 382:../fatfs/ff.c **** 
 383:../fatfs/ff.c **** 		case FS_FAT16 :
 384:../fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 385:../fatfs/ff.c **** 			if (res != FR_OK) break;
 386:../fatfs/ff.c **** 			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 387:../fatfs/ff.c **** 			break;
 388:../fatfs/ff.c **** 
 389:../fatfs/ff.c **** 		case FS_FAT32 :
 390:../fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 391:../fatfs/ff.c **** 			if (res != FR_OK) break;
 392:../fatfs/ff.c **** 			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 393:../fatfs/ff.c **** 			break;
 394:../fatfs/ff.c **** 
 395:../fatfs/ff.c **** 		default :
 396:../fatfs/ff.c **** 			res = FR_INT_ERR;
 397:../fatfs/ff.c **** 		}
 398:../fatfs/ff.c **** 		fs->wflag = 1;
 399:../fatfs/ff.c **** 	}
 400:../fatfs/ff.c **** 
 401:../fatfs/ff.c **** 	return res;
 402:../fatfs/ff.c **** }
 403:../fatfs/ff.c **** #endif /* !_FS_READONLY */
 404:../fatfs/ff.c **** 
 405:../fatfs/ff.c **** 
 406:../fatfs/ff.c **** 
 407:../fatfs/ff.c **** 
 408:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 409:../fatfs/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 410:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 411:../fatfs/ff.c **** #if !_FS_READONLY
 412:../fatfs/ff.c **** static
 413:../fatfs/ff.c **** FRESULT remove_chain (
 414:../fatfs/ff.c **** 	FATFS *fs,			/* File system object */
 415:../fatfs/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 416:../fatfs/ff.c **** )
 417:../fatfs/ff.c **** {
 418:../fatfs/ff.c **** 	FRESULT res;
 419:../fatfs/ff.c **** 	DWORD nxt;
 420:../fatfs/ff.c **** 
 421:../fatfs/ff.c **** 
 422:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 423:../fatfs/ff.c **** 		res = FR_INT_ERR;
 424:../fatfs/ff.c **** 
 425:../fatfs/ff.c **** 	} else {
 426:../fatfs/ff.c **** 		res = FR_OK;
 427:../fatfs/ff.c **** 		while (clst < fs->max_clust) {			/* Not a last link? */
 428:../fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 429:../fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 430:../fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 431:../fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 432:../fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 433:../fatfs/ff.c **** 			if (res != FR_OK) break;
 434:../fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 435:../fatfs/ff.c **** 				fs->free_clust++;
 436:../fatfs/ff.c **** 				fs->fsi_flag = 1;
 437:../fatfs/ff.c **** 			}
 438:../fatfs/ff.c **** 			clst = nxt;	/* Next cluster */
 439:../fatfs/ff.c **** 		}
 440:../fatfs/ff.c **** 	}
 441:../fatfs/ff.c **** 
 442:../fatfs/ff.c **** 	return res;
 443:../fatfs/ff.c **** }
 444:../fatfs/ff.c **** #endif
 445:../fatfs/ff.c **** 
 446:../fatfs/ff.c **** 
 447:../fatfs/ff.c **** 
 448:../fatfs/ff.c **** 
 449:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 450:../fatfs/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 451:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 452:../fatfs/ff.c **** #if !_FS_READONLY
 453:../fatfs/ff.c **** static
 454:../fatfs/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 455:../fatfs/ff.c **** 	FATFS *fs,			/* File system object */
 456:../fatfs/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 457:../fatfs/ff.c **** )
 458:../fatfs/ff.c **** {
 459:../fatfs/ff.c **** 	DWORD cs, ncl, scl, mcl;
 460:../fatfs/ff.c **** 
 461:../fatfs/ff.c **** 
 462:../fatfs/ff.c **** 	mcl = fs->max_clust;
 463:../fatfs/ff.c **** 	if (clst == 0) {		/* Create new chain */
 464:../fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 465:../fatfs/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 466:../fatfs/ff.c **** 	}
 467:../fatfs/ff.c **** 	else {					/* Stretch existing chain */
 468:../fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 469:../fatfs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 470:../fatfs/ff.c **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 471:../fatfs/ff.c **** 		scl = clst;
 472:../fatfs/ff.c **** 	}
 473:../fatfs/ff.c **** 
 474:../fatfs/ff.c **** 	ncl = scl;				/* Start cluster */
 475:../fatfs/ff.c **** 	for (;;) {
 476:../fatfs/ff.c **** 		ncl++;							/* Next cluster */
 477:../fatfs/ff.c **** 		if (ncl >= mcl) {				/* Wrap around */
 478:../fatfs/ff.c **** 			ncl = 2;
 479:../fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free custer */
 480:../fatfs/ff.c **** 		}
 481:../fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 482:../fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 483:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 484:../fatfs/ff.c **** 			return cs;
 485:../fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free custer */
 486:../fatfs/ff.c **** 	}
 487:../fatfs/ff.c **** 
 488:../fatfs/ff.c **** 	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 489:../fatfs/ff.c **** 		return 0xFFFFFFFF;
 490:../fatfs/ff.c **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 491:../fatfs/ff.c **** 		if (put_fat(fs, clst, ncl))
 492:../fatfs/ff.c **** 			return 0xFFFFFFFF;
 493:../fatfs/ff.c **** 	}
 494:../fatfs/ff.c **** 
 495:../fatfs/ff.c **** 	fs->last_clust = ncl;				/* Update FSINFO */
 496:../fatfs/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 497:../fatfs/ff.c **** 		fs->free_clust--;
 498:../fatfs/ff.c **** 		fs->fsi_flag = 1;
 499:../fatfs/ff.c **** 	}
 500:../fatfs/ff.c **** 
 501:../fatfs/ff.c **** 	return ncl;		/* Return new cluster number */
 502:../fatfs/ff.c **** }
 503:../fatfs/ff.c **** #endif /* !_FS_READONLY */
 504:../fatfs/ff.c **** 
 505:../fatfs/ff.c **** 
 506:../fatfs/ff.c **** 
 507:../fatfs/ff.c **** 
 508:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 509:../fatfs/ff.c **** /* Get sector# from cluster#                                             */
 510:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 511:../fatfs/ff.c **** 
 512:../fatfs/ff.c **** static
 513:../fatfs/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 514:../fatfs/ff.c **** 	FATFS *fs,		/* File system object */
 515:../fatfs/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 516:../fatfs/ff.c **** )
 517:../fatfs/ff.c **** {
 19972              		.loc 1 517 0
 19973              		.cfi_startproc
 19974              		@ args = 0, pretend = 0, frame = 0
 19975              		@ frame_needed = 0, uses_anonymous_args = 0
 19976              		@ link register save eliminated.
 19977              	.LVL15:
 518:../fatfs/ff.c **** 	clst -= 2;
 519:../fatfs/ff.c **** 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 19978              		.loc 1 519 0
 19979 0036 C369     		ldr	r3, [r0, #28]
 518:../fatfs/ff.c **** 	clst -= 2;
 19980              		.loc 1 518 0
 19981 0038 0239     		subs	r1, r1, #2
 19982              	.LVL16:
 19983              		.loc 1 519 0
 19984 003a 023B     		subs	r3, r3, #2
 19985 003c 9942     		cmp	r1, r3
 19986 003e 04D2     		bcs	.L13
 520:../fatfs/ff.c **** 	return clst * fs->csize + fs->database;
 19987              		.loc 1 520 0
 19988 0040 8278     		ldrb	r2, [r0, #2]	@ zero_extendqisi2
 19989 0042 836A     		ldr	r3, [r0, #40]
 19990 0044 02FB0130 		mla	r0, r2, r1, r3
 19991              	.LVL17:
 19992 0048 7047     		bx	lr
 19993              	.LVL18:
 19994              	.L13:
 519:../fatfs/ff.c **** 	if (clst >= (fs->max_clust - 2)) return 0;		/* Invalid cluster# */
 19995              		.loc 1 519 0
 19996 004a 0020     		movs	r0, #0
 19997              	.LVL19:
 521:../fatfs/ff.c **** }
 19998              		.loc 1 521 0
 19999 004c 7047     		bx	lr
 20000              		.cfi_endproc
 20001              	.LFE39:
 20003              		.align	1
 20004              		.thumb
 20005              		.thumb_func
 20007              	get_fileinfo:
 20008              	.LFB47:
 522:../fatfs/ff.c **** 
 523:../fatfs/ff.c **** 
 524:../fatfs/ff.c **** 
 525:../fatfs/ff.c **** 
 526:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 527:../fatfs/ff.c **** /* Directory handling - Seek directory index                             */
 528:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 529:../fatfs/ff.c **** 
 530:../fatfs/ff.c **** static
 531:../fatfs/ff.c **** FRESULT dir_seek (
 532:../fatfs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 533:../fatfs/ff.c **** 	WORD idx		/* Directory index number */
 534:../fatfs/ff.c **** )
 535:../fatfs/ff.c **** {
 536:../fatfs/ff.c **** 	DWORD clst;
 537:../fatfs/ff.c **** 	WORD ic;
 538:../fatfs/ff.c **** 
 539:../fatfs/ff.c **** 
 540:../fatfs/ff.c **** 	dj->index = idx;
 541:../fatfs/ff.c **** 	clst = dj->sclust;
 542:../fatfs/ff.c **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 543:../fatfs/ff.c **** 		return FR_INT_ERR;
 544:../fatfs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 545:../fatfs/ff.c **** 		clst = dj->fs->dirbase;
 546:../fatfs/ff.c **** 
 547:../fatfs/ff.c **** 	if (clst == 0) {	/* Static table */
 548:../fatfs/ff.c **** 		dj->clust = clst;
 549:../fatfs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 550:../fatfs/ff.c **** 			return FR_INT_ERR;
 551:../fatfs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 552:../fatfs/ff.c **** 	}
 553:../fatfs/ff.c **** 	else {				/* Dynamic table */
 554:../fatfs/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 555:../fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 556:../fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 557:../fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 558:../fatfs/ff.c **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 559:../fatfs/ff.c **** 				return FR_INT_ERR;
 560:../fatfs/ff.c **** 			idx -= ic;
 561:../fatfs/ff.c **** 		}
 562:../fatfs/ff.c **** 		dj->clust = clst;
 563:../fatfs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 564:../fatfs/ff.c **** 	}
 565:../fatfs/ff.c **** 
 566:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 567:../fatfs/ff.c **** 
 568:../fatfs/ff.c **** 	return FR_OK;	/* Seek succeeded */
 569:../fatfs/ff.c **** }
 570:../fatfs/ff.c **** 
 571:../fatfs/ff.c **** 
 572:../fatfs/ff.c **** 
 573:../fatfs/ff.c **** 
 574:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 575:../fatfs/ff.c **** /* Directory handling - Move directory index next                        */
 576:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 577:../fatfs/ff.c **** 
 578:../fatfs/ff.c **** static
 579:../fatfs/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not streach
 580:../fatfs/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 581:../fatfs/ff.c **** 	bool streach	/* FALSE: Do not streach table, TRUE: Streach table if needed */
 582:../fatfs/ff.c **** )
 583:../fatfs/ff.c **** {
 584:../fatfs/ff.c **** 	DWORD clst;
 585:../fatfs/ff.c **** 	WORD i;
 586:../fatfs/ff.c **** 
 587:../fatfs/ff.c **** 
 588:../fatfs/ff.c **** 	i = dj->index + 1;
 589:../fatfs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 590:../fatfs/ff.c **** 		return FR_NO_FILE;
 591:../fatfs/ff.c **** 
 592:../fatfs/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 593:../fatfs/ff.c **** 		dj->sect++;					/* Next sector */
 594:../fatfs/ff.c **** 
 595:../fatfs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 596:../fatfs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 597:../fatfs/ff.c **** 				return FR_NO_FILE;
 598:../fatfs/ff.c **** 		}
 599:../fatfs/ff.c **** 		else {					/* Dynamic table */
 600:../fatfs/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 601:../fatfs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 602:../fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 603:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 604:../fatfs/ff.c **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 605:../fatfs/ff.c **** #if !_FS_READONLY
 606:../fatfs/ff.c **** 					BYTE c;
 607:../fatfs/ff.c **** 					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 608:../fatfs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 609:../fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 610:../fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 611:../fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 612:../fatfs/ff.c **** 					/* Clean-up streached table */
 613:../fatfs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 614:../fatfs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 615:../fatfs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 616:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 617:../fatfs/ff.c **** 						dj->fs->wflag = 1;
 618:../fatfs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 619:../fatfs/ff.c **** 						dj->fs->winsect++;
 620:../fatfs/ff.c **** 					}
 621:../fatfs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 622:../fatfs/ff.c **** #else
 623:../fatfs/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
 624:../fatfs/ff.c **** #endif
 625:../fatfs/ff.c **** 				}
 626:../fatfs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 627:../fatfs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 628:../fatfs/ff.c **** 			}
 629:../fatfs/ff.c **** 		}
 630:../fatfs/ff.c **** 	}
 631:../fatfs/ff.c **** 
 632:../fatfs/ff.c **** 	dj->index = i;
 633:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 634:../fatfs/ff.c **** 
 635:../fatfs/ff.c **** 	return FR_OK;
 636:../fatfs/ff.c **** }
 637:../fatfs/ff.c **** 
 638:../fatfs/ff.c **** 
 639:../fatfs/ff.c **** 
 640:../fatfs/ff.c **** 
 641:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 642:../fatfs/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
 643:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 644:../fatfs/ff.c **** #if _USE_LFN
 645:../fatfs/ff.c **** static
 646:../fatfs/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
 647:../fatfs/ff.c **** 
 648:../fatfs/ff.c **** 
 649:../fatfs/ff.c **** static
 650:../fatfs/ff.c **** bool cmp_lfn (			/* TRUE:Matched, FALSE:Not matched */
 651:../fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
 652:../fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
 653:../fatfs/ff.c **** )
 654:../fatfs/ff.c **** {
 655:../fatfs/ff.c **** 	int i, s;
 656:../fatfs/ff.c **** 	WCHAR wc;
 657:../fatfs/ff.c **** 
 658:../fatfs/ff.c **** 
 659:../fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 660:../fatfs/ff.c **** 	s = 0;
 661:../fatfs/ff.c **** 	do {
 662:../fatfs/ff.c **** 		wc = ff_wtoupper(LD_WORD(dir+LfnOfs[s]));	/* Get an LFN character */
 663:../fatfs/ff.c **** 		if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it with the reference character *
 664:../fatfs/ff.c **** 			return FALSE;
 665:../fatfs/ff.c **** 	} while (++s < 13 && wc);		/* Repeat until all chars in the entry or a NUL char is processed */
 666:../fatfs/ff.c **** 
 667:../fatfs/ff.c **** 	return TRUE;					/* The LFN entry matched */
 668:../fatfs/ff.c **** }
 669:../fatfs/ff.c **** 
 670:../fatfs/ff.c **** 
 671:../fatfs/ff.c **** 
 672:../fatfs/ff.c **** static
 673:../fatfs/ff.c **** bool pick_lfn (			/* TRUE:Succeeded, FALSE:Buffer overflow */
 674:../fatfs/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 675:../fatfs/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
 676:../fatfs/ff.c **** )
 677:../fatfs/ff.c **** {
 678:../fatfs/ff.c **** 	int i, s;
 679:../fatfs/ff.c **** 	WCHAR wc;
 680:../fatfs/ff.c **** 
 681:../fatfs/ff.c **** 
 682:../fatfs/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 683:../fatfs/ff.c **** 
 684:../fatfs/ff.c **** 	s = 0;
 685:../fatfs/ff.c **** 	do {
 686:../fatfs/ff.c **** 		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 687:../fatfs/ff.c **** 		wc = LD_WORD(dir+LfnOfs[s]);		/* Get an LFN char */
 688:../fatfs/ff.c **** 		if (!wc) break;						/* End of LFN? */
 689:../fatfs/ff.c **** 		lfnbuf[i++] = wc;					/* Store it */
 690:../fatfs/ff.c **** 	} while (++s < 13);						/* Repeat until last char is copied */
 691:../fatfs/ff.c **** 
 692:../fatfs/ff.c **** 	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 693:../fatfs/ff.c **** 		if (i >= _MAX_LFN) return FALSE;	/* Buffer overflow? */
 694:../fatfs/ff.c **** 		lfnbuf[i] = 0;
 695:../fatfs/ff.c **** 	}
 696:../fatfs/ff.c **** 
 697:../fatfs/ff.c **** 	return TRUE;
 698:../fatfs/ff.c **** }
 699:../fatfs/ff.c **** 
 700:../fatfs/ff.c **** 
 701:../fatfs/ff.c **** #if !_FS_READONLY
 702:../fatfs/ff.c **** static
 703:../fatfs/ff.c **** void fit_lfn (
 704:../fatfs/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
 705:../fatfs/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
 706:../fatfs/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
 707:../fatfs/ff.c **** 	BYTE sum				/* SFN sum */
 708:../fatfs/ff.c **** )
 709:../fatfs/ff.c **** {
 710:../fatfs/ff.c **** 	int i, s;
 711:../fatfs/ff.c **** 	WCHAR wc;
 712:../fatfs/ff.c **** 
 713:../fatfs/ff.c **** 
 714:../fatfs/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
 715:../fatfs/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 716:../fatfs/ff.c **** 	dir[LDIR_Type] = 0;
 717:../fatfs/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
 718:../fatfs/ff.c **** 
 719:../fatfs/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 720:../fatfs/ff.c **** 	s = wc = 0;
 721:../fatfs/ff.c **** 	do {
 722:../fatfs/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
 723:../fatfs/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 724:../fatfs/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
 725:../fatfs/ff.c **** 	} while (++s < 13);
 726:../fatfs/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
 727:../fatfs/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 728:../fatfs/ff.c **** }
 729:../fatfs/ff.c **** 
 730:../fatfs/ff.c **** #endif
 731:../fatfs/ff.c **** #endif
 732:../fatfs/ff.c **** 
 733:../fatfs/ff.c **** 
 734:../fatfs/ff.c **** 
 735:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 736:../fatfs/ff.c **** /* Create numbered name                                                  */
 737:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 738:../fatfs/ff.c **** #if _USE_LFN
 739:../fatfs/ff.c **** void gen_numname (
 740:../fatfs/ff.c **** 	BYTE *dst,			/* Pointer to genartated SFN */
 741:../fatfs/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
 742:../fatfs/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
 743:../fatfs/ff.c **** 	WORD num			/* Sequense number */
 744:../fatfs/ff.c **** )
 745:../fatfs/ff.c **** {
 746:../fatfs/ff.c **** 	char ns[8];
 747:../fatfs/ff.c **** 	int i, j;
 748:../fatfs/ff.c **** 
 749:../fatfs/ff.c **** 
 750:../fatfs/ff.c **** 	mem_cpy(dst, src, 11);
 751:../fatfs/ff.c **** 
 752:../fatfs/ff.c **** 	if (num > 5) {	/* On many collisions, generate a hash number instead of sequencial number */
 753:../fatfs/ff.c **** 		do num = (num >> 1) + (num << 15) + (WORD)*lfn++; while (*lfn);
 754:../fatfs/ff.c **** 	}
 755:../fatfs/ff.c **** 
 756:../fatfs/ff.c **** 	/* itoa */
 757:../fatfs/ff.c **** 	i = 7;
 758:../fatfs/ff.c **** 	do {
 759:../fatfs/ff.c **** 		ns[i--] = (num % 10) + '0';
 760:../fatfs/ff.c **** 		num /= 10;
 761:../fatfs/ff.c **** 	} while (num);
 762:../fatfs/ff.c **** 	ns[i] = '~';
 763:../fatfs/ff.c **** 
 764:../fatfs/ff.c **** 	/* Append the number */
 765:../fatfs/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
 766:../fatfs/ff.c **** 		if (IsDBCS1(dst[j])) {
 767:../fatfs/ff.c **** 			if (j == i - 1) break;
 768:../fatfs/ff.c **** 			j++;
 769:../fatfs/ff.c **** 		}
 770:../fatfs/ff.c **** 	}
 771:../fatfs/ff.c **** 	do {
 772:../fatfs/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
 773:../fatfs/ff.c **** 	} while (j < 8);
 774:../fatfs/ff.c **** }
 775:../fatfs/ff.c **** #endif
 776:../fatfs/ff.c **** 
 777:../fatfs/ff.c **** 
 778:../fatfs/ff.c **** 
 779:../fatfs/ff.c **** 
 780:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 781:../fatfs/ff.c **** /* Calculate sum of an SFN                                               */
 782:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 783:../fatfs/ff.c **** #if _USE_LFN
 784:../fatfs/ff.c **** static
 785:../fatfs/ff.c **** BYTE sum_sfn (
 786:../fatfs/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
 787:../fatfs/ff.c **** )
 788:../fatfs/ff.c **** {
 789:../fatfs/ff.c **** 	BYTE sum = 0;
 790:../fatfs/ff.c **** 	int n = 11;
 791:../fatfs/ff.c **** 
 792:../fatfs/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 793:../fatfs/ff.c **** 	return sum;
 794:../fatfs/ff.c **** }
 795:../fatfs/ff.c **** #endif
 796:../fatfs/ff.c **** 
 797:../fatfs/ff.c **** 
 798:../fatfs/ff.c **** 
 799:../fatfs/ff.c **** 
 800:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 801:../fatfs/ff.c **** /* Directory handling - Find an object in the directory                  */
 802:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 803:../fatfs/ff.c **** 
 804:../fatfs/ff.c **** static
 805:../fatfs/ff.c **** FRESULT dir_find (
 806:../fatfs/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
 807:../fatfs/ff.c **** )
 808:../fatfs/ff.c **** {
 809:../fatfs/ff.c **** 	FRESULT res;
 810:../fatfs/ff.c **** 	BYTE c, *dir;
 811:../fatfs/ff.c **** #if _USE_LFN
 812:../fatfs/ff.c **** 	BYTE a, lfen, ord, sum;
 813:../fatfs/ff.c **** #endif
 814:../fatfs/ff.c **** 
 815:../fatfs/ff.c **** 	res = dir_seek(dj, 0);			/* Rewind directory object */
 816:../fatfs/ff.c **** 	if (res != FR_OK) return res;
 817:../fatfs/ff.c **** 
 818:../fatfs/ff.c **** #if _USE_LFN
 819:../fatfs/ff.c **** 	ord = sum = 0xFF; lfen = *(dj->fn+11) & NS_LOSS;
 820:../fatfs/ff.c **** #endif
 821:../fatfs/ff.c **** 	do {
 822:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 823:../fatfs/ff.c **** 		if (res != FR_OK) break;
 824:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 825:../fatfs/ff.c **** 		c = dir[DIR_Name];
 826:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 827:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 828:../fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 829:../fatfs/ff.c **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 830:../fatfs/ff.c **** 			ord = 0xFF;
 831:../fatfs/ff.c **** 		} else {
 832:../fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 833:../fatfs/ff.c **** 				if (dj->lfn) {
 834:../fatfs/ff.c **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
 835:../fatfs/ff.c **** 						sum = dir[LDIR_Chksum];
 836:../fatfs/ff.c **** 						c &= 0xBF; ord = c;		/* LFN start order */
 837:../fatfs/ff.c **** 						dj->lfn_idx = dj->index;
 838:../fatfs/ff.c **** 					}
 839:../fatfs/ff.c **** 					/* Check LFN validity. Compare LFN if it is out of 8.3 format */
 840:../fatfs/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && (!lfen || cmp_lfn(dj->lfn, dir))) ? ord - 1 : 0x
 841:../fatfs/ff.c **** 				}
 842:../fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 843:../fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Did not LFN match? */
 844:../fatfs/ff.c **** 					dj->lfn_idx = 0xFFFF;
 845:../fatfs/ff.c **** 				if (lfen) {				/* Match LFN if it is out of 8.3 format */
 846:../fatfs/ff.c **** 					if (ord == 0) break;
 847:../fatfs/ff.c **** 				} else {				/* Match SFN if LFN is in 8.3 format */
 848:../fatfs/ff.c **** 					if (!mem_cmp(dir, dj->fn, 11)) break;
 849:../fatfs/ff.c **** 				}
 850:../fatfs/ff.c **** 				ord = 0xFF;
 851:../fatfs/ff.c **** 			}
 852:../fatfs/ff.c **** 		}
 853:../fatfs/ff.c **** #else		/* Non LFN configuration */
 854:../fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 855:../fatfs/ff.c **** 			break;
 856:../fatfs/ff.c **** #endif
 857:../fatfs/ff.c **** 		res = dir_next(dj, FALSE);				/* Next entry */
 858:../fatfs/ff.c **** 	} while (res == FR_OK);
 859:../fatfs/ff.c **** 
 860:../fatfs/ff.c **** 	return res;
 861:../fatfs/ff.c **** }
 862:../fatfs/ff.c **** 
 863:../fatfs/ff.c **** 
 864:../fatfs/ff.c **** 
 865:../fatfs/ff.c **** 
 866:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 867:../fatfs/ff.c **** /* Read an object from the directory                                     */
 868:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 869:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1
 870:../fatfs/ff.c **** static
 871:../fatfs/ff.c **** FRESULT dir_read (
 872:../fatfs/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
 873:../fatfs/ff.c **** )
 874:../fatfs/ff.c **** {
 875:../fatfs/ff.c **** 	FRESULT res;
 876:../fatfs/ff.c **** 	BYTE c, *dir;
 877:../fatfs/ff.c **** #if _USE_LFN
 878:../fatfs/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
 879:../fatfs/ff.c **** #endif
 880:../fatfs/ff.c **** 
 881:../fatfs/ff.c **** 	res = FR_NO_FILE;
 882:../fatfs/ff.c **** 	while (dj->sect) {
 883:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 884:../fatfs/ff.c **** 		if (res != FR_OK) break;
 885:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 886:../fatfs/ff.c **** 		c = dir[DIR_Name];
 887:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 888:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 889:../fatfs/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
 890:../fatfs/ff.c **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
 891:../fatfs/ff.c **** 			ord = 0xFF;
 892:../fatfs/ff.c **** 		} else {
 893:../fatfs/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
 894:../fatfs/ff.c **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
 895:../fatfs/ff.c **** 					sum = dir[LDIR_Chksum];
 896:../fatfs/ff.c **** 					c &= 0xBF; ord = c;
 897:../fatfs/ff.c **** 					dj->lfn_idx = dj->index;
 898:../fatfs/ff.c **** 				}
 899:../fatfs/ff.c **** 				/* Check LFN validity and capture it */
 900:../fatfs/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
 901:../fatfs/ff.c **** 			} else {					/* An SFN entry is found */
 902:../fatfs/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN entry? */
 903:../fatfs/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* No LFN. */
 904:../fatfs/ff.c **** 				break;
 905:../fatfs/ff.c **** 			}
 906:../fatfs/ff.c **** 		}
 907:../fatfs/ff.c **** #else		/* Non LFN configuration */
 908:../fatfs/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 909:../fatfs/ff.c **** 			break;
 910:../fatfs/ff.c **** #endif
 911:../fatfs/ff.c **** 		res = dir_next(dj, FALSE);				/* Next entry */
 912:../fatfs/ff.c **** 		if (res != FR_OK) break;
 913:../fatfs/ff.c **** 	}
 914:../fatfs/ff.c **** 
 915:../fatfs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 916:../fatfs/ff.c **** 
 917:../fatfs/ff.c **** 	return res;
 918:../fatfs/ff.c **** }
 919:../fatfs/ff.c **** #endif
 920:../fatfs/ff.c **** 
 921:../fatfs/ff.c **** 
 922:../fatfs/ff.c **** 
 923:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 924:../fatfs/ff.c **** /* Register an object to the directory                                   */
 925:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
 926:../fatfs/ff.c **** #if !_FS_READONLY
 927:../fatfs/ff.c **** static
 928:../fatfs/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
 929:../fatfs/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
 930:../fatfs/ff.c **** )
 931:../fatfs/ff.c **** {
 932:../fatfs/ff.c **** 	FRESULT res;
 933:../fatfs/ff.c **** 	BYTE c, *dir;
 934:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
 935:../fatfs/ff.c **** 	WORD n, ne, is;
 936:../fatfs/ff.c **** 	BYTE sn[12], *fn, sum;
 937:../fatfs/ff.c **** 	WCHAR *lfn;
 938:../fatfs/ff.c **** 
 939:../fatfs/ff.c **** 
 940:../fatfs/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
 941:../fatfs/ff.c **** 	mem_cpy(sn, fn, 12);
 942:../fatfs/ff.c **** 
 943:../fatfs/ff.c **** 	if (_FS_RPATH && (sn[11] & NS_DOT)) return FR_INVALID_NAME;	/* Cannot create dot entry */
 944:../fatfs/ff.c **** 
 945:../fatfs/ff.c **** 	if (sn[11] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 946:../fatfs/ff.c **** 		fn[11] = 0; dj->lfn = NULL;			/* Find only SFN */
 947:../fatfs/ff.c **** 		for (n = 1; n < 100; n++) {
 948:../fatfs/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 949:../fatfs/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
 950:../fatfs/ff.c **** 			if (res != FR_OK) break;
 951:../fatfs/ff.c **** 		}
 952:../fatfs/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 953:../fatfs/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 954:../fatfs/ff.c **** 		fn[11] = sn[11]; dj->lfn = lfn;
 955:../fatfs/ff.c **** 	}
 956:../fatfs/ff.c **** 
 957:../fatfs/ff.c **** 	if (sn[11] & NS_LFN) {			/* When LFN is to be created, reserve reserve an SFN + LFN entries. */
 958:../fatfs/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
 959:../fatfs/ff.c **** 		ne = (ne + 25) / 13;
 960:../fatfs/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
 961:../fatfs/ff.c **** 		ne = 1;
 962:../fatfs/ff.c **** 	}
 963:../fatfs/ff.c **** 
 964:../fatfs/ff.c **** 	/* Reserve contiguous entries */
 965:../fatfs/ff.c **** 	res = dir_seek(dj, 0);
 966:../fatfs/ff.c **** 	if (res != FR_OK) return res;
 967:../fatfs/ff.c **** 	n = is = 0;
 968:../fatfs/ff.c **** 	do {
 969:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 970:../fatfs/ff.c **** 		if (res != FR_OK) break;
 971:../fatfs/ff.c **** 		c = *dj->dir;				/* Check the entry status */
 972:../fatfs/ff.c **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
 973:../fatfs/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contigulus entry */
 974:../fatfs/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that requiered count is found */
 975:../fatfs/ff.c **** 		} else {
 976:../fatfs/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
 977:../fatfs/ff.c **** 		}
 978:../fatfs/ff.c **** 		res = dir_next(dj, TRUE);	/* Next entry with table streach */
 979:../fatfs/ff.c **** 	} while (res == FR_OK);
 980:../fatfs/ff.c **** 
 981:../fatfs/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
 982:../fatfs/ff.c **** 		res = dir_seek(dj, is);
 983:../fatfs/ff.c **** 		if (res == FR_OK) {
 984:../fatfs/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
 985:../fatfs/ff.c **** 			ne--;
 986:../fatfs/ff.c **** 			do {					/* Store LFN entries in bottom first */
 987:../fatfs/ff.c **** 				res = move_window(dj->fs, dj->sect);
 988:../fatfs/ff.c **** 				if (res != FR_OK) break;
 989:../fatfs/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
 990:../fatfs/ff.c **** 				dj->fs->wflag = 1;
 991:../fatfs/ff.c **** 				res = dir_next(dj, FALSE);	/* Next entry */
 992:../fatfs/ff.c **** 			} while (res == FR_OK && --ne);
 993:../fatfs/ff.c **** 		}
 994:../fatfs/ff.c **** 	}
 995:../fatfs/ff.c **** 
 996:../fatfs/ff.c **** #else	/* Non LFN configuration */
 997:../fatfs/ff.c **** 	res = dir_seek(dj, 0);
 998:../fatfs/ff.c **** 	if (res == FR_OK) {
 999:../fatfs/ff.c **** 		do {	/* Find a blank entry for the SFN */
1000:../fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1001:../fatfs/ff.c **** 			if (res != FR_OK) break;
1002:../fatfs/ff.c **** 			c = *dj->dir;
1003:../fatfs/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
1004:../fatfs/ff.c **** 			res = dir_next(dj, TRUE);		/* Next entry with table streach */
1005:../fatfs/ff.c **** 		} while (res == FR_OK);
1006:../fatfs/ff.c **** 	}
1007:../fatfs/ff.c **** #endif
1008:../fatfs/ff.c **** 
1009:../fatfs/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1010:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1011:../fatfs/ff.c **** 		if (res == FR_OK) {
1012:../fatfs/ff.c **** 			dir = dj->dir;
1013:../fatfs/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
1014:../fatfs/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1015:../fatfs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
1016:../fatfs/ff.c **** 			dj->fs->wflag = 1;
1017:../fatfs/ff.c **** 		}
1018:../fatfs/ff.c **** 	}
1019:../fatfs/ff.c **** 
1020:../fatfs/ff.c **** 	return res;
1021:../fatfs/ff.c **** }
1022:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1023:../fatfs/ff.c **** 
1024:../fatfs/ff.c **** 
1025:../fatfs/ff.c **** 
1026:../fatfs/ff.c **** 
1027:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1028:../fatfs/ff.c **** /* Remove an object from the directory                                   */
1029:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1030:../fatfs/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1031:../fatfs/ff.c **** static
1032:../fatfs/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1033:../fatfs/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1034:../fatfs/ff.c **** )
1035:../fatfs/ff.c **** {
1036:../fatfs/ff.c **** 	FRESULT res;
1037:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1038:../fatfs/ff.c **** 	WORD i;
1039:../fatfs/ff.c **** 
1040:../fatfs/ff.c **** 	i = dj->index;	/* SFN index */
1041:../fatfs/ff.c **** 	res = dir_seek(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of t
1042:../fatfs/ff.c **** 	if (res == FR_OK) {
1043:../fatfs/ff.c **** 		do {
1044:../fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
1045:../fatfs/ff.c **** 			if (res != FR_OK) break;
1046:../fatfs/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1047:../fatfs/ff.c **** 			dj->fs->wflag = 1;
1048:../fatfs/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1049:../fatfs/ff.c **** 			res = dir_next(dj, FALSE);	/* Next entry */
1050:../fatfs/ff.c **** 		} while (res == FR_OK);
1051:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1052:../fatfs/ff.c **** 	}
1053:../fatfs/ff.c **** 
1054:../fatfs/ff.c **** #else			/* Non LFN configuration */
1055:../fatfs/ff.c **** 	res = dir_seek(dj, dj->index);
1056:../fatfs/ff.c **** 	if (res == FR_OK) {
1057:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
1058:../fatfs/ff.c **** 		if (res == FR_OK) {
1059:../fatfs/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1060:../fatfs/ff.c **** 			dj->fs->wflag = 1;
1061:../fatfs/ff.c **** 		}
1062:../fatfs/ff.c **** 	}
1063:../fatfs/ff.c **** #endif
1064:../fatfs/ff.c **** 
1065:../fatfs/ff.c **** 	return res;
1066:../fatfs/ff.c **** }
1067:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1068:../fatfs/ff.c **** 
1069:../fatfs/ff.c **** 
1070:../fatfs/ff.c **** 
1071:../fatfs/ff.c **** 
1072:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1073:../fatfs/ff.c **** /* Pick a segment and create the object name in directory form           */
1074:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1075:../fatfs/ff.c **** 
1076:../fatfs/ff.c **** 
1077:../fatfs/ff.c **** static
1078:../fatfs/ff.c **** FRESULT create_name (
1079:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1080:../fatfs/ff.c **** 	const XCHAR **path	/* Pointer to pointer to the segment in the path string */
1081:../fatfs/ff.c **** )
1082:../fatfs/ff.c **** {
1083:../fatfs/ff.c **** #ifdef _EXCVT
1084:../fatfs/ff.c **** 	static const BYTE cvt[] = _EXCVT;
1085:../fatfs/ff.c **** #endif
1086:../fatfs/ff.c **** #if _USE_LFN	/* LFN configuration */
1087:../fatfs/ff.c **** 	BYTE b, cf;
1088:../fatfs/ff.c **** 	WCHAR w, *lfn;
1089:../fatfs/ff.c **** 	int i, ni, si, di;
1090:../fatfs/ff.c **** 	const XCHAR *p;
1091:../fatfs/ff.c **** 
1092:../fatfs/ff.c **** 	/* Create LFN in Unicode */
1093:../fatfs/ff.c **** 	si = di = 0;
1094:../fatfs/ff.c **** 	p = *path;
1095:../fatfs/ff.c **** 	lfn = dj->lfn;
1096:../fatfs/ff.c **** 	for (;;) {
1097:../fatfs/ff.c **** 		w = p[si++];					/* Get a character */
1098:../fatfs/ff.c **** 		if (w < L' ' || w == L'/' || w == L'\\') break;	/* Break on end of segment */
1099:../fatfs/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1100:../fatfs/ff.c **** 			return FR_INVALID_NAME;
1101:../fatfs/ff.c **** #if !_LFN_UNICODE
1102:../fatfs/ff.c **** 		w &= 0xFF;
1103:../fatfs/ff.c **** 		if (IsDBCS1(w)) {				/* If it is a DBC 1st byte */
1104:../fatfs/ff.c **** 			BYTE c = p[si++];			/* Get 2nd byte */
1105:../fatfs/ff.c **** 			if (!IsDBCS2(c))			/* Reject invalid code for DBC */
1106:../fatfs/ff.c **** 				return FR_INVALID_NAME;
1107:../fatfs/ff.c **** 			w = (w << 8) + c;
1108:../fatfs/ff.c **** 		}
1109:../fatfs/ff.c **** 		w = ff_convert(w, 1);			/* Convert OEM to Unicode */
1110:../fatfs/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1111:../fatfs/ff.c **** #endif
1112:../fatfs/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject unallowable chars for LFN */
1113:../fatfs/ff.c **** 			return FR_INVALID_NAME;
1114:../fatfs/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1115:../fatfs/ff.c **** 	}
1116:../fatfs/ff.c **** 	*path = &p[si];						/* Rerurn pointer to the next segment */
1117:../fatfs/ff.c **** 	cf = (w < L' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1118:../fatfs/ff.c **** #if _FS_RPATH
1119:../fatfs/ff.c **** 	if ((di == 1 && lfn[di - 1] == L'.') || /* Is this a dot entry? */
1120:../fatfs/ff.c **** 		(di == 2 && lfn[di - 1] == L'.' && lfn[di - 2] == L'.')) {
1121:../fatfs/ff.c **** 		lfn[di] = 0;
1122:../fatfs/ff.c **** 		for (i = 0; i < 11; i++)
1123:../fatfs/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1124:../fatfs/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1125:../fatfs/ff.c **** 		return FR_OK;
1126:../fatfs/ff.c **** 	}
1127:../fatfs/ff.c **** #endif
1128:../fatfs/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1129:../fatfs/ff.c **** 		w = lfn[di - 1];
1130:../fatfs/ff.c **** 		if (w != L' ' && w != L'.') break;
1131:../fatfs/ff.c **** 		di--;
1132:../fatfs/ff.c **** 	}
1133:../fatfs/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject null string */
1134:../fatfs/ff.c **** 
1135:../fatfs/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1136:../fatfs/ff.c **** 
1137:../fatfs/ff.c **** 	/* Create SFN in directory form */
1138:../fatfs/ff.c **** 	mem_set(dj->fn, ' ', 11);
1139:../fatfs/ff.c **** 	for (si = 0; lfn[si] == L' ' || lfn[si] == L'.'; si++) ;	/* Strip leading spaces and dots */
1140:../fatfs/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1141:../fatfs/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1142:../fatfs/ff.c **** 
1143:../fatfs/ff.c **** 	b = i = 0; ni = 8;
1144:../fatfs/ff.c **** 	for (;;) {
1145:../fatfs/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1146:../fatfs/ff.c **** 		if (!w) break;					/* Break when enf of the LFN */
1147:../fatfs/ff.c **** 		if (w == L' ' || (w == L'.' && si != di)) {	/* Remove spaces and dots */
1148:../fatfs/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1149:../fatfs/ff.c **** 		}
1150:../fatfs/ff.c **** 
1151:../fatfs/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1152:../fatfs/ff.c **** 			if (ni == 11) {				/* Long extension */
1153:../fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1154:../fatfs/ff.c **** 			}
1155:../fatfs/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* File name is longer than 8 bytes */
1156:../fatfs/ff.c **** 			if (si > di) break;			/* No extension */
1157:../fatfs/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1158:../fatfs/ff.c **** 			b <<= 2; continue;
1159:../fatfs/ff.c **** 		}
1160:../fatfs/ff.c **** 
1161:../fatfs/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1162:../fatfs/ff.c **** #ifdef _EXCVT
1163:../fatfs/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1164:../fatfs/ff.c **** 			if (w) w = cvt[w - 0x80];	/* Convert extend char (SBCS) */
1165:../fatfs/ff.c **** #else
1166:../fatfs/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Unicode (Caps) -> OEM code */
1167:../fatfs/ff.c **** #endif
1168:../fatfs/ff.c **** 			cf |= NS_LFN;				/* Force create an LFN */
1169:../fatfs/ff.c **** 		}
1170:../fatfs/ff.c **** 
1171:../fatfs/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char */
1172:../fatfs/ff.c **** 			if (i >= ni - 1) {
1173:../fatfs/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1174:../fatfs/ff.c **** 			}
1175:../fatfs/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1176:../fatfs/ff.c **** 		} else {						/* Single byte char */
1177:../fatfs/ff.c **** 			if (!w || chk_chr("+,;[=]", w)) {	/* Replace unallowable chars for SFN */
1178:../fatfs/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;	/* Lossy conversion */
1179:../fatfs/ff.c **** 			} else {
1180:../fatfs/ff.c **** 				if (IsUpper(w)) {		/* Large capital */
1181:../fatfs/ff.c **** 					b |= 2;
1182:../fatfs/ff.c **** 				} else {
1183:../fatfs/ff.c **** 					if (IsLower(w)) {	/* Small capital */
1184:../fatfs/ff.c **** 						b |= 1; w -= 0x20;
1185:../fatfs/ff.c **** 					}
1186:../fatfs/ff.c **** 				}
1187:../fatfs/ff.c **** 			}
1188:../fatfs/ff.c **** 		}
1189:../fatfs/ff.c **** 		dj->fn[i++] = (BYTE)w;
1190:../fatfs/ff.c **** 	}
1191:../fatfs/ff.c **** 
1192:../fatfs/ff.c **** 	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with 0xE5, replace it with 
1193:../fatfs/ff.c **** 
1194:../fatfs/ff.c **** 	if (ni == 8) b <<= 2;
1195:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1196:../fatfs/ff.c **** 		cf |= NS_LFN;
1197:../fatfs/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1198:../fatfs/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1199:../fatfs/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1200:../fatfs/ff.c **** 	}
1201:../fatfs/ff.c **** 
1202:../fatfs/ff.c **** 	dj->fn[11] = cf;	/* SFN is created */
1203:../fatfs/ff.c **** 
1204:../fatfs/ff.c **** 
1205:../fatfs/ff.c **** #else	/* Non-LFN configuration */
1206:../fatfs/ff.c **** 	BYTE b, c, d, *sfn;
1207:../fatfs/ff.c **** 	int ni, si, i;
1208:../fatfs/ff.c **** 	const char *p;
1209:../fatfs/ff.c **** 
1210:../fatfs/ff.c **** 	/* Create file name in directory form */
1211:../fatfs/ff.c **** 	sfn = dj->fn;
1212:../fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
1213:../fatfs/ff.c **** 	si = i = b = 0; ni = 8;
1214:../fatfs/ff.c **** 	p = *path;
1215:../fatfs/ff.c **** #if _FS_RPATH
1216:../fatfs/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1217:../fatfs/ff.c **** 		for (;;) {
1218:../fatfs/ff.c **** 			c = p[si++];
1219:../fatfs/ff.c **** 			if (c != '.' || si >= 3) break;
1220:../fatfs/ff.c **** 			sfn[i++] = c;
1221:../fatfs/ff.c **** 		}
1222:../fatfs/ff.c **** 		if (c != '/' && c != '\\' && c >= ' ') return FR_INVALID_NAME;
1223:../fatfs/ff.c **** 		*path = &p[si];									/* Rerurn pointer to the next segment */
1224:../fatfs/ff.c **** 		sfn[11] = (c < ' ') ? NS_LAST|NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1225:../fatfs/ff.c **** 		return FR_OK;
1226:../fatfs/ff.c **** 	}
1227:../fatfs/ff.c **** #endif
1228:../fatfs/ff.c **** 	for (;;) {
1229:../fatfs/ff.c **** 		c = p[si++];
1230:../fatfs/ff.c **** 		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1231:../fatfs/ff.c **** 		if (c == '.' || i >= ni) {
1232:../fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1233:../fatfs/ff.c **** 			i = 8; ni = 11;
1234:../fatfs/ff.c **** 			b <<= 2; continue;
1235:../fatfs/ff.c **** 		}
1236:../fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended char */
1237:../fatfs/ff.c **** #ifdef _EXCVT
1238:../fatfs/ff.c **** 			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
1239:../fatfs/ff.c **** #else
1240:../fatfs/ff.c **** 			b |= 3;						/* Eliminate NT flag if ext char is exist */
1241:../fatfs/ff.c **** #if !_DF1S	/* ASCII only cfg */
1242:../fatfs/ff.c **** 			return FR_INVALID_NAME;
1243:../fatfs/ff.c **** #endif
1244:../fatfs/ff.c **** #endif
1245:../fatfs/ff.c **** 		}
1246:../fatfs/ff.c **** 		if (IsDBCS1(c)) {				/* If it is DBC 1st byte */
1247:../fatfs/ff.c **** 			d = p[si++];				/* Get 2nd byte */
1248:../fatfs/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1249:../fatfs/ff.c **** 				return FR_INVALID_NAME;
1250:../fatfs/ff.c **** 			sfn[i++] = c;
1251:../fatfs/ff.c **** 			sfn[i++] = d;
1252:../fatfs/ff.c **** 		} else {
1253:../fatfs/ff.c **** 			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
1254:../fatfs/ff.c **** 				return FR_INVALID_NAME;
1255:../fatfs/ff.c **** 			if (IsUpper(c)) {
1256:../fatfs/ff.c **** 				b |= 2;
1257:../fatfs/ff.c **** 			} else {
1258:../fatfs/ff.c **** 				if (IsLower(c)) {
1259:../fatfs/ff.c **** 					b |= 1; c -= 0x20;
1260:../fatfs/ff.c **** 				}
1261:../fatfs/ff.c **** 			}
1262:../fatfs/ff.c **** 			sfn[i++] = c;
1263:../fatfs/ff.c **** 		}
1264:../fatfs/ff.c **** 	}
1265:../fatfs/ff.c **** 	*path = &p[si];						/* Rerurn pointer to the next segment */
1266:../fatfs/ff.c **** 	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1267:../fatfs/ff.c **** 
1268:../fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject null string */
1269:../fatfs/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
1270:../fatfs/ff.c **** 
1271:../fatfs/ff.c **** 	if (ni == 8) b <<= 2;
1272:../fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
1273:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
1274:../fatfs/ff.c **** 
1275:../fatfs/ff.c **** 	sfn[11] = c;		/* Store NT flag, File name is created */
1276:../fatfs/ff.c **** #endif
1277:../fatfs/ff.c **** 
1278:../fatfs/ff.c **** 	return FR_OK;
1279:../fatfs/ff.c **** }
1280:../fatfs/ff.c **** 
1281:../fatfs/ff.c **** 
1282:../fatfs/ff.c **** 
1283:../fatfs/ff.c **** 
1284:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1285:../fatfs/ff.c **** /* Get file information from directory entry                             */
1286:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1287:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1
1288:../fatfs/ff.c **** static
1289:../fatfs/ff.c **** void get_fileinfo (		/* No return code */
1290:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1291:../fatfs/ff.c **** 	FILINFO *fno	 	/* Pointer to store the file information */
1292:../fatfs/ff.c **** )
1293:../fatfs/ff.c **** {
 20009              		.loc 1 1293 0
 20010              		.cfi_startproc
 20011              		@ args = 0, pretend = 0, frame = 0
 20012              		@ frame_needed = 0, uses_anonymous_args = 0
 20013              	.LVL20:
1294:../fatfs/ff.c **** 	int i;
1295:../fatfs/ff.c **** 	BYTE c, nt, *dir;
1296:../fatfs/ff.c **** 	char *p;
1297:../fatfs/ff.c **** #if _USE_LFN
1298:../fatfs/ff.c **** 	XCHAR *tp;
1299:../fatfs/ff.c **** #endif
1300:../fatfs/ff.c **** 
1301:../fatfs/ff.c **** 
1302:../fatfs/ff.c **** 	p = fno->fname;
1303:../fatfs/ff.c **** 	if (dj->sect) {
 20014              		.loc 1 1303 0
 20015 004e 0369     		ldr	r3, [r0, #16]
1293:../fatfs/ff.c **** {
 20016              		.loc 1 1293 0
 20017 0050 70B5     		push	{r4, r5, r6, lr}
 20018              	.LCFI1:
 20019              		.cfi_def_cfa_offset 16
1302:../fatfs/ff.c **** 	p = fno->fname;
 20020              		.loc 1 1302 0
 20021 0052 01F10904 		add	r4, r1, #9
 20022              		.cfi_offset 14, -4
 20023              		.cfi_offset 6, -8
 20024              		.cfi_offset 5, -12
 20025              		.cfi_offset 4, -16
 20026              	.LVL21:
 20027              		.loc 1 1303 0
 20028 0056 002B     		cmp	r3, #0
 20029 0058 4DD0     		beq	.L15
1304:../fatfs/ff.c **** 		dir = dj->dir;
 20030              		.loc 1 1304 0
 20031 005a 4369     		ldr	r3, [r0, #20]
 20032              	.LVL22:
1305:../fatfs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1306:../fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 20033              		.loc 1 1306 0
 20034 005c 0025     		movs	r5, #0
1305:../fatfs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
 20035              		.loc 1 1305 0
 20036 005e 1E7B     		ldrb	r6, [r3, #12]	@ zero_extendqisi2
 20037              	.LVL23:
 20038 0060 2046     		mov	r0, r4
 20039              	.LVL24:
 20040              	.L19:
1307:../fatfs/ff.c **** 			c = dir[i];
 20041              		.loc 1 1307 0
 20042 0062 5A5D     		ldrb	r2, [r3, r5]	@ zero_extendqisi2
 20043              	.LVL25:
1305:../fatfs/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
 20044              		.loc 1 1305 0
 20045 0064 0446     		mov	r4, r0
1308:../fatfs/ff.c **** 			if (c == ' ') break;
 20046              		.loc 1 1308 0
 20047 0066 202A     		cmp	r2, #32
 20048 0068 12D0     		beq	.L16
1309:../fatfs/ff.c **** 			if (c == 0x05) c = 0xE5;
 20049              		.loc 1 1309 0
 20050 006a 052A     		cmp	r2, #5
 20051 006c 08BF     		it	eq
 20052 006e E522     		moveq	r2, #229
 20053              	.LVL26:
1310:../fatfs/ff.c **** 			if ((nt & 0x08) && IsUpper(c)) c += 0x20;
 20054              		.loc 1 1310 0
 20055 0070 16F0080F 		tst	r6, #8
 20056 0074 06D0     		beq	.L18
 20057              		.loc 1 1310 0 is_stmt 0 discriminator 1
 20058 0076 A2F14104 		sub	r4, r2, #65
 20059 007a E4B2     		uxtb	r4, r4
 20060 007c 192C     		cmp	r4, #25
 20061 007e 01D8     		bhi	.L18
 20062 0080 2032     		adds	r2, r2, #32
 20063              	.LVL27:
 20064 0082 D2B2     		uxtb	r2, r2
 20065              	.LVL28:
 20066              	.L18:
1306:../fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 20067              		.loc 1 1306 0 is_stmt 1
 20068 0084 0135     		adds	r5, r5, #1
1311:../fatfs/ff.c **** 			*p++ = c;
 20069              		.loc 1 1311 0
 20070 0086 00F8012B 		strb	r2, [r0], #1
 20071              	.LVL29:
1306:../fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 20072              		.loc 1 1306 0
 20073 008a 082D     		cmp	r5, #8
 20074              		.loc 1 1311 0
 20075 008c 0446     		mov	r4, r0
 20076              	.LVL30:
1306:../fatfs/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 20077              		.loc 1 1306 0
 20078 008e E8D1     		bne	.L19
 20079              	.LVL31:
 20080              	.L16:
1312:../fatfs/ff.c **** 		}
1313:../fatfs/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
 20081              		.loc 1 1313 0
 20082 0090 1A7A     		ldrb	r2, [r3, #8]	@ zero_extendqisi2
 20083 0092 202A     		cmp	r2, #32
 20084 0094 18D0     		beq	.L20
1314:../fatfs/ff.c **** 			*p++ = '.';
 20085              		.loc 1 1314 0
 20086 0096 0246     		mov	r2, r0
 20087 0098 2E20     		movs	r0, #46
 20088              	.LVL32:
 20089 009a 02F8010B 		strb	r0, [r2], #1
 20090              	.LVL33:
1315:../fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
 20091              		.loc 1 1315 0
 20092 009e 0825     		movs	r5, #8
 20093              	.LVL34:
 20094              	.L22:
1316:../fatfs/ff.c **** 				c = dir[i];
 20095              		.loc 1 1316 0
 20096 00a0 585D     		ldrb	r0, [r3, r5]	@ zero_extendqisi2
 20097              	.LVL35:
1314:../fatfs/ff.c **** 			*p++ = '.';
 20098              		.loc 1 1314 0
 20099 00a2 1446     		mov	r4, r2
1317:../fatfs/ff.c **** 				if (c == ' ') break;
 20100              		.loc 1 1317 0
 20101 00a4 2028     		cmp	r0, #32
 20102 00a6 0FD0     		beq	.L20
1318:../fatfs/ff.c **** 				if ((nt & 0x10) && IsUpper(c)) c += 0x20;
 20103              		.loc 1 1318 0
 20104 00a8 16F0100F 		tst	r6, #16
 20105 00ac 06D0     		beq	.L21
 20106              		.loc 1 1318 0 is_stmt 0 discriminator 1
 20107 00ae A0F14104 		sub	r4, r0, #65
 20108 00b2 E4B2     		uxtb	r4, r4
 20109 00b4 192C     		cmp	r4, #25
 20110 00b6 01D8     		bhi	.L21
 20111 00b8 2030     		adds	r0, r0, #32
 20112              	.LVL36:
 20113 00ba C0B2     		uxtb	r0, r0
 20114              	.LVL37:
 20115              	.L21:
1315:../fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
 20116              		.loc 1 1315 0 is_stmt 1
 20117 00bc 0135     		adds	r5, r5, #1
1319:../fatfs/ff.c **** 				*p++ = c;
 20118              		.loc 1 1319 0
 20119 00be 02F8010B 		strb	r0, [r2], #1
1315:../fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
 20120              		.loc 1 1315 0
 20121 00c2 0B2D     		cmp	r5, #11
 20122              		.loc 1 1319 0
 20123 00c4 1446     		mov	r4, r2
 20124              	.LVL38:
1315:../fatfs/ff.c **** 			for (i = 8; i < 11; i++) {
 20125              		.loc 1 1315 0
 20126 00c6 EBD1     		bne	.L22
 20127              	.LVL39:
 20128              	.L20:
1320:../fatfs/ff.c **** 			}
1321:../fatfs/ff.c **** 		}
1322:../fatfs/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 20129              		.loc 1 1322 0
 20130 00c8 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 20131 00ca 0A72     		strb	r2, [r1, #8]
1323:../fatfs/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 20132              		.loc 1 1323 0
 20133 00cc 9A7F     		ldrb	r2, [r3, #30]	@ zero_extendqisi2
 20134 00ce D87F     		ldrb	r0, [r3, #31]	@ zero_extendqisi2
 20135 00d0 1204     		lsls	r2, r2, #16
 20136 00d2 42EA0062 		orr	r2, r2, r0, lsl #24
 20137 00d6 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
 20138 00d8 0243     		orrs	r2, r2, r0
 20139 00da 587F     		ldrb	r0, [r3, #29]	@ zero_extendqisi2
 20140 00dc 42EA0022 		orr	r2, r2, r0, lsl #8
 20141 00e0 0A60     		str	r2, [r1, #0]
1324:../fatfs/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 20142              		.loc 1 1324 0
 20143 00e2 587E     		ldrb	r0, [r3, #25]	@ zero_extendqisi2
 20144 00e4 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2
 20145 00e6 42EA0022 		orr	r2, r2, r0, lsl #8
 20146 00ea 8A80     		strh	r2, [r1, #4]	@ movhi
1325:../fatfs/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 20147              		.loc 1 1325 0
 20148 00ec DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 20149 00ee 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 20150              	.LVL40:
 20151 00f0 43EA0223 		orr	r3, r3, r2, lsl #8
 20152 00f4 CB80     		strh	r3, [r1, #6]	@ movhi
 20153              	.LVL41:
 20154              	.L15:
1326:../fatfs/ff.c **** 	}
1327:../fatfs/ff.c **** 	*p = 0;
 20155              		.loc 1 1327 0
 20156 00f6 0023     		movs	r3, #0
 20157 00f8 2370     		strb	r3, [r4, #0]
1328:../fatfs/ff.c **** 
1329:../fatfs/ff.c **** #if _USE_LFN
1330:../fatfs/ff.c **** 	tp = fno->lfname;
1331:../fatfs/ff.c **** 	if (tp) {
1332:../fatfs/ff.c **** 		WCHAR w, *lfn;
1333:../fatfs/ff.c **** 
1334:../fatfs/ff.c **** 		i = 0;
1335:../fatfs/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1336:../fatfs/ff.c **** 			lfn = dj->lfn;
1337:../fatfs/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1338:../fatfs/ff.c **** #if !_LFN_UNICODE
1339:../fatfs/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1340:../fatfs/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1341:../fatfs/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC */
1342:../fatfs/ff.c **** 					tp[i++] = (XCHAR)(w >> 8);
1343:../fatfs/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overrun, no LFN */
1344:../fatfs/ff.c **** #endif
1345:../fatfs/ff.c **** 				tp[i++] = (XCHAR)w;
1346:../fatfs/ff.c **** 			}
1347:../fatfs/ff.c **** 		}
1348:../fatfs/ff.c **** 		tp[i] = 0;	/* Terminator */
1349:../fatfs/ff.c **** 	}
1350:../fatfs/ff.c **** #endif
1351:../fatfs/ff.c **** }
 20158              		.loc 1 1351 0
 20159 00fa 70BD     		pop	{r4, r5, r6, pc}
 20160              		.cfi_endproc
 20161              	.LFE47:
 20163              		.align	1
 20164              		.thumb
 20165              		.thumb_func
 20167              	validate:
 20168              	.LFB51:
1352:../fatfs/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1353:../fatfs/ff.c **** 
1354:../fatfs/ff.c **** 
1355:../fatfs/ff.c **** 
1356:../fatfs/ff.c **** 
1357:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1358:../fatfs/ff.c **** /* Follow a file path                                                    */
1359:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1360:../fatfs/ff.c **** 
1361:../fatfs/ff.c **** static
1362:../fatfs/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1363:../fatfs/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1364:../fatfs/ff.c **** 	const XCHAR *path	/* Full-path string to find a file or directory */
1365:../fatfs/ff.c **** )
1366:../fatfs/ff.c **** {
1367:../fatfs/ff.c **** 	FRESULT res;
1368:../fatfs/ff.c **** 	BYTE *dir, last;
1369:../fatfs/ff.c **** 
1370:../fatfs/ff.c **** 
1371:../fatfs/ff.c **** #if _FS_RPATH
1372:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1373:../fatfs/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1374:../fatfs/ff.c **** 	} else {							/* No heading saparator */
1375:../fatfs/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1376:../fatfs/ff.c **** 	}
1377:../fatfs/ff.c **** #else
1378:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1379:../fatfs/ff.c **** 		path++;
1380:../fatfs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1381:../fatfs/ff.c **** #endif
1382:../fatfs/ff.c **** 
1383:../fatfs/ff.c **** 	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
1384:../fatfs/ff.c **** 		res = dir_seek(dj, 0);
1385:../fatfs/ff.c **** 		dj->dir = NULL;
1386:../fatfs/ff.c **** 
1387:../fatfs/ff.c **** 	} else {							/* Follow path */
1388:../fatfs/ff.c **** 		for (;;) {
1389:../fatfs/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1390:../fatfs/ff.c **** 			if (res != FR_OK) break;
1391:../fatfs/ff.c **** 			res = dir_find(dj);				/* Find it */
1392:../fatfs/ff.c **** 			last = *(dj->fn+11) & NS_LAST;
1393:../fatfs/ff.c **** 			if (res != FR_OK) {				/* Could not find the object */
1394:../fatfs/ff.c **** 				if (res == FR_NO_FILE && !last)
1395:../fatfs/ff.c **** 					res = FR_NO_PATH;
1396:../fatfs/ff.c **** 				break;
1397:../fatfs/ff.c **** 			}
1398:../fatfs/ff.c **** 			if (last) break;				/* Last segment match. Function completed. */
1399:../fatfs/ff.c **** 			dir = dj->dir;					/* There is next segment. Follow the sub directory */
1400:../fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
1401:../fatfs/ff.c **** 				res = FR_NO_PATH; break;
1402:../fatfs/ff.c **** 			}
1403:../fatfs/ff.c **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1404:../fatfs/ff.c **** 		}
1405:../fatfs/ff.c **** 	}
1406:../fatfs/ff.c **** 
1407:../fatfs/ff.c **** 	return res;
1408:../fatfs/ff.c **** }
1409:../fatfs/ff.c **** 
1410:../fatfs/ff.c **** 
1411:../fatfs/ff.c **** 
1412:../fatfs/ff.c **** 
1413:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1414:../fatfs/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1415:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1416:../fatfs/ff.c **** 
1417:../fatfs/ff.c **** static
1418:../fatfs/ff.c **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
1419:../fatfs/ff.c **** 	FATFS *fs,	/* File system object */
1420:../fatfs/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1421:../fatfs/ff.c **** )
1422:../fatfs/ff.c **** {
1423:../fatfs/ff.c **** 	static const char fatstr[] = "FAT";
1424:../fatfs/ff.c **** 
1425:../fatfs/ff.c **** 
1426:../fatfs/ff.c **** 	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
1427:../fatfs/ff.c **** 		return 3;
1428:../fatfs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
1429:../fatfs/ff.c **** 		return 2;
1430:../fatfs/ff.c **** 
1431:../fatfs/ff.c **** 	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
1432:../fatfs/ff.c **** 		return 0;
1433:../fatfs/ff.c **** 	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
1434:../fatfs/ff.c **** 		return 0;
1435:../fatfs/ff.c **** 
1436:../fatfs/ff.c **** 	return 1;
1437:../fatfs/ff.c **** }
1438:../fatfs/ff.c **** 
1439:../fatfs/ff.c **** 
1440:../fatfs/ff.c **** 
1441:../fatfs/ff.c **** 
1442:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1443:../fatfs/ff.c **** /* Make sure that the file system is valid                               */
1444:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1445:../fatfs/ff.c **** 
1446:../fatfs/ff.c **** static
1447:../fatfs/ff.c **** FRESULT auto_mount (	/* FR_OK(0): successful, !=0: any error occured */
1448:../fatfs/ff.c **** 	const XCHAR **path,	/* Pointer to pointer to the path name (drive number) */
1449:../fatfs/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
1450:../fatfs/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
1451:../fatfs/ff.c **** )
1452:../fatfs/ff.c **** {
1453:../fatfs/ff.c **** 	FRESULT res;
1454:../fatfs/ff.c **** 	BYTE fmt, *tbl;
1455:../fatfs/ff.c **** 	UINT vol;
1456:../fatfs/ff.c **** 	DSTATUS stat;
1457:../fatfs/ff.c **** 	DWORD bsect, fsize, tsect, mclst;
1458:../fatfs/ff.c **** 	const XCHAR *p = *path;
1459:../fatfs/ff.c **** 	FATFS *fs;
1460:../fatfs/ff.c **** 
1461:../fatfs/ff.c **** 
1462:../fatfs/ff.c **** 	/* Get logical drive number from the path name */
1463:../fatfs/ff.c **** 	vol = p[0] - '0';				/* Is there a drive number? */
1464:../fatfs/ff.c **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
1465:../fatfs/ff.c **** 		p += 2; *path = p;			/* Return pointer to the path name */
1466:../fatfs/ff.c **** 	} else {						/* No drive number is given */
1467:../fatfs/ff.c **** #if _FS_RPATH
1468:../fatfs/ff.c **** 		vol = Drive;				/* Use current drive */
1469:../fatfs/ff.c **** #else
1470:../fatfs/ff.c **** 		vol = 0;					/* Use drive 0 */
1471:../fatfs/ff.c **** #endif
1472:../fatfs/ff.c **** 	}
1473:../fatfs/ff.c **** 
1474:../fatfs/ff.c **** 	/* Check if the logical drive is valid or not */
1475:../fatfs/ff.c **** 	if (vol >= _DRIVES) 			/* Is the drive number valid? */
1476:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
1477:../fatfs/ff.c **** 	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
1478:../fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
1479:../fatfs/ff.c **** 
1480:../fatfs/ff.c **** 	ENTER_FF(fs);					/* Lock file system */
1481:../fatfs/ff.c **** 
1482:../fatfs/ff.c **** 	if (fs->fs_type) {				/* If the logical drive has been mounted */
1483:../fatfs/ff.c **** 		stat = disk_status(fs->drive);
1484:../fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
1485:../fatfs/ff.c **** #if !_FS_READONLY
1486:../fatfs/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
1487:../fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
1488:../fatfs/ff.c **** #endif
1489:../fatfs/ff.c **** 			return FR_OK;			/* The file system object is valid */
1490:../fatfs/ff.c **** 		}
1491:../fatfs/ff.c **** 	}
1492:../fatfs/ff.c **** 
1493:../fatfs/ff.c **** 	/* The logical drive must be mounted. Following code attempts to mount the volume */
1494:../fatfs/ff.c **** 
1495:../fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
1496:../fatfs/ff.c **** 	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
1497:../fatfs/ff.c **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
1498:../fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
1499:../fatfs/ff.c **** 		return FR_NOT_READY;
1500:../fatfs/ff.c **** #if _MAX_SS != 512						/* Get disk sector size if needed */
1501:../fatfs/ff.c **** 	if (disk_ioctl(fs->drive, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS)
1502:../fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
1503:../fatfs/ff.c **** #endif
1504:../fatfs/ff.c **** #if !_FS_READONLY
1505:../fatfs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
1506:../fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
1507:../fatfs/ff.c **** #endif
1508:../fatfs/ff.c **** 	/* Search FAT partition on the drive */
1509:../fatfs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
1510:../fatfs/ff.c **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
1511:../fatfs/ff.c **** 		/* Check a partition listed in top of the partition table */
1512:../fatfs/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
1513:../fatfs/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
1514:../fatfs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
1515:../fatfs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
1516:../fatfs/ff.c **** 		}
1517:../fatfs/ff.c **** 	}
1518:../fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
1519:../fatfs/ff.c **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
1520:../fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
1521:../fatfs/ff.c **** 
1522:../fatfs/ff.c **** 	/* Initialize the file system object */
1523:../fatfs/ff.c **** 	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
1524:../fatfs/ff.c **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
1525:../fatfs/ff.c **** 	fs->sects_fat = fsize;
1526:../fatfs/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
1527:../fatfs/ff.c **** 	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
1528:../fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
1529:../fatfs/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
1530:../fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
1531:../fatfs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
1532:../fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
1533:../fatfs/ff.c **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
1534:../fatfs/ff.c **** 		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
1535:../fatfs/ff.c **** 		) / fs->csize + 2;
1536:../fatfs/ff.c **** 
1537:../fatfs/ff.c **** 	fmt = FS_FAT12;										/* Determine the FAT sub type */
1538:../fatfs/ff.c **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
1539:../fatfs/ff.c **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
1540:../fatfs/ff.c **** 
1541:../fatfs/ff.c **** 	if (fmt == FS_FAT32)
1542:../fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
1543:../fatfs/ff.c **** 	else
1544:../fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
1545:../fatfs/ff.c **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
1546:../fatfs/ff.c **** 
1547:../fatfs/ff.c **** #if !_FS_READONLY
1548:../fatfs/ff.c **** 	/* Initialize allocation information */
1549:../fatfs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
1550:../fatfs/ff.c **** 	fs->wflag = 0;
1551:../fatfs/ff.c **** 	/* Get fsinfo if needed */
1552:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
1553:../fatfs/ff.c **** 	 	fs->fsi_flag = 0;
1554:../fatfs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
1555:../fatfs/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
1556:../fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
1557:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
1558:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
1559:../fatfs/ff.c **** 			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
1560:../fatfs/ff.c **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
1561:../fatfs/ff.c **** 		}
1562:../fatfs/ff.c **** 	}
1563:../fatfs/ff.c **** #endif
1564:../fatfs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
1565:../fatfs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
1566:../fatfs/ff.c **** #if _FS_RPATH
1567:../fatfs/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
1568:../fatfs/ff.c **** #endif
1569:../fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
1570:../fatfs/ff.c **** 	res = FR_OK;
1571:../fatfs/ff.c **** 
1572:../fatfs/ff.c **** 	return res;
1573:../fatfs/ff.c **** }
1574:../fatfs/ff.c **** 
1575:../fatfs/ff.c **** 
1576:../fatfs/ff.c **** 
1577:../fatfs/ff.c **** 
1578:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1579:../fatfs/ff.c **** /* Check if the file/dir object is valid or not                          */
1580:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1581:../fatfs/ff.c **** 
1582:../fatfs/ff.c **** static
1583:../fatfs/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
1584:../fatfs/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
1585:../fatfs/ff.c **** 	WORD id			/* Member id of the target object to be checked */
1586:../fatfs/ff.c **** )
1587:../fatfs/ff.c **** {
 20169              		.loc 1 1587 0
 20170              		.cfi_startproc
 20171              		@ args = 0, pretend = 0, frame = 0
 20172              		@ frame_needed = 0, uses_anonymous_args = 0
 20173              	.LVL42:
 20174 00fc 08B5     		push	{r3, lr}
 20175              	.LCFI2:
 20176              		.cfi_def_cfa_offset 8
1588:../fatfs/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 20177              		.loc 1 1588 0
 20178 00fe 60B1     		cbz	r0, .L27
 20179              		.cfi_offset 14, -4
 20180              		.cfi_offset 3, -8
 20181              		.loc 1 1588 0 is_stmt 0 discriminator 1
 20182 0100 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 20183 0102 53B1     		cbz	r3, .L27
 20184 0104 C388     		ldrh	r3, [r0, #6]
 20185 0106 8B42     		cmp	r3, r1
 20186 0108 09D1     		bne	.L28
1589:../fatfs/ff.c **** 		return FR_INVALID_OBJECT;
1590:../fatfs/ff.c **** 
1591:../fatfs/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
1592:../fatfs/ff.c **** 
1593:../fatfs/ff.c **** 	if (disk_status(fs->drive) & STA_NOINIT)
 20187              		.loc 1 1593 0 is_stmt 1
 20188 010a 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 20189              	.LVL43:
 20190 010c FFF7FEFF 		bl	disk_status
 20191              	.LVL44:
 20192 0110 10F00100 		ands	r0, r0, #1
1594:../fatfs/ff.c **** 		return FR_NOT_READY;
 20193              		.loc 1 1594 0
 20194 0114 18BF     		it	ne
 20195 0116 0320     		movne	r0, #3
 20196 0118 08BD     		pop	{r3, pc}
 20197              	.LVL45:
 20198              	.L27:
1589:../fatfs/ff.c **** 		return FR_INVALID_OBJECT;
 20199              		.loc 1 1589 0
 20200 011a 0920     		movs	r0, #9
 20201              	.LVL46:
 20202 011c 08BD     		pop	{r3, pc}
 20203              	.LVL47:
 20204              	.L28:
 20205 011e 0920     		movs	r0, #9
 20206              	.LVL48:
1595:../fatfs/ff.c **** 
1596:../fatfs/ff.c **** 	return FR_OK;
1597:../fatfs/ff.c **** }
 20207              		.loc 1 1597 0
 20208 0120 08BD     		pop	{r3, pc}
 20209              		.cfi_endproc
 20210              	.LFE51:
 20212              		.align	1
 20213              		.thumb
 20214              		.thumb_func
 20216              	check_fs:
 20217              	.LFB49:
1422:../fatfs/ff.c **** {
 20218              		.loc 1 1422 0
 20219              		.cfi_startproc
 20220              		@ args = 0, pretend = 0, frame = 0
 20221              		@ frame_needed = 0, uses_anonymous_args = 0
 20222              	.LVL49:
 20223 0122 10B5     		push	{r4, lr}
 20224              	.LCFI3:
 20225              		.cfi_def_cfa_offset 8
1422:../fatfs/ff.c **** {
 20226              		.loc 1 1422 0
 20227 0124 0446     		mov	r4, r0
 20228              		.cfi_offset 14, -4
 20229              		.cfi_offset 4, -8
 20230 0126 0A46     		mov	r2, r1
1426:../fatfs/ff.c **** 	if (disk_read(fs->drive, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 20231              		.loc 1 1426 0
 20232 0128 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 20233              	.LVL50:
 20234 012a 04F13001 		add	r1, r4, #48
 20235              	.LVL51:
 20236 012e 0123     		movs	r3, #1
 20237 0130 FFF7FEFF 		bl	disk_read
 20238              	.LVL52:
 20239 0134 D8B9     		cbnz	r0, .L32
1428:../fatfs/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 20240              		.loc 1 1428 0
 20241 0136 94F82E32 		ldrb	r3, [r4, #558]	@ zero_extendqisi2
 20242 013a 94F82F22 		ldrb	r2, [r4, #559]	@ zero_extendqisi2
 20243 013e 43EA0222 		orr	r2, r3, r2, lsl #8
 20244 0142 0E4B     		ldr	r3, .L36
 20245 0144 12B2     		sxth	r2, r2
 20246 0146 9A42     		cmp	r2, r3
 20247 0148 13D1     		bne	.L33
1431:../fatfs/ff.c **** 	if (!mem_cmp(&fs->win[BS_FilSysType], fatstr, 3))	/* Check FAT signature */
 20248              		.loc 1 1431 0
 20249 014a 04F16600 		add	r0, r4, #102
 20250 014e 0C49     		ldr	r1, .L36+4
 20251 0150 0322     		movs	r2, #3
 20252 0152 FFF763FF 		bl	mem_cmp
 20253 0156 78B1     		cbz	r0, .L31
1433:../fatfs/ff.c **** 	if (!mem_cmp(&fs->win[BS_FilSysType32], fatstr, 3) && !(fs->win[BPB_ExtFlags] & 0x80))
 20254              		.loc 1 1433 0
 20255 0158 04F18200 		add	r0, r4, #130
 20256 015c 0849     		ldr	r1, .L36+4
 20257 015e 0322     		movs	r2, #3
 20258 0160 FFF75CFF 		bl	mem_cmp
 20259 0164 38B9     		cbnz	r0, .L35
1418:../fatfs/ff.c **** BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 
 20260              		.loc 1 1418 0 discriminator 1
 20261 0166 94F85800 		ldrb	r0, [r4, #88]	@ zero_extendqisi2
1427:../fatfs/ff.c **** 		return 3;
 20262              		.loc 1 1427 0 discriminator 1
 20263 016a C009     		lsrs	r0, r0, #7
 20264 016c 10BD     		pop	{r4, pc}
 20265              	.L32:
1427:../fatfs/ff.c **** 		return 3;
 20266              		.loc 1 1427 0 is_stmt 0
 20267 016e 0320     		movs	r0, #3
 20268 0170 10BD     		pop	{r4, pc}
 20269              	.L33:
1429:../fatfs/ff.c **** 		return 2;
 20270              		.loc 1 1429 0 is_stmt 1
 20271 0172 0220     		movs	r0, #2
 20272 0174 10BD     		pop	{r4, pc}
 20273              	.L35:
1436:../fatfs/ff.c **** 	return 1;
 20274              		.loc 1 1436 0
 20275 0176 0120     		movs	r0, #1
 20276              	.L31:
1437:../fatfs/ff.c **** }
 20277              		.loc 1 1437 0
 20278 0178 10BD     		pop	{r4, pc}
 20279              	.L37:
 20280 017a 00BF     		.align	2
 20281              	.L36:
 20282 017c 55AAFFFF 		.word	-21931
 20283 0180 00000000 		.word	.LANCHOR0
 20284              		.cfi_endproc
 20285              	.LFE49:
 20287              		.align	1
 20288              		.thumb
 20289              		.thumb_func
 20291              	auto_mount:
 20292              	.LFB50:
1452:../fatfs/ff.c **** {
 20293              		.loc 1 1452 0
 20294              		.cfi_startproc
 20295              		@ args = 0, pretend = 0, frame = 0
 20296              		@ frame_needed = 0, uses_anonymous_args = 0
 20297              	.LVL53:
 20298 0184 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20299              	.LCFI4:
 20300              		.cfi_def_cfa_offset 24
1458:../fatfs/ff.c **** 	const XCHAR *p = *path;
 20301              		.loc 1 1458 0
 20302 0188 0368     		ldr	r3, [r0, #0]
 20303              	.LVL54:
1452:../fatfs/ff.c **** {
 20304              		.loc 1 1452 0
 20305 018a 1546     		mov	r5, r2
 20306              		.cfi_offset 14, -4
 20307              		.cfi_offset 8, -8
 20308              		.cfi_offset 7, -12
 20309              		.cfi_offset 6, -16
 20310              		.cfi_offset 5, -20
 20311              		.cfi_offset 4, -24
1463:../fatfs/ff.c **** 	vol = p[0] - '0';				/* Is there a drive number? */
 20312              		.loc 1 1463 0
 20313 018c 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 20314              	.LVL55:
 20315 018e 303A     		subs	r2, r2, #48
 20316              	.LVL56:
1464:../fatfs/ff.c **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 20317              		.loc 1 1464 0
 20318 0190 092A     		cmp	r2, #9
 20319 0192 07D8     		bhi	.L39
 20320              	.LVL57:
1464:../fatfs/ff.c **** 	if (vol <= 9 && p[1] == ':') {	/* Found a drive number, get and strip it */
 20321              		.loc 1 1464 0 is_stmt 0 discriminator 1
 20322 0194 5C78     		ldrb	r4, [r3, #1]	@ zero_extendqisi2
 20323 0196 3A2C     		cmp	r4, #58
 20324 0198 04D1     		bne	.L39
 20325              	.LVL58:
1465:../fatfs/ff.c **** 		p += 2; *path = p;			/* Return pointer to the path name */
 20326              		.loc 1 1465 0 is_stmt 1
 20327 019a 0233     		adds	r3, r3, #2
 20328 019c 0360     		str	r3, [r0, #0]
1475:../fatfs/ff.c **** 	if (vol >= _DRIVES) 			/* Is the drive number valid? */
 20329              		.loc 1 1475 0
 20330 019e 002A     		cmp	r2, #0
 20331 01a0 40F01D81 		bne	.L50
 20332              	.LVL59:
 20333              	.L39:
1477:../fatfs/ff.c **** 	*rfs = fs = FatFs[vol];			/* Returen pointer to the corresponding file system object */
 20334              		.loc 1 1477 0
 20335 01a4 A24E     		ldr	r6, .L62
 20336 01a6 3468     		ldr	r4, [r6, #0]
 20337              	.LVL60:
 20338 01a8 0C60     		str	r4, [r1, #0]
1478:../fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 20339              		.loc 1 1478 0
 20340 01aa 002C     		cmp	r4, #0
 20341 01ac 00F01A81 		beq	.L51
1482:../fatfs/ff.c **** 	if (fs->fs_type) {				/* If the logical drive has been mounted */
 20342              		.loc 1 1482 0
 20343 01b0 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 20344              	.LVL61:
 20345 01b2 73B1     		cbz	r3, .L41
1483:../fatfs/ff.c **** 		stat = disk_status(fs->drive);
 20346              		.loc 1 1483 0
 20347 01b4 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 20348              	.LVL62:
 20349 01b6 FFF7FEFF 		bl	disk_status
 20350              	.LVL63:
1484:../fatfs/ff.c **** 		if (!(stat & STA_NOINIT)) {	/* and the physical drive is kept initialized (has not been changed),
 20351              		.loc 1 1484 0
 20352 01ba 10F0010F 		tst	r0, #1
 20353 01be 08D1     		bne	.L41
1486:../fatfs/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 20354              		.loc 1 1486 0
 20355 01c0 002D     		cmp	r5, #0
 20356 01c2 00F01281 		beq	.L52
1487:../fatfs/ff.c **** 				return FR_WRITE_PROTECTED;
 20357              		.loc 1 1487 0 discriminator 1
 20358 01c6 10F00400 		ands	r0, r0, #4
 20359              	.LVL64:
 20360 01ca 18BF     		it	ne
 20361 01cc 0A20     		movne	r0, #10
 20362 01ce BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20363              	.L41:
1495:../fatfs/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 20364              		.loc 1 1495 0
 20365 01d2 0020     		movs	r0, #0
 20366 01d4 2070     		strb	r0, [r4, #0]
1496:../fatfs/ff.c **** 	fs->drive = (BYTE)LD2PD(vol);		/* Bind the logical drive and a physical drive */
 20367              		.loc 1 1496 0
 20368 01d6 6070     		strb	r0, [r4, #1]
1497:../fatfs/ff.c **** 	stat = disk_initialize(fs->drive);	/* Initialize low level disk I/O layer */
 20369              		.loc 1 1497 0
 20370 01d8 FFF7FEFF 		bl	disk_initialize
 20371              	.LVL65:
1498:../fatfs/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the drive is ready */
 20372              		.loc 1 1498 0
 20373 01dc 10F0010F 		tst	r0, #1
 20374 01e0 40F00681 		bne	.L54
1505:../fatfs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 20375              		.loc 1 1505 0
 20376 01e4 1DB1     		cbz	r5, .L42
1505:../fatfs/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 20377              		.loc 1 1505 0 is_stmt 0 discriminator 1
 20378 01e6 10F0040F 		tst	r0, #4
 20379 01ea 40F00481 		bne	.L55
 20380              	.L42:
 20381              	.LVL66:
1509:../fatfs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 20382              		.loc 1 1509 0 is_stmt 1
 20383 01ee 0021     		movs	r1, #0
 20384 01f0 2046     		mov	r0, r4
 20385              	.LVL67:
 20386 01f2 FFF796FF 		bl	check_fs
 20387              	.LVL68:
1510:../fatfs/ff.c **** 	if (fmt == 1) {						/* Not an FAT boot record, it may be patitioned */
 20388              		.loc 1 1510 0
 20389 01f6 0128     		cmp	r0, #1
 20390 01f8 17D1     		bne	.L56
 20391              	.LVL69:
1513:../fatfs/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
 20392              		.loc 1 1513 0
 20393 01fa 94F8F231 		ldrb	r3, [r4, #498]	@ zero_extendqisi2
 20394 01fe 002B     		cmp	r3, #0
 20395 0200 00F0FF80 		beq	.L59
1514:../fatfs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 20396              		.loc 1 1514 0
 20397 0204 94F8F871 		ldrb	r7, [r4, #504]	@ zero_extendqisi2
 20398 0208 94F8F931 		ldrb	r3, [r4, #505]	@ zero_extendqisi2
 20399 020c 3F04     		lsls	r7, r7, #16
 20400 020e 47EA0367 		orr	r7, r7, r3, lsl #24
 20401 0212 94F8F631 		ldrb	r3, [r4, #502]	@ zero_extendqisi2
1515:../fatfs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 20402              		.loc 1 1515 0
 20403 0216 2046     		mov	r0, r4
 20404              	.LVL70:
1514:../fatfs/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 20405              		.loc 1 1514 0
 20406 0218 1F43     		orrs	r7, r7, r3
 20407 021a 94F8F731 		ldrb	r3, [r4, #503]	@ zero_extendqisi2
 20408 021e 47EA0327 		orr	r7, r7, r3, lsl #8
 20409              	.LVL71:
1515:../fatfs/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 20410              		.loc 1 1515 0
 20411 0222 3946     		mov	r1, r7
 20412 0224 FFF77DFF 		bl	check_fs
 20413              	.LVL72:
 20414 0228 00E0     		b	.L43
 20415              	.LVL73:
 20416              	.L56:
1509:../fatfs/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 as an SFD format */
 20417              		.loc 1 1509 0
 20418 022a 0027     		movs	r7, #0
 20419              	.LVL74:
 20420              	.L43:
1518:../fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 20421              		.loc 1 1518 0
 20422 022c 0328     		cmp	r0, #3
 20423 022e 00F0E580 		beq	.L58
1519:../fatfs/ff.c **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 20424              		.loc 1 1519 0
 20425 0232 0028     		cmp	r0, #0
 20426 0234 40F0E580 		bne	.L59
1519:../fatfs/ff.c **** 	if (fmt || LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))	/* No valid FAT patition is found */
 20427              		.loc 1 1519 0 is_stmt 0 discriminator 1
 20428 0238 94F83C20 		ldrb	r2, [r4, #60]	@ zero_extendqisi2
 20429 023c 94F83B30 		ldrb	r3, [r4, #59]	@ zero_extendqisi2
 20430 0240 43EA0223 		orr	r3, r3, r2, lsl #8
 20431 0244 B3F5007F 		cmp	r3, #512
 20432 0248 40F0DE80 		bne	.L60
1523:../fatfs/ff.c **** 	fsize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 20433              		.loc 1 1523 0 is_stmt 1
 20434 024c 94F84720 		ldrb	r2, [r4, #71]	@ zero_extendqisi2
 20435 0250 94F84630 		ldrb	r3, [r4, #70]	@ zero_extendqisi2
 20436              	.LVL75:
1524:../fatfs/ff.c **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 20437              		.loc 1 1524 0
 20438 0254 53EA0223 		orrs	r3, r3, r2, lsl #8
 20439              	.LVL76:
 20440 0258 0DD1     		bne	.L44
1524:../fatfs/ff.c **** 	if (!fsize) fsize = LD_DWORD(fs->win+BPB_FATSz32);
 20441              		.loc 1 1524 0 is_stmt 0 discriminator 1
 20442 025a 94F85630 		ldrb	r3, [r4, #86]	@ zero_extendqisi2
 20443              	.LVL77:
 20444 025e 94F85720 		ldrb	r2, [r4, #87]	@ zero_extendqisi2
 20445 0262 1B04     		lsls	r3, r3, #16
 20446 0264 43EA0263 		orr	r3, r3, r2, lsl #24
 20447 0268 94F85420 		ldrb	r2, [r4, #84]	@ zero_extendqisi2
 20448 026c 1343     		orrs	r3, r3, r2
 20449 026e 94F85520 		ldrb	r2, [r4, #85]	@ zero_extendqisi2
 20450 0272 43EA0223 		orr	r3, r3, r2, lsl #8
 20451              	.LVL78:
 20452              	.L44:
1526:../fatfs/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 20453              		.loc 1 1526 0 is_stmt 1
 20454 0276 94F84020 		ldrb	r2, [r4, #64]	@ zero_extendqisi2
1530:../fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 20455              		.loc 1 1530 0
 20456 027a 94F842C0 		ldrb	ip, [r4, #66]	@ zero_extendqisi2
 20457 027e 94F84100 		ldrb	r0, [r4, #65]	@ zero_extendqisi2
 20458              	.LVL79:
1525:../fatfs/ff.c **** 	fs->sects_fat = fsize;
 20459              		.loc 1 1525 0
 20460 0282 A361     		str	r3, [r4, #24]
1526:../fatfs/ff.c **** 	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 20461              		.loc 1 1526 0
 20462 0284 E270     		strb	r2, [r4, #3]
1527:../fatfs/ff.c **** 	fsize *= fs->n_fats;								/* (Number of sectors in FAT area) */
 20463              		.loc 1 1527 0
 20464 0286 5343     		muls	r3, r2, r3
 20465              	.LVL80:
1528:../fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 20466              		.loc 1 1528 0
 20467 0288 94F83F10 		ldrb	r1, [r4, #63]	@ zero_extendqisi2
 20468 028c 94F83E20 		ldrb	r2, [r4, #62]	@ zero_extendqisi2
1530:../fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 20469              		.loc 1 1530 0
 20470 0290 40EA0C20 		orr	r0, r0, ip, lsl #8
1531:../fatfs/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the file system */
 20471              		.loc 1 1531 0
 20472 0294 94F84480 		ldrb	r8, [r4, #68]	@ zero_extendqisi2
 20473 0298 94F843C0 		ldrb	ip, [r4, #67]	@ zero_extendqisi2
 20474              	.LVL81:
1528:../fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 20475              		.loc 1 1528 0
 20476 029c 42EA0121 		orr	r1, r2, r1, lsl #8
1529:../fatfs/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 20477              		.loc 1 1529 0
 20478 02a0 94F83D50 		ldrb	r5, [r4, #61]	@ zero_extendqisi2
1528:../fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 20479              		.loc 1 1528 0
 20480 02a4 7A18     		adds	r2, r7, r1
1532:../fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 20481              		.loc 1 1532 0
 20482 02a6 5CEA082C 		orrs	ip, ip, r8, lsl #8
 20483              	.LVL82:
1528:../fatfs/ff.c **** 	fs->fatbase = bsect + LD_WORD(fs->win+BPB_RsvdSecCnt); /* FAT start sector (lba) */
 20484              		.loc 1 1528 0
 20485 02aa 2262     		str	r2, [r4, #32]
1529:../fatfs/ff.c **** 	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 20486              		.loc 1 1529 0
 20487 02ac A570     		strb	r5, [r4, #2]
1530:../fatfs/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Nmuber of root directory entries */
 20488              		.loc 1 1530 0
 20489 02ae 2081     		strh	r0, [r4, #8]	@ movhi
1532:../fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 20490              		.loc 1 1532 0
 20491 02b0 0FD1     		bne	.L45
1532:../fatfs/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 20492              		.loc 1 1532 0 is_stmt 0 discriminator 1
 20493 02b2 94F852C0 		ldrb	ip, [r4, #82]	@ zero_extendqisi2
 20494              	.LVL83:
 20495 02b6 94F85380 		ldrb	r8, [r4, #83]	@ zero_extendqisi2
 20496 02ba 4FEA0C4C 		lsl	ip, ip, #16
 20497 02be 4CEA086C 		orr	ip, ip, r8, lsl #24
 20498 02c2 94F85080 		ldrb	r8, [r4, #80]	@ zero_extendqisi2
 20499 02c6 4CEA080C 		orr	ip, ip, r8
 20500 02ca 94F85180 		ldrb	r8, [r4, #81]	@ zero_extendqisi2
 20501 02ce 4CEA082C 		orr	ip, ip, r8, lsl #8
 20502              	.LVL84:
 20503              	.L45:
1534:../fatfs/ff.c **** 		- LD_WORD(fs->win+BPB_RsvdSecCnt) - fsize - fs->n_rootdir / (SS(fs)/32)
 20504              		.loc 1 1534 0 is_stmt 1
 20505 02d2 C1EB0C01 		rsb	r1, r1, ip
 20506 02d6 0009     		lsrs	r0, r0, #4
 20507 02d8 C91A     		subs	r1, r1, r3
 20508 02da 091A     		subs	r1, r1, r0
1535:../fatfs/ff.c **** 		) / fs->csize + 2;
 20509              		.loc 1 1535 0
 20510 02dc B1FBF5F1 		udiv	r1, r1, r5
1533:../fatfs/ff.c **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 20511              		.loc 1 1533 0
 20512 02e0 0231     		adds	r1, r1, #2
 20513              	.LVL85:
1538:../fatfs/ff.c **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 20514              		.loc 1 1538 0
 20515 02e2 40F6F675 		movw	r5, #4086
 20516 02e6 A942     		cmp	r1, r5
1533:../fatfs/ff.c **** 	fs->max_clust = mclst = (tsect						/* Last cluster# + 1 */
 20517              		.loc 1 1533 0
 20518 02e8 E161     		str	r1, [r4, #28]
 20519              	.LVL86:
1538:../fatfs/ff.c **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 20520              		.loc 1 1538 0
 20521 02ea 06D9     		bls	.L61
 20522              	.LVL87:
1539:../fatfs/ff.c **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 20523              		.loc 1 1539 0
 20524 02ec 4FF6F675 		movw	r5, #65526
 20525 02f0 A942     		cmp	r1, r5
 20526 02f2 00F28C80 		bhi	.L47
1538:../fatfs/ff.c **** 	if (mclst >= 0xFF7) fmt = FS_FAT16;					/* Number of clusters >= 0xFF5 */
 20527              		.loc 1 1538 0
 20528 02f6 0225     		movs	r5, #2
 20529 02f8 00E0     		b	.L46
 20530              	.LVL88:
 20531              	.L61:
1537:../fatfs/ff.c **** 	fmt = FS_FAT12;										/* Determine the FAT sub type */
 20532              		.loc 1 1537 0
 20533 02fa 0125     		movs	r5, #1
 20534              	.LVL89:
 20535              	.L46:
1544:../fatfs/ff.c **** 		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
 20536              		.loc 1 1544 0
 20537 02fc 9918     		adds	r1, r3, r2
 20538              	.LVL90:
 20539 02fe 6162     		str	r1, [r4, #36]
 20540              	.LVL91:
 20541              	.L49:
1545:../fatfs/ff.c **** 	fs->database = fs->fatbase + fsize + fs->n_rootdir / (SS(fs)/32);	/* Data start sector (lba) */
 20542              		.loc 1 1545 0
 20543 0300 1218     		adds	r2, r2, r0
 20544 0302 D318     		adds	r3, r2, r3
 20545              	.LVL92:
 20546 0304 A362     		str	r3, [r4, #40]
1549:../fatfs/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 20547              		.loc 1 1549 0
 20548 0306 4FF0FF33 		mov	r3, #-1
 20549 030a 2361     		str	r3, [r4, #16]
1550:../fatfs/ff.c **** 	fs->wflag = 0;
 20550              		.loc 1 1550 0
 20551 030c 0133     		adds	r3, r3, #1
1552:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 20552              		.loc 1 1552 0
 20553 030e 032D     		cmp	r5, #3
1550:../fatfs/ff.c **** 	fs->wflag = 0;
 20554              		.loc 1 1550 0
 20555 0310 2371     		strb	r3, [r4, #4]
1552:../fatfs/ff.c **** 	if (fmt == FS_FAT32) {
 20556              		.loc 1 1552 0
 20557 0312 5AD1     		bne	.L48
1553:../fatfs/ff.c **** 	 	fs->fsi_flag = 0;
 20558              		.loc 1 1553 0
 20559 0314 A372     		strb	r3, [r4, #10]
1554:../fatfs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 20560              		.loc 1 1554 0
 20561 0316 94F86120 		ldrb	r2, [r4, #97]	@ zero_extendqisi2
 20562 031a 94F86030 		ldrb	r3, [r4, #96]	@ zero_extendqisi2
1555:../fatfs/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 20563              		.loc 1 1555 0
 20564 031e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
1554:../fatfs/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 20565              		.loc 1 1554 0
 20566 0320 43EA0222 		orr	r2, r3, r2, lsl #8
 20567 0324 BA18     		adds	r2, r7, r2
 20568 0326 6261     		str	r2, [r4, #20]
1555:../fatfs/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 20569              		.loc 1 1555 0
 20570 0328 04F13001 		add	r1, r4, #48
 20571 032c 0123     		movs	r3, #1
 20572 032e FFF7FEFF 		bl	disk_read
 20573              	.LVL93:
 20574 0332 0028     		cmp	r0, #0
 20575 0334 49D1     		bne	.L48
1556:../fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 20576              		.loc 1 1556 0 discriminator 1
 20577 0336 94F82E32 		ldrb	r3, [r4, #558]	@ zero_extendqisi2
 20578 033a 94F82F22 		ldrb	r2, [r4, #559]	@ zero_extendqisi2
 20579 033e 43EA0222 		orr	r2, r3, r2, lsl #8
1555:../fatfs/ff.c **** 		if (disk_read(fs->drive, fs->win, fs->fsi_sector, 1) == RES_OK &&
 20580              		.loc 1 1555 0 discriminator 1
 20581 0342 3C4B     		ldr	r3, .L62+4
 20582 0344 12B2     		sxth	r2, r2
 20583 0346 9A42     		cmp	r2, r3
 20584 0348 3FD1     		bne	.L48
1557:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 20585              		.loc 1 1557 0
 20586 034a 94F83220 		ldrb	r2, [r4, #50]	@ zero_extendqisi2
 20587 034e 94F83330 		ldrb	r3, [r4, #51]	@ zero_extendqisi2
 20588 0352 1204     		lsls	r2, r2, #16
 20589 0354 42EA0362 		orr	r2, r2, r3, lsl #24
 20590 0358 94F83030 		ldrb	r3, [r4, #48]	@ zero_extendqisi2
 20591 035c 1A43     		orrs	r2, r2, r3
 20592 035e 94F83130 		ldrb	r3, [r4, #49]	@ zero_extendqisi2
 20593 0362 42EA0322 		orr	r2, r2, r3, lsl #8
1556:../fatfs/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 20594              		.loc 1 1556 0
 20595 0366 344B     		ldr	r3, .L62+8
 20596 0368 9A42     		cmp	r2, r3
 20597 036a 2ED1     		bne	.L48
1558:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 20598              		.loc 1 1558 0
 20599 036c 94F81622 		ldrb	r2, [r4, #534]	@ zero_extendqisi2
 20600 0370 94F81732 		ldrb	r3, [r4, #535]	@ zero_extendqisi2
 20601 0374 1204     		lsls	r2, r2, #16
 20602 0376 42EA0362 		orr	r2, r2, r3, lsl #24
 20603 037a 94F81432 		ldrb	r3, [r4, #532]	@ zero_extendqisi2
 20604 037e 1A43     		orrs	r2, r2, r3
 20605 0380 94F81532 		ldrb	r3, [r4, #533]	@ zero_extendqisi2
 20606 0384 42EA0322 		orr	r2, r2, r3, lsl #8
1557:../fatfs/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 20607              		.loc 1 1557 0
 20608 0388 2C4B     		ldr	r3, .L62+12
 20609 038a 9A42     		cmp	r2, r3
 20610 038c 1DD1     		bne	.L48
1559:../fatfs/ff.c **** 			fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 20611              		.loc 1 1559 0
 20612 038e 94F81E32 		ldrb	r3, [r4, #542]	@ zero_extendqisi2
 20613 0392 94F81F22 		ldrb	r2, [r4, #543]	@ zero_extendqisi2
 20614 0396 1B04     		lsls	r3, r3, #16
 20615 0398 43EA0263 		orr	r3, r3, r2, lsl #24
 20616 039c 94F81C22 		ldrb	r2, [r4, #540]	@ zero_extendqisi2
 20617 03a0 1343     		orrs	r3, r3, r2
 20618 03a2 94F81D22 		ldrb	r2, [r4, #541]	@ zero_extendqisi2
 20619 03a6 43EA0223 		orr	r3, r3, r2, lsl #8
 20620 03aa E360     		str	r3, [r4, #12]
1560:../fatfs/ff.c **** 			fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 20621              		.loc 1 1560 0
 20622 03ac 94F81A32 		ldrb	r3, [r4, #538]	@ zero_extendqisi2
 20623 03b0 94F81B22 		ldrb	r2, [r4, #539]	@ zero_extendqisi2
 20624 03b4 1B04     		lsls	r3, r3, #16
 20625 03b6 43EA0263 		orr	r3, r3, r2, lsl #24
 20626 03ba 94F81822 		ldrb	r2, [r4, #536]	@ zero_extendqisi2
 20627 03be 1343     		orrs	r3, r3, r2
 20628 03c0 94F81922 		ldrb	r2, [r4, #537]	@ zero_extendqisi2
 20629 03c4 43EA0223 		orr	r3, r3, r2, lsl #8
 20630 03c8 2361     		str	r3, [r4, #16]
 20631              	.L48:
1564:../fatfs/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 20632              		.loc 1 1564 0
 20633 03ca 2570     		strb	r5, [r4, #0]
1569:../fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 20634              		.loc 1 1569 0
 20635 03cc B388     		ldrh	r3, [r6, #4]
1565:../fatfs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 20636              		.loc 1 1565 0
 20637 03ce 0020     		movs	r0, #0
1569:../fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 20638              		.loc 1 1569 0
 20639 03d0 0133     		adds	r3, r3, #1
 20640 03d2 9BB2     		uxth	r3, r3
1565:../fatfs/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 20641              		.loc 1 1565 0
 20642 03d4 E062     		str	r0, [r4, #44]
1569:../fatfs/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 20643              		.loc 1 1569 0
 20644 03d6 B380     		strh	r3, [r6, #4]	@ movhi
 20645 03d8 E380     		strh	r3, [r4, #6]	@ movhi
 20646              	.LVL94:
1572:../fatfs/ff.c **** 	return res;
 20647              		.loc 1 1572 0
 20648 03da BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20649              	.LVL95:
 20650              	.L50:
1476:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
 20651              		.loc 1 1476 0
 20652 03de 0B20     		movs	r0, #11
 20653              	.LVL96:
 20654 03e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20655              	.LVL97:
 20656              	.L51:
1478:../fatfs/ff.c **** 	if (!fs) return FR_NOT_ENABLED;	/* Is the file system object registered? */
 20657              		.loc 1 1478 0
 20658 03e4 0C20     		movs	r0, #12
 20659              	.LVL98:
 20660 03e6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20661              	.LVL99:
 20662              	.L52:
1489:../fatfs/ff.c **** 			return FR_OK;			/* The file system object is valid */
 20663              		.loc 1 1489 0
 20664 03ea 2846     		mov	r0, r5
 20665              	.LVL100:
 20666 03ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20667              	.LVL101:
 20668              	.L54:
1499:../fatfs/ff.c **** 		return FR_NOT_READY;
 20669              		.loc 1 1499 0
 20670 03f0 0320     		movs	r0, #3
 20671              	.LVL102:
 20672 03f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20673              	.LVL103:
 20674              	.L55:
1506:../fatfs/ff.c **** 		return FR_WRITE_PROTECTED;
 20675              		.loc 1 1506 0
 20676 03f6 0A20     		movs	r0, #10
 20677              	.LVL104:
 20678 03f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20679              	.LVL105:
 20680              	.L58:
1518:../fatfs/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 20681              		.loc 1 1518 0
 20682 03fc 0120     		movs	r0, #1
 20683              	.LVL106:
 20684 03fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20685              	.LVL107:
 20686              	.L59:
1520:../fatfs/ff.c **** 		return FR_NO_FILESYSTEM;
 20687              		.loc 1 1520 0
 20688 0402 0D20     		movs	r0, #13
 20689 0404 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20690              	.LVL108:
 20691              	.L60:
 20692 0408 0D20     		movs	r0, #13
 20693              	.LVL109:
1573:../fatfs/ff.c **** }
 20694              		.loc 1 1573 0
 20695 040a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20696              	.LVL110:
 20697              	.L47:
1542:../fatfs/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 20698              		.loc 1 1542 0
 20699 040e 94F85E10 		ldrb	r1, [r4, #94]	@ zero_extendqisi2
 20700              	.LVL111:
 20701 0412 94F85F50 		ldrb	r5, [r4, #95]	@ zero_extendqisi2
 20702 0416 0904     		lsls	r1, r1, #16
 20703 0418 41EA0561 		orr	r1, r1, r5, lsl #24
 20704 041c 94F85C50 		ldrb	r5, [r4, #92]	@ zero_extendqisi2
 20705 0420 2943     		orrs	r1, r1, r5
 20706 0422 94F85D50 		ldrb	r5, [r4, #93]	@ zero_extendqisi2
 20707 0426 41EA0521 		orr	r1, r1, r5, lsl #8
 20708 042a 6162     		str	r1, [r4, #36]
1539:../fatfs/ff.c **** 	if (mclst >= 0xFFF7) fmt = FS_FAT32;				/* Number of clusters >= 0xFFF5 */
 20709              		.loc 1 1539 0
 20710 042c 0325     		movs	r5, #3
 20711 042e 67E7     		b	.L49
 20712              	.L63:
 20713              		.align	2
 20714              	.L62:
 20715 0430 00000000 		.word	.LANCHOR1
 20716 0434 55AAFFFF 		.word	-21931
 20717 0438 52526141 		.word	1096897106
 20718 043c 72724161 		.word	1631679090
 20719              		.cfi_endproc
 20720              	.LFE50:
 20722              		.align	1
 20723              		.thumb
 20724              		.thumb_func
 20726              	move_window:
 20727              	.LFB33:
 233:../fatfs/ff.c **** {
 20728              		.loc 1 233 0
 20729              		.cfi_startproc
 20730              		@ args = 0, pretend = 0, frame = 0
 20731              		@ frame_needed = 0, uses_anonymous_args = 0
 20732              	.LVL112:
 20733 0440 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20734              	.LCFI5:
 20735              		.cfi_def_cfa_offset 24
 237:../fatfs/ff.c **** 	wsect = fs->winsect;
 20736              		.loc 1 237 0
 20737 0444 C56A     		ldr	r5, [r0, #44]
 20738              		.cfi_offset 14, -4
 20739              		.cfi_offset 8, -8
 20740              		.cfi_offset 7, -12
 20741              		.cfi_offset 6, -16
 20742              		.cfi_offset 5, -20
 20743              		.cfi_offset 4, -24
 20744              	.LVL113:
 233:../fatfs/ff.c **** {
 20745              		.loc 1 233 0
 20746 0446 0446     		mov	r4, r0
 238:../fatfs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 20747              		.loc 1 238 0
 20748 0448 8D42     		cmp	r5, r1
 233:../fatfs/ff.c **** {
 20749              		.loc 1 233 0
 20750 044a 0E46     		mov	r6, r1
 238:../fatfs/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 20751              		.loc 1 238 0
 20752 044c 2AD0     		beq	.L69
 240:../fatfs/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 20753              		.loc 1 240 0
 20754 044e 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 20755 0450 E3B1     		cbz	r3, .L66
 241:../fatfs/ff.c **** 			if (disk_write(fs->drive, fs->win, wsect, 1) != RES_OK)
 20756              		.loc 1 241 0
 20757 0452 00F13008 		add	r8, r0, #48
 20758 0456 4146     		mov	r1, r8
 20759              	.LVL114:
 20760 0458 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 20761              	.LVL115:
 20762 045a 2A46     		mov	r2, r5
 20763 045c 0123     		movs	r3, #1
 20764 045e FFF7FEFF 		bl	disk_write
 20765              	.LVL116:
 20766 0462 10BB     		cbnz	r0, .L70
 244:../fatfs/ff.c **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 20767              		.loc 1 244 0
 20768 0464 A269     		ldr	r2, [r4, #24]
 20769 0466 236A     		ldr	r3, [r4, #32]
 243:../fatfs/ff.c **** 			fs->wflag = 0;
 20770              		.loc 1 243 0
 20771 0468 2071     		strb	r0, [r4, #4]
 244:../fatfs/ff.c **** 			if (wsect < (fs->fatbase + fs->sects_fat)) {	/* In FAT area */
 20772              		.loc 1 244 0
 20773 046a D318     		adds	r3, r2, r3
 20774 046c 9D42     		cmp	r5, r3
 20775 046e 0DD2     		bcs	.L66
 20776              	.LBB2:
 246:../fatfs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 20777              		.loc 1 246 0
 20778 0470 E778     		ldrb	r7, [r4, #3]	@ zero_extendqisi2
 20779              	.LVL117:
 20780 0472 09E0     		b	.L67
 20781              	.L68:
 247:../fatfs/ff.c **** 					wsect += fs->sects_fat;
 20782              		.loc 1 247 0 discriminator 2
 20783 0474 A369     		ldr	r3, [r4, #24]
 248:../fatfs/ff.c **** 					disk_write(fs->drive, fs->win, wsect, 1);
 20784              		.loc 1 248 0 discriminator 2
 20785 0476 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 247:../fatfs/ff.c **** 					wsect += fs->sects_fat;
 20786              		.loc 1 247 0 discriminator 2
 20787 0478 ED18     		adds	r5, r5, r3
 20788              	.LVL118:
 248:../fatfs/ff.c **** 					disk_write(fs->drive, fs->win, wsect, 1);
 20789              		.loc 1 248 0 discriminator 2
 20790 047a 4146     		mov	r1, r8
 20791 047c 2A46     		mov	r2, r5
 20792 047e 0123     		movs	r3, #1
 20793 0480 FFF7FEFF 		bl	disk_write
 246:../fatfs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 20794              		.loc 1 246 0 discriminator 2
 20795 0484 013F     		subs	r7, r7, #1
 20796              	.LVL119:
 20797 0486 FFB2     		uxtb	r7, r7
 20798              	.LVL120:
 20799              	.L67:
 246:../fatfs/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Refrect the change to all FAT copies */
 20800              		.loc 1 246 0 is_stmt 0 discriminator 1
 20801 0488 012F     		cmp	r7, #1
 20802 048a F3D8     		bhi	.L68
 20803              	.LVL121:
 20804              	.L66:
 20805              	.LBE2:
 253:../fatfs/ff.c **** 		if (sector) {
 20806              		.loc 1 253 0 is_stmt 1
 20807 048c 86B1     		cbz	r6, .L71
 254:../fatfs/ff.c **** 			if (disk_read(fs->drive, fs->win, sector, 1) != RES_OK)
 20808              		.loc 1 254 0
 20809 048e 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 20810 0490 04F13001 		add	r1, r4, #48
 20811 0494 3246     		mov	r2, r6
 20812 0496 0123     		movs	r3, #1
 20813 0498 FFF7FEFF 		bl	disk_read
 20814 049c 58B9     		cbnz	r0, .L72
 256:../fatfs/ff.c **** 			fs->winsect = sector;
 20815              		.loc 1 256 0
 20816 049e E662     		str	r6, [r4, #44]
 20817 04a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20818              	.L69:
 260:../fatfs/ff.c **** 	return FR_OK;
 20819              		.loc 1 260 0
 20820 04a4 0020     		movs	r0, #0
 20821 04a6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20822              	.L70:
 242:../fatfs/ff.c **** 				return FR_DISK_ERR;
 20823              		.loc 1 242 0
 20824 04aa 0120     		movs	r0, #1
 20825 04ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20826              	.L71:
 260:../fatfs/ff.c **** 	return FR_OK;
 20827              		.loc 1 260 0
 20828 04b0 3046     		mov	r0, r6
 20829 04b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20830              	.L72:
 255:../fatfs/ff.c **** 				return FR_DISK_ERR;
 20831              		.loc 1 255 0
 20832 04b6 0120     		movs	r0, #1
 261:../fatfs/ff.c **** }
 20833              		.loc 1 261 0
 20834 04b8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20835              		.cfi_endproc
 20836              	.LFE33:
 20838              		.align	1
 20839              		.thumb
 20840              		.thumb_func
 20842              	get_fat:
 20843              	.LFB35:
 313:../fatfs/ff.c **** {
 20844              		.loc 1 313 0
 20845              		.cfi_startproc
 20846              		@ args = 0, pretend = 0, frame = 0
 20847              		@ frame_needed = 0, uses_anonymous_args = 0
 20848              	.LVL122:
 318:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 20849              		.loc 1 318 0
 20850 04bc 0129     		cmp	r1, #1
 313:../fatfs/ff.c **** {
 20851              		.loc 1 313 0
 20852 04be 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20853              	.LCFI6:
 20854              		.cfi_def_cfa_offset 24
 313:../fatfs/ff.c **** {
 20855              		.loc 1 313 0
 20856 04c2 0546     		mov	r5, r0
 20857              		.cfi_offset 14, -4
 20858              		.cfi_offset 8, -8
 20859              		.cfi_offset 7, -12
 20860              		.cfi_offset 6, -16
 20861              		.cfi_offset 5, -20
 20862              		.cfi_offset 4, -24
 20863 04c4 0C46     		mov	r4, r1
 318:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 20864              		.loc 1 318 0
 20865 04c6 5AD9     		bls	.L80
 318:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust)	/* Range check */
 20866              		.loc 1 318 0 is_stmt 0 discriminator 1
 20867 04c8 C369     		ldr	r3, [r0, #28]
 20868 04ca 9942     		cmp	r1, r3
 20869 04cc 57D2     		bcs	.L80
 322:../fatfs/ff.c **** 	switch (fs->fs_type) {
 20870              		.loc 1 322 0 is_stmt 1
 20871 04ce 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 321:../fatfs/ff.c **** 	fsect = fs->fatbase;
 20872              		.loc 1 321 0
 20873 04d0 066A     		ldr	r6, [r0, #32]
 20874              	.LVL123:
 322:../fatfs/ff.c **** 	switch (fs->fs_type) {
 20875              		.loc 1 322 0
 20876 04d2 022B     		cmp	r3, #2
 20877 04d4 29D0     		beq	.L76
 20878 04d6 032B     		cmp	r3, #3
 20879 04d8 37D0     		beq	.L77
 20880 04da 012B     		cmp	r3, #1
 20881 04dc 52D1     		bne	.L84
 20882              	.LVL124:
 324:../fatfs/ff.c **** 		bc = clst; bc += bc / 2;
 20883              		.loc 1 324 0
 20884 04de 01EB5107 		add	r7, r1, r1, lsr #1
 20885              	.LVL125:
 325:../fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 20886              		.loc 1 325 0
 20887 04e2 06EB5721 		add	r1, r6, r7, lsr #9
 20888              	.LVL126:
 20889 04e6 FFF7ABFF 		bl	move_window
 20890              	.LVL127:
 20891 04ea 0028     		cmp	r0, #0
 20892 04ec 4AD1     		bne	.L84
 326:../fatfs/ff.c **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 20893              		.loc 1 326 0
 20894 04ee FB05     		lsls	r3, r7, #23
 20895 04f0 DB0D     		lsrs	r3, r3, #23
 20896 04f2 0137     		adds	r7, r7, #1
 20897              	.LVL128:
 20898 04f4 EB18     		adds	r3, r5, r3
 327:../fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 20899              		.loc 1 327 0
 20900 04f6 2846     		mov	r0, r5
 20901 04f8 06EB5721 		add	r1, r6, r7, lsr #9
 326:../fatfs/ff.c **** 		wc = fs->win[bc & (SS(fs) - 1)]; bc++;
 20902              		.loc 1 326 0
 20903 04fc 93F83080 		ldrb	r8, [r3, #48]	@ zero_extendqisi2
 20904              	.LVL129:
 327:../fatfs/ff.c **** 		if (move_window(fs, fsect + (bc / SS(fs)))) break;
 20905              		.loc 1 327 0
 20906 0500 FFF79EFF 		bl	move_window
 20907 0504 0028     		cmp	r0, #0
 20908 0506 3DD1     		bne	.L84
 328:../fatfs/ff.c **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 20909              		.loc 1 328 0
 20910 0508 FF05     		lsls	r7, r7, #23
 20911              	.LVL130:
 20912 050a FF0D     		lsrs	r7, r7, #23
 20913 050c EF19     		adds	r7, r5, r7
 20914 050e 97F83000 		ldrb	r0, [r7, #48]	@ zero_extendqisi2
 329:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 20915              		.loc 1 329 0
 20916 0512 14F0010F 		tst	r4, #1
 328:../fatfs/ff.c **** 		wc |= (WORD)fs->win[bc & (SS(fs) - 1)] << 8;
 20917              		.loc 1 328 0
 20918 0516 48EA0020 		orr	r0, r8, r0, lsl #8
 20919              	.LVL131:
 329:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 20920              		.loc 1 329 0
 20921 051a 02D0     		beq	.L78
 329:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 20922              		.loc 1 329 0 is_stmt 0 discriminator 1
 20923 051c 0009     		lsrs	r0, r0, #4
 20924              	.LVL132:
 20925 051e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20926              	.LVL133:
 20927              	.L78:
 329:../fatfs/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 20928              		.loc 1 329 0 discriminator 2
 20929 0522 0005     		lsls	r0, r0, #20
 20930              	.LVL134:
 20931 0524 000D     		lsrs	r0, r0, #20
 20932 0526 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20933              	.L76:
 332:../fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 2)))) break;
 20934              		.loc 1 332 0 is_stmt 1
 20935 052a 06EB1121 		add	r1, r6, r1, lsr #8
 20936 052e FFF787FF 		bl	move_window
 20937 0532 38BB     		cbnz	r0, .L84
 333:../fatfs/ff.c **** 		return LD_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)]);
 20938              		.loc 1 333 0
 20939 0534 2406     		lsls	r4, r4, #24
 20940              	.LVL135:
 20941 0536 05EBD455 		add	r5, r5, r4, lsr #23
 20942              	.LVL136:
 20943 053a 95F83100 		ldrb	r0, [r5, #49]	@ zero_extendqisi2
 20944 053e 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 20945 0542 43EA0020 		orr	r0, r3, r0, lsl #8
 20946 0546 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20947              	.LVL137:
 20948              	.L77:
 336:../fatfs/ff.c **** 		if (move_window(fs, fsect + (clst / (SS(fs) / 4)))) break;
 20949              		.loc 1 336 0
 20950 054a 06EBD111 		add	r1, r6, r1, lsr #7
 20951              	.LVL138:
 20952 054e FFF777FF 		bl	move_window
 20953              	.LVL139:
 20954 0552 D8B9     		cbnz	r0, .L85
 337:../fatfs/ff.c **** 		return LD_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)]) & 0x0FFFFFFF;
 20955              		.loc 1 337 0
 20956 0554 6406     		lsls	r4, r4, #25
 20957              	.LVL140:
 20958 0556 05EBD455 		add	r5, r5, r4, lsr #23
 20959              	.LVL141:
 20960 055a 95F83200 		ldrb	r0, [r5, #50]	@ zero_extendqisi2
 20961 055e 95F83330 		ldrb	r3, [r5, #51]	@ zero_extendqisi2
 20962 0562 0004     		lsls	r0, r0, #16
 20963 0564 40EA0360 		orr	r0, r0, r3, lsl #24
 20964 0568 95F83030 		ldrb	r3, [r5, #48]	@ zero_extendqisi2
 20965 056c 95F83180 		ldrb	r8, [r5, #49]	@ zero_extendqisi2
 20966 0570 1843     		orrs	r0, r0, r3
 20967 0572 40EA0820 		orr	r0, r0, r8, lsl #8
 20968 0576 20F07040 		bic	r0, r0, #-268435456
 20969 057a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20970              	.LVL142:
 20971              	.L80:
 319:../fatfs/ff.c **** 		return 1;
 20972              		.loc 1 319 0
 20973 057e 0120     		movs	r0, #1
 20974              	.LVL143:
 20975 0580 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20976              	.LVL144:
 20977              	.L84:
 340:../fatfs/ff.c **** 	return 0xFFFFFFFF;	/* An error occured at the disk I/O layer */
 20978              		.loc 1 340 0
 20979 0584 4FF0FF30 		mov	r0, #-1
 20980 0588 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20981              	.L85:
 20982 058c 4FF0FF30 		mov	r0, #-1
 341:../fatfs/ff.c **** }
 20983              		.loc 1 341 0
 20984 0590 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 20985              		.cfi_endproc
 20986              	.LFE35:
 20988              		.align	1
 20989              		.thumb
 20990              		.thumb_func
 20992              	dir_seek:
 20993              	.LFB40:
 535:../fatfs/ff.c **** {
 20994              		.loc 1 535 0
 20995              		.cfi_startproc
 20996              		@ args = 0, pretend = 0, frame = 0
 20997              		@ frame_needed = 0, uses_anonymous_args = 0
 20998              	.LVL145:
 20999 0594 70B5     		push	{r4, r5, r6, lr}
 21000              	.LCFI7:
 21001              		.cfi_def_cfa_offset 16
 535:../fatfs/ff.c **** {
 21002              		.loc 1 535 0
 21003 0596 0446     		mov	r4, r0
 21004              		.cfi_offset 14, -4
 21005              		.cfi_offset 6, -8
 21006              		.cfi_offset 5, -12
 21007              		.cfi_offset 4, -16
 21008 0598 0D46     		mov	r5, r1
 540:../fatfs/ff.c **** 	dj->index = idx;
 21009              		.loc 1 540 0
 21010 059a E180     		strh	r1, [r4, #6]	@ movhi
 541:../fatfs/ff.c **** 	clst = dj->sclust;
 21011              		.loc 1 541 0
 21012 059c 8168     		ldr	r1, [r0, #8]
 21013              	.LVL146:
 542:../fatfs/ff.c **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 21014              		.loc 1 542 0
 21015 059e 0129     		cmp	r1, #1
 21016 05a0 39D0     		beq	.L98
 542:../fatfs/ff.c **** 	if (clst == 1 || clst >= dj->fs->max_clust)	/* Check start cluster range */
 21017              		.loc 1 542 0 is_stmt 0 discriminator 1
 21018 05a2 0368     		ldr	r3, [r0, #0]
 21019 05a4 DA69     		ldr	r2, [r3, #28]
 21020 05a6 9142     		cmp	r1, r2
 21021 05a8 35D2     		bcs	.L98
 544:../fatfs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 21022              		.loc 1 544 0 is_stmt 1
 21023 05aa 71B9     		cbnz	r1, .L89
 544:../fatfs/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 21024              		.loc 1 544 0 is_stmt 0 discriminator 1
 21025 05ac 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 21026 05ae 032A     		cmp	r2, #3
 21027 05b0 01D1     		bne	.L90
 545:../fatfs/ff.c **** 		clst = dj->fs->dirbase;
 21028              		.loc 1 545 0 is_stmt 1
 21029 05b2 596A     		ldr	r1, [r3, #36]
 21030              	.LVL147:
 547:../fatfs/ff.c **** 	if (clst == 0) {	/* Static table */
 21031              		.loc 1 547 0
 21032 05b4 49B9     		cbnz	r1, .L89
 21033              	.LVL148:
 21034              	.L90:
 548:../fatfs/ff.c **** 		dj->clust = clst;
 21035              		.loc 1 548 0
 21036 05b6 0022     		movs	r2, #0
 21037 05b8 E260     		str	r2, [r4, #12]
 549:../fatfs/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 21038              		.loc 1 549 0
 21039 05ba 1A89     		ldrh	r2, [r3, #8]
 21040 05bc AA42     		cmp	r2, r5
 21041 05be 2AD9     		bls	.L98
 551:../fatfs/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 21042              		.loc 1 551 0
 21043 05c0 5B6A     		ldr	r3, [r3, #36]
 21044 05c2 03EB1513 		add	r3, r3, r5, lsr #4
 21045 05c6 2361     		str	r3, [r4, #16]
 21046 05c8 1AE0     		b	.L91
 21047              	.L89:
 554:../fatfs/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 21048              		.loc 1 554 0
 21049 05ca 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 21050 05cc 3601     		lsls	r6, r6, #4
 21051              	.LVL149:
 555:../fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 21052              		.loc 1 555 0
 21053 05ce 0EE0     		b	.L92
 21054              	.LVL150:
 21055              	.L93:
 556:../fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 21056              		.loc 1 556 0
 21057 05d0 2068     		ldr	r0, [r4, #0]
 21058 05d2 FFF773FF 		bl	get_fat
 21059              	.LVL151:
 557:../fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 21060              		.loc 1 557 0
 21061 05d6 B0F1FF3F 		cmp	r0, #-1
 556:../fatfs/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 21062              		.loc 1 556 0
 21063 05da 0146     		mov	r1, r0
 21064              	.LVL152:
 557:../fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 21065              		.loc 1 557 0
 21066 05dc 19D0     		beq	.L97
 558:../fatfs/ff.c **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 21067              		.loc 1 558 0
 21068 05de 0128     		cmp	r0, #1
 21069 05e0 19D9     		bls	.L98
 558:../fatfs/ff.c **** 			if (clst < 2 || clst >= dj->fs->max_clust)	/* Reached to end of table or int error */
 21070              		.loc 1 558 0 is_stmt 0 discriminator 1
 21071 05e2 2368     		ldr	r3, [r4, #0]
 21072 05e4 DB69     		ldr	r3, [r3, #28]
 21073 05e6 9842     		cmp	r0, r3
 21074 05e8 17D2     		bcs	.L99
 560:../fatfs/ff.c **** 			idx -= ic;
 21075              		.loc 1 560 0 is_stmt 1
 21076 05ea AD1B     		subs	r5, r5, r6
 21077              	.LVL153:
 21078 05ec ADB2     		uxth	r5, r5
 21079              	.LVL154:
 21080              	.L92:
 555:../fatfs/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 21081              		.loc 1 555 0 discriminator 1
 21082 05ee B542     		cmp	r5, r6
 21083 05f0 EED2     		bcs	.L93
 562:../fatfs/ff.c **** 		dj->clust = clst;
 21084              		.loc 1 562 0
 21085 05f2 E160     		str	r1, [r4, #12]
 563:../fatfs/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 21086              		.loc 1 563 0
 21087 05f4 2068     		ldr	r0, [r4, #0]
 21088 05f6 FFF71EFD 		bl	clust2sect
 21089              	.LVL155:
 21090 05fa 00EB1510 		add	r0, r0, r5, lsr #4
 21091 05fe 2061     		str	r0, [r4, #16]
 21092              	.LVL156:
 21093              	.L91:
 566:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 21094              		.loc 1 566 0
 21095 0600 2368     		ldr	r3, [r4, #0]
 21096 0602 05F00F05 		and	r5, r5, #15
 21097              	.LVL157:
 21098 0606 3033     		adds	r3, r3, #48
 21099 0608 6D01     		lsls	r5, r5, #5
 21100 060a 5D19     		adds	r5, r3, r5
 21101 060c 6561     		str	r5, [r4, #20]
 568:../fatfs/ff.c **** 	return FR_OK;	/* Seek succeeded */
 21102              		.loc 1 568 0
 21103 060e 0020     		movs	r0, #0
 21104 0610 70BD     		pop	{r4, r5, r6, pc}
 21105              	.LVL158:
 21106              	.L97:
 557:../fatfs/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 21107              		.loc 1 557 0
 21108 0612 0120     		movs	r0, #1
 21109              	.LVL159:
 21110 0614 70BD     		pop	{r4, r5, r6, pc}
 21111              	.LVL160:
 21112              	.L98:
 559:../fatfs/ff.c **** 				return FR_INT_ERR;
 21113              		.loc 1 559 0
 21114 0616 0220     		movs	r0, #2
 21115 0618 70BD     		pop	{r4, r5, r6, pc}
 21116              	.LVL161:
 21117              	.L99:
 21118 061a 0220     		movs	r0, #2
 21119              	.LVL162:
 569:../fatfs/ff.c **** }
 21120              		.loc 1 569 0
 21121 061c 70BD     		pop	{r4, r5, r6, pc}
 21122              		.cfi_endproc
 21123              	.LFE40:
 21125              		.align	1
 21126              		.thumb
 21127              		.thumb_func
 21129              	put_fat:
 21130              	.LFB36:
 356:../fatfs/ff.c **** {
 21131              		.loc 1 356 0
 21132              		.cfi_startproc
 21133              		@ args = 0, pretend = 0, frame = 0
 21134              		@ frame_needed = 0, uses_anonymous_args = 0
 21135              	.LVL163:
 363:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 21136              		.loc 1 363 0
 21137 061e 0129     		cmp	r1, #1
 356:../fatfs/ff.c **** {
 21138              		.loc 1 356 0
 21139 0620 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 21140              	.LCFI8:
 21141              		.cfi_def_cfa_offset 24
 356:../fatfs/ff.c **** {
 21142              		.loc 1 356 0
 21143 0624 0446     		mov	r4, r0
 21144              		.cfi_offset 14, -4
 21145              		.cfi_offset 8, -8
 21146              		.cfi_offset 7, -12
 21147              		.cfi_offset 6, -16
 21148              		.cfi_offset 5, -20
 21149              		.cfi_offset 4, -24
 21150 0626 0D46     		mov	r5, r1
 21151 0628 1646     		mov	r6, r2
 363:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 21152              		.loc 1 363 0
 21153 062a 6DD9     		bls	.L110
 363:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Range check */
 21154              		.loc 1 363 0 is_stmt 0 discriminator 1
 21155 062c C369     		ldr	r3, [r0, #28]
 21156 062e 9942     		cmp	r1, r3
 21157 0630 6DD2     		bcs	.L111
 368:../fatfs/ff.c **** 		switch (fs->fs_type) {
 21158              		.loc 1 368 0 is_stmt 1
 21159 0632 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 367:../fatfs/ff.c **** 		fsect = fs->fatbase;
 21160              		.loc 1 367 0
 21161 0634 076A     		ldr	r7, [r0, #32]
 21162              	.LVL164:
 368:../fatfs/ff.c **** 		switch (fs->fs_type) {
 21163              		.loc 1 368 0
 21164 0636 022B     		cmp	r3, #2
 21165 0638 3FD0     		beq	.L104
 21166 063a 032B     		cmp	r3, #3
 21167 063c 4BD0     		beq	.L105
 21168 063e 012B     		cmp	r3, #1
 21169 0640 5DD1     		bne	.L113
 21170              	.LVL165:
 370:../fatfs/ff.c **** 			bc = clst; bc += bc / 2;
 21171              		.loc 1 370 0
 21172 0642 01EB5108 		add	r8, r1, r1, lsr #1
 21173              	.LVL166:
 371:../fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 21174              		.loc 1 371 0
 21175 0646 07EB5821 		add	r1, r7, r8, lsr #9
 21176              	.LVL167:
 21177 064a FFF7F9FE 		bl	move_window
 21178              	.LVL168:
 372:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21179              		.loc 1 372 0
 21180 064e 0028     		cmp	r0, #0
 21181 0650 56D1     		bne	.L102
 373:../fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 21182              		.loc 1 373 0
 21183 0652 4FEAC853 		lsl	r3, r8, #23
 21184 0656 DB0D     		lsrs	r3, r3, #23
 21185              	.LVL169:
 374:../fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 21186              		.loc 1 374 0
 21187 0658 15F00105 		ands	r5, r5, #1
 21188              	.LVL170:
 21189 065c F2B2     		uxtb	r2, r6
 21190 065e 07D0     		beq	.L107
 374:../fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 21191              		.loc 1 374 0 is_stmt 0 discriminator 1
 21192 0660 E118     		adds	r1, r4, r3
 21193 0662 91F83010 		ldrb	r1, [r1, #48]	@ zero_extendqisi2
 21194 0666 01F00F01 		and	r1, r1, #15
 21195 066a 41EA0212 		orr	r2, r1, r2, lsl #4
 21196 066e D2B2     		uxtb	r2, r2
 21197              	.L107:
 374:../fatfs/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 21198              		.loc 1 374 0 discriminator 3
 21199 0670 E318     		adds	r3, r4, r3
 21200              	.LVL171:
 21201 0672 83F83020 		strb	r2, [r3, #48]
 375:../fatfs/ff.c **** 			bc++;
 21202              		.loc 1 375 0 is_stmt 1 discriminator 3
 21203 0676 08F10108 		add	r8, r8, #1
 21204              	.LVL172:
 376:../fatfs/ff.c **** 			fs->wflag = 1;
 21205              		.loc 1 376 0 discriminator 3
 21206 067a 0123     		movs	r3, #1
 21207 067c 2371     		strb	r3, [r4, #4]
 377:../fatfs/ff.c **** 			res = move_window(fs, fsect + (bc / SS(fs)));
 21208              		.loc 1 377 0 discriminator 3
 21209 067e 2046     		mov	r0, r4
 21210              	.LVL173:
 21211 0680 07EB5821 		add	r1, r7, r8, lsr #9
 21212 0684 FFF7DCFE 		bl	move_window
 21213              	.LVL174:
 378:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21214              		.loc 1 378 0 discriminator 3
 21215 0688 D0BB     		cbnz	r0, .L102
 379:../fatfs/ff.c **** 			p = &fs->win[bc & (SS(fs) - 1)];
 21216              		.loc 1 379 0
 21217 068a 4FEAC858 		lsl	r8, r8, #23
 21218              	.LVL175:
 21219 068e 4FEAD858 		lsr	r8, r8, #23
 21220              	.LVL176:
 380:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 21221              		.loc 1 380 0
 21222 0692 15B1     		cbz	r5, .L108
 380:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 21223              		.loc 1 380 0 is_stmt 0 discriminator 1
 21224 0694 3609     		lsrs	r6, r6, #4
 21225              	.LVL177:
 21226 0696 F6B2     		uxtb	r6, r6
 21227 0698 0AE0     		b	.L109
 21228              	.LVL178:
 21229              	.L108:
 380:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 21230              		.loc 1 380 0 discriminator 2
 21231 069a 04EB0803 		add	r3, r4, r8
 21232 069e 93F83030 		ldrb	r3, [r3, #48]	@ zero_extendqisi2
 21233 06a2 360A     		lsrs	r6, r6, #8
 21234              	.LVL179:
 21235 06a4 23F00F03 		bic	r3, r3, #15
 21236 06a8 06F00F06 		and	r6, r6, #15
 21237 06ac 43EA0606 		orr	r6, r3, r6
 21238              	.L109:
 380:../fatfs/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 21239              		.loc 1 380 0 discriminator 3
 21240 06b0 04EB0803 		add	r3, r4, r8
 21241 06b4 83F83060 		strb	r6, [r3, #48]
 381:../fatfs/ff.c **** 			break;
 21242              		.loc 1 381 0 is_stmt 1 discriminator 3
 21243 06b8 22E0     		b	.L102
 21244              	.LVL180:
 21245              	.L104:
 384:../fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 2)));
 21246              		.loc 1 384 0
 21247 06ba 07EB1121 		add	r1, r7, r1, lsr #8
 21248              	.LVL181:
 21249 06be FFF7BFFE 		bl	move_window
 21250              	.LVL182:
 385:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21251              		.loc 1 385 0
 21252 06c2 E8B9     		cbnz	r0, .L102
 386:../fatfs/ff.c **** 			ST_WORD(&fs->win[((WORD)clst * 2) & (SS(fs) - 1)], (WORD)val);
 21253              		.loc 1 386 0
 21254 06c4 2D06     		lsls	r5, r5, #24
 21255              	.LVL183:
 21256 06c6 04EBD555 		add	r5, r4, r5, lsr #23
 21257 06ca 85F83060 		strb	r6, [r5, #48]
 21258 06ce 360A     		lsrs	r6, r6, #8
 21259              	.LVL184:
 21260 06d0 85F83160 		strb	r6, [r5, #49]
 387:../fatfs/ff.c **** 			break;
 21261              		.loc 1 387 0
 21262 06d4 14E0     		b	.L102
 21263              	.LVL185:
 21264              	.L105:
 390:../fatfs/ff.c **** 			res = move_window(fs, fsect + (clst / (SS(fs) / 4)));
 21265              		.loc 1 390 0
 21266 06d6 07EBD111 		add	r1, r7, r1, lsr #7
 21267              	.LVL186:
 21268 06da FFF7B1FE 		bl	move_window
 21269              	.LVL187:
 391:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21270              		.loc 1 391 0
 21271 06de 78B9     		cbnz	r0, .L102
 392:../fatfs/ff.c **** 			ST_DWORD(&fs->win[((WORD)clst * 4) & (SS(fs) - 1)], val);
 21272              		.loc 1 392 0
 21273 06e0 6D06     		lsls	r5, r5, #25
 21274              	.LVL188:
 21275 06e2 04EBD555 		add	r5, r4, r5, lsr #23
 21276 06e6 330A     		lsrs	r3, r6, #8
 21277 06e8 85F83060 		strb	r6, [r5, #48]
 21278 06ec 85F83130 		strb	r3, [r5, #49]
 21279 06f0 330C     		lsrs	r3, r6, #16
 21280 06f2 360E     		lsrs	r6, r6, #24
 21281              	.LVL189:
 21282 06f4 85F83230 		strb	r3, [r5, #50]
 21283 06f8 85F83360 		strb	r6, [r5, #51]
 393:../fatfs/ff.c **** 			break;
 21284              		.loc 1 393 0
 21285 06fc 00E0     		b	.L102
 21286              	.LVL190:
 21287              	.L113:
 396:../fatfs/ff.c **** 			res = FR_INT_ERR;
 21288              		.loc 1 396 0
 21289 06fe 0220     		movs	r0, #2
 21290              	.LVL191:
 21291              	.L102:
 398:../fatfs/ff.c **** 		fs->wflag = 1;
 21292              		.loc 1 398 0
 21293 0700 0123     		movs	r3, #1
 21294 0702 2371     		strb	r3, [r4, #4]
 21295 0704 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21296              	.LVL192:
 21297              	.L110:
 364:../fatfs/ff.c **** 		res = FR_INT_ERR;
 21298              		.loc 1 364 0
 21299 0708 0220     		movs	r0, #2
 21300 070a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21301              	.L111:
 21302 070e 0220     		movs	r0, #2
 21303              	.LVL193:
 402:../fatfs/ff.c **** }
 21304              		.loc 1 402 0
 21305 0710 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21306              		.cfi_endproc
 21307              	.LFE36:
 21309              		.align	1
 21310              		.thumb
 21311              		.thumb_func
 21313              	create_chain:
 21314              	.LFB38:
 458:../fatfs/ff.c **** {
 21315              		.loc 1 458 0
 21316              		.cfi_startproc
 21317              		@ args = 0, pretend = 0, frame = 0
 21318              		@ frame_needed = 0, uses_anonymous_args = 0
 21319              	.LVL194:
 21320 0714 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 21321              	.LCFI9:
 21322              		.cfi_def_cfa_offset 24
 458:../fatfs/ff.c **** {
 21323              		.loc 1 458 0
 21324 0718 0546     		mov	r5, r0
 21325              		.cfi_offset 14, -4
 21326              		.cfi_offset 8, -8
 21327              		.cfi_offset 7, -12
 21328              		.cfi_offset 6, -16
 21329              		.cfi_offset 5, -20
 21330              		.cfi_offset 4, -24
 462:../fatfs/ff.c **** 	mcl = fs->max_clust;
 21331              		.loc 1 462 0
 21332 071a D0F81C80 		ldr	r8, [r0, #28]
 21333              	.LVL195:
 463:../fatfs/ff.c **** 	if (clst == 0) {		/* Create new chain */
 21334              		.loc 1 463 0
 21335 071e 0E46     		mov	r6, r1
 21336 0720 29B9     		cbnz	r1, .L115
 21337              	.LVL196:
 464:../fatfs/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 21338              		.loc 1 464 0
 21339 0722 C768     		ldr	r7, [r0, #12]
 21340              	.LVL197:
 465:../fatfs/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 21341              		.loc 1 465 0
 21342 0724 5FB1     		cbz	r7, .L122
 465:../fatfs/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 21343              		.loc 1 465 0 is_stmt 0 discriminator 2
 21344 0726 4745     		cmp	r7, r8
 21345 0728 28BF     		it	cs
 21346 072a 0127     		movcs	r7, #1
 21347 072c 08E0     		b	.L116
 21348              	.LVL198:
 21349              	.L115:
 468:../fatfs/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 21350              		.loc 1 468 0 is_stmt 1
 21351 072e FFF7C5FE 		bl	get_fat
 21352              	.LVL199:
 469:../fatfs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 21353              		.loc 1 469 0
 21354 0732 0128     		cmp	r0, #1
 21355 0734 32D9     		bls	.L124
 470:../fatfs/ff.c **** 		if (cs < mcl) return cs;		/* It is already followed by next cluster */
 21356              		.loc 1 470 0
 21357 0736 4045     		cmp	r0, r8
 21358 0738 3BD3     		bcc	.L117
 21359 073a 3746     		mov	r7, r6
 21360 073c 00E0     		b	.L116
 21361              	.LVL200:
 21362              	.L122:
 465:../fatfs/ff.c **** 		if (scl == 0 || scl >= mcl) scl = 1;
 21363              		.loc 1 465 0
 21364 073e 0127     		movs	r7, #1
 21365              	.LVL201:
 21366              	.L116:
 21367 0740 3C46     		mov	r4, r7
 21368              	.LVL202:
 21369              	.L120:
 476:../fatfs/ff.c **** 		ncl++;							/* Next cluster */
 21370              		.loc 1 476 0
 21371 0742 0134     		adds	r4, r4, #1
 21372              	.LVL203:
 477:../fatfs/ff.c **** 		if (ncl >= mcl) {				/* Wrap around */
 21373              		.loc 1 477 0
 21374 0744 4445     		cmp	r4, r8
 21375 0746 02D3     		bcc	.L118
 21376              	.LVL204:
 479:../fatfs/ff.c **** 			if (ncl > scl) return 0;	/* No free custer */
 21377              		.loc 1 479 0
 21378 0748 012F     		cmp	r7, #1
 21379 074a 2AD9     		bls	.L126
 478:../fatfs/ff.c **** 			ncl = 2;
 21380              		.loc 1 478 0
 21381 074c 0224     		movs	r4, #2
 21382              	.LVL205:
 21383              	.L118:
 481:../fatfs/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 21384              		.loc 1 481 0
 21385 074e 2846     		mov	r0, r5
 21386 0750 2146     		mov	r1, r4
 21387 0752 FFF7B3FE 		bl	get_fat
 21388              	.LVL206:
 482:../fatfs/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 21389              		.loc 1 482 0
 21390 0756 38B1     		cbz	r0, .L119
 483:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 21391              		.loc 1 483 0
 21392 0758 B0F1FF3F 		cmp	r0, #-1
 21393 075c 29D0     		beq	.L117
 483:../fatfs/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occured */
 21394              		.loc 1 483 0 is_stmt 0 discriminator 1
 21395 075e 0128     		cmp	r0, #1
 21396 0760 27D0     		beq	.L117
 485:../fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free custer */
 21397              		.loc 1 485 0 is_stmt 1
 21398 0762 BC42     		cmp	r4, r7
 21399 0764 EDD1     		bne	.L120
 21400 0766 1CE0     		b	.L126
 21401              	.L119:
 488:../fatfs/ff.c **** 	if (put_fat(fs, ncl, 0x0FFFFFFF))	/* Mark the new cluster "in use" */
 21402              		.loc 1 488 0
 21403 0768 2846     		mov	r0, r5
 21404              	.LVL207:
 21405 076a 2146     		mov	r1, r4
 21406 076c 6FF07042 		mvn	r2, #-268435456
 21407 0770 FFF755FF 		bl	put_fat
 21408 0774 C0B9     		cbnz	r0, .L128
 490:../fatfs/ff.c **** 	if (clst != 0) {					/* Link it to the previous one if needed */
 21409              		.loc 1 490 0
 21410 0776 2EB1     		cbz	r6, .L121
 491:../fatfs/ff.c **** 		if (put_fat(fs, clst, ncl))
 21411              		.loc 1 491 0
 21412 0778 2846     		mov	r0, r5
 21413 077a 3146     		mov	r1, r6
 21414 077c 2246     		mov	r2, r4
 21415 077e FFF74EFF 		bl	put_fat
 21416 0782 88B9     		cbnz	r0, .L128
 21417              	.L121:
 496:../fatfs/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 21418              		.loc 1 496 0
 21419 0784 2B69     		ldr	r3, [r5, #16]
 495:../fatfs/ff.c **** 	fs->last_clust = ncl;				/* Update FSINFO */
 21420              		.loc 1 495 0
 21421 0786 EC60     		str	r4, [r5, #12]
 496:../fatfs/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 21422              		.loc 1 496 0
 21423 0788 B3F1FF3F 		cmp	r3, #-1
 21424 078c 10D0     		beq	.L129
 497:../fatfs/ff.c **** 		fs->free_clust--;
 21425              		.loc 1 497 0
 21426 078e 013B     		subs	r3, r3, #1
 21427 0790 2B61     		str	r3, [r5, #16]
 498:../fatfs/ff.c **** 		fs->fsi_flag = 1;
 21428              		.loc 1 498 0
 21429 0792 0123     		movs	r3, #1
 21430 0794 AB72     		strb	r3, [r5, #10]
 21431 0796 2046     		mov	r0, r4
 21432 0798 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21433              	.LVL208:
 21434              	.L124:
 469:../fatfs/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 21435              		.loc 1 469 0
 21436 079c 0120     		movs	r0, #1
 21437              	.LVL209:
 21438 079e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21439              	.LVL210:
 21440              	.L126:
 485:../fatfs/ff.c **** 		if (ncl == scl) return 0;		/* No free custer */
 21441              		.loc 1 485 0
 21442 07a2 0020     		movs	r0, #0
 21443 07a4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21444              	.LVL211:
 21445              	.L128:
 492:../fatfs/ff.c **** 			return 0xFFFFFFFF;
 21446              		.loc 1 492 0
 21447 07a8 4FF0FF30 		mov	r0, #-1
 21448 07ac BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21449              	.L129:
 496:../fatfs/ff.c **** 	if (fs->free_clust != 0xFFFFFFFF) {
 21450              		.loc 1 496 0
 21451 07b0 2046     		mov	r0, r4
 21452              	.LVL212:
 21453              	.L117:
 502:../fatfs/ff.c **** }
 21454              		.loc 1 502 0
 21455 07b2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21456              		.cfi_endproc
 21457              	.LFE38:
 21459              		.align	1
 21460              		.thumb
 21461              		.thumb_func
 21463              	remove_chain:
 21464              	.LFB37:
 417:../fatfs/ff.c **** {
 21465              		.loc 1 417 0
 21466              		.cfi_startproc
 21467              		@ args = 0, pretend = 0, frame = 0
 21468              		@ frame_needed = 0, uses_anonymous_args = 0
 21469              	.LVL213:
 422:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 21470              		.loc 1 422 0
 21471 07b6 0129     		cmp	r1, #1
 417:../fatfs/ff.c **** {
 21472              		.loc 1 417 0
 21473 07b8 70B5     		push	{r4, r5, r6, lr}
 21474              	.LCFI10:
 21475              		.cfi_def_cfa_offset 16
 417:../fatfs/ff.c **** {
 21476              		.loc 1 417 0
 21477 07ba 0446     		mov	r4, r0
 21478              		.cfi_offset 14, -4
 21479              		.cfi_offset 6, -8
 21480              		.cfi_offset 5, -12
 21481              		.cfi_offset 4, -16
 21482 07bc 0E46     		mov	r6, r1
 422:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 21483              		.loc 1 422 0
 21484 07be 23D9     		bls	.L138
 422:../fatfs/ff.c **** 	if (clst < 2 || clst >= fs->max_clust) {	/* Check the range of cluster# */
 21485              		.loc 1 422 0 is_stmt 0 discriminator 1
 21486 07c0 C369     		ldr	r3, [r0, #28]
 21487 07c2 9942     		cmp	r1, r3
 21488 07c4 1AD3     		bcc	.L132
 21489 07c6 1FE0     		b	.L138
 21490              	.LVL214:
 21491              	.L134:
 428:../fatfs/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 21492              		.loc 1 428 0 is_stmt 1
 21493 07c8 2046     		mov	r0, r4
 21494 07ca 3146     		mov	r1, r6
 21495 07cc FFF776FE 		bl	get_fat
 21496              	.LVL215:
 429:../fatfs/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 21497              		.loc 1 429 0
 21498 07d0 0546     		mov	r5, r0
 21499 07d2 C0B1     		cbz	r0, .L137
 430:../fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 21500              		.loc 1 430 0
 21501 07d4 0128     		cmp	r0, #1
 21502 07d6 17D0     		beq	.L138
 431:../fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 21503              		.loc 1 431 0
 21504 07d8 B0F1FF3F 		cmp	r0, #-1
 21505 07dc 16D0     		beq	.L139
 432:../fatfs/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 21506              		.loc 1 432 0
 21507 07de 2046     		mov	r0, r4
 21508              	.LVL216:
 21509 07e0 3146     		mov	r1, r6
 21510 07e2 0022     		movs	r2, #0
 21511 07e4 FFF71BFF 		bl	put_fat
 21512              	.LVL217:
 433:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21513              		.loc 1 433 0
 21514 07e8 88B9     		cbnz	r0, .L131
 434:../fatfs/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 21515              		.loc 1 434 0
 21516 07ea 2369     		ldr	r3, [r4, #16]
 21517 07ec B3F1FF3F 		cmp	r3, #-1
 21518 07f0 03D0     		beq	.L133
 435:../fatfs/ff.c **** 				fs->free_clust++;
 21519              		.loc 1 435 0
 21520 07f2 0133     		adds	r3, r3, #1
 21521 07f4 2361     		str	r3, [r4, #16]
 436:../fatfs/ff.c **** 				fs->fsi_flag = 1;
 21522              		.loc 1 436 0
 21523 07f6 0123     		movs	r3, #1
 21524 07f8 A372     		strb	r3, [r4, #10]
 21525              	.L133:
 436:../fatfs/ff.c **** 				fs->fsi_flag = 1;
 21526              		.loc 1 436 0 is_stmt 0 discriminator 1
 21527 07fa 2E46     		mov	r6, r5
 21528              	.LVL218:
 21529              	.L132:
 427:../fatfs/ff.c **** 		while (clst < fs->max_clust) {			/* Not a last link? */
 21530              		.loc 1 427 0 is_stmt 1 discriminator 1
 21531 07fc E369     		ldr	r3, [r4, #28]
 21532 07fe 9E42     		cmp	r6, r3
 21533 0800 E2D3     		bcc	.L134
 427:../fatfs/ff.c **** 		while (clst < fs->max_clust) {			/* Not a last link? */
 21534              		.loc 1 427 0 is_stmt 0
 21535 0802 0020     		movs	r0, #0
 21536 0804 70BD     		pop	{r4, r5, r6, pc}
 21537              	.LVL219:
 21538              	.L137:
 21539 0806 70BD     		pop	{r4, r5, r6, pc}
 21540              	.LVL220:
 21541              	.L138:
 430:../fatfs/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 21542              		.loc 1 430 0 is_stmt 1
 21543 0808 0220     		movs	r0, #2
 21544 080a 70BD     		pop	{r4, r5, r6, pc}
 21545              	.LVL221:
 21546              	.L139:
 431:../fatfs/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 21547              		.loc 1 431 0
 21548 080c 0120     		movs	r0, #1
 21549              	.LVL222:
 21550              	.L131:
 443:../fatfs/ff.c **** }
 21551              		.loc 1 443 0
 21552 080e 70BD     		pop	{r4, r5, r6, pc}
 21553              		.cfi_endproc
 21554              	.LFE37:
 21556              		.align	1
 21557              		.thumb
 21558              		.thumb_func
 21560              	dir_next:
 21561              	.LFB41:
 583:../fatfs/ff.c **** {
 21562              		.loc 1 583 0
 21563              		.cfi_startproc
 21564              		@ args = 0, pretend = 0, frame = 0
 21565              		@ frame_needed = 0, uses_anonymous_args = 0
 21566              	.LVL223:
 21567 0810 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 21568              	.LCFI11:
 21569              		.cfi_def_cfa_offset 24
 588:../fatfs/ff.c **** 	i = dj->index + 1;
 21570              		.loc 1 588 0
 21571 0814 C688     		ldrh	r6, [r0, #6]
 21572              		.cfi_offset 14, -4
 21573              		.cfi_offset 8, -8
 21574              		.cfi_offset 7, -12
 21575              		.cfi_offset 6, -16
 21576              		.cfi_offset 5, -20
 21577              		.cfi_offset 4, -24
 583:../fatfs/ff.c **** {
 21578              		.loc 1 583 0
 21579 0816 0446     		mov	r4, r0
 588:../fatfs/ff.c **** 	i = dj->index + 1;
 21580              		.loc 1 588 0
 21581 0818 0136     		adds	r6, r6, #1
 21582 081a B6B2     		uxth	r6, r6
 21583              	.LVL224:
 583:../fatfs/ff.c **** {
 21584              		.loc 1 583 0
 21585 081c 0F46     		mov	r7, r1
 589:../fatfs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 21586              		.loc 1 589 0
 21587 081e 002E     		cmp	r6, #0
 21588 0820 6BD0     		beq	.L152
 589:../fatfs/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 21589              		.loc 1 589 0 is_stmt 0 discriminator 1
 21590 0822 0369     		ldr	r3, [r0, #16]
 21591 0824 002B     		cmp	r3, #0
 21592 0826 68D0     		beq	.L152
 592:../fatfs/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 21593              		.loc 1 592 0 is_stmt 1
 21594 0828 16F00F0F 		tst	r6, #15
 21595 082c 5AD1     		bne	.L142
 595:../fatfs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 21596              		.loc 1 595 0
 21597 082e C168     		ldr	r1, [r0, #12]
 21598              	.LVL225:
 593:../fatfs/ff.c **** 		dj->sect++;					/* Next sector */
 21599              		.loc 1 593 0
 21600 0830 0133     		adds	r3, r3, #1
 21601 0832 0361     		str	r3, [r0, #16]
 21602 0834 0068     		ldr	r0, [r0, #0]
 21603              	.LVL226:
 595:../fatfs/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 21604              		.loc 1 595 0
 21605 0836 19B9     		cbnz	r1, .L143
 596:../fatfs/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 21606              		.loc 1 596 0
 21607 0838 0389     		ldrh	r3, [r0, #8]
 21608 083a B342     		cmp	r3, r6
 21609 083c 52D8     		bhi	.L142
 21610 083e 5CE0     		b	.L152
 21611              	.L143:
 600:../fatfs/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 21612              		.loc 1 600 0
 21613 0840 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 21614 0842 013B     		subs	r3, r3, #1
 21615 0844 13EA1613 		ands	r3, r3, r6, lsr #4
 21616 0848 4CD1     		bne	.L142
 601:../fatfs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 21617              		.loc 1 601 0
 21618 084a FFF737FE 		bl	get_fat
 602:../fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 21619              		.loc 1 602 0
 21620 084e 0128     		cmp	r0, #1
 601:../fatfs/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 21621              		.loc 1 601 0
 21622 0850 0546     		mov	r5, r0
 21623              	.LVL227:
 602:../fatfs/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 21624              		.loc 1 602 0
 21625 0852 58D9     		bls	.L154
 603:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 21626              		.loc 1 603 0
 21627 0854 B0F1FF3F 		cmp	r0, #-1
 21628 0858 58D0     		beq	.L156
 604:../fatfs/ff.c **** 				if (clst >= dj->fs->max_clust) {				/* When it reached end of dynamic table */
 21629              		.loc 1 604 0
 21630 085a 2068     		ldr	r0, [r4, #0]
 21631              	.LVL228:
 21632 085c C369     		ldr	r3, [r0, #28]
 21633 085e 9D42     		cmp	r5, r3
 21634 0860 3AD3     		bcc	.L144
 21635              	.LBB3:
 607:../fatfs/ff.c **** 					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 21636              		.loc 1 607 0
 21637 0862 002F     		cmp	r7, #0
 21638 0864 49D0     		beq	.L152
 608:../fatfs/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Streach cluster chain */
 21639              		.loc 1 608 0
 21640 0866 E168     		ldr	r1, [r4, #12]
 21641 0868 FFF754FF 		bl	create_chain
 21642              	.LVL229:
 609:../fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 21643              		.loc 1 609 0
 21644 086c 0546     		mov	r5, r0
 21645 086e 0028     		cmp	r0, #0
 21646 0870 46D0     		beq	.L153
 610:../fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 21647              		.loc 1 610 0
 21648 0872 0128     		cmp	r0, #1
 21649 0874 47D0     		beq	.L154
 611:../fatfs/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 21650              		.loc 1 611 0
 21651 0876 B0F1FF3F 		cmp	r0, #-1
 21652 087a 47D0     		beq	.L156
 613:../fatfs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 21653              		.loc 1 613 0
 21654 087c 2068     		ldr	r0, [r4, #0]
 21655              	.LVL230:
 21656 087e 0021     		movs	r1, #0
 21657 0880 FFF7DEFD 		bl	move_window
 21658 0884 0746     		mov	r7, r0
 21659 0886 0028     		cmp	r0, #0
 21660 0888 40D1     		bne	.L156
 614:../fatfs/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 21661              		.loc 1 614 0
 21662 088a 2068     		ldr	r0, [r4, #0]
 21663 088c 3946     		mov	r1, r7
 21664 088e 3030     		adds	r0, r0, #48
 21665 0890 4FF40072 		mov	r2, #512
 21666 0894 FFF7BCFB 		bl	mem_set
 615:../fatfs/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 21667              		.loc 1 615 0
 21668 0898 D4F80080 		ldr	r8, [r4, #0]
 21669 089c 2946     		mov	r1, r5
 21670 089e 4046     		mov	r0, r8
 21671 08a0 FFF7C9FB 		bl	clust2sect
 21672 08a4 C8F82C00 		str	r0, [r8, #44]
 21673              	.LVL231:
 616:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 21674              		.loc 1 616 0
 21675 08a8 0FE0     		b	.L145
 21676              	.LVL232:
 21677              	.L146:
 617:../fatfs/ff.c **** 						dj->fs->wflag = 1;
 21678              		.loc 1 617 0
 21679 08aa 4FF00108 		mov	r8, #1
 21680 08ae 83F80480 		strb	r8, [r3, #4]
 618:../fatfs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 21681              		.loc 1 618 0
 21682 08b2 2068     		ldr	r0, [r4, #0]
 21683 08b4 0021     		movs	r1, #0
 21684 08b6 FFF7C3FD 		bl	move_window
 21685 08ba 0028     		cmp	r0, #0
 21686 08bc 29D1     		bne	.L157
 619:../fatfs/ff.c **** 						dj->fs->winsect++;
 21687              		.loc 1 619 0
 21688 08be 2368     		ldr	r3, [r4, #0]
 616:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 21689              		.loc 1 616 0
 21690 08c0 4744     		add	r7, r7, r8
 21691              	.LVL233:
 619:../fatfs/ff.c **** 						dj->fs->winsect++;
 21692              		.loc 1 619 0
 21693 08c2 DA6A     		ldr	r2, [r3, #44]
 616:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 21694              		.loc 1 616 0
 21695 08c4 FFB2     		uxtb	r7, r7
 21696              	.LVL234:
 619:../fatfs/ff.c **** 						dj->fs->winsect++;
 21697              		.loc 1 619 0
 21698 08c6 4244     		add	r2, r2, r8
 21699 08c8 DA62     		str	r2, [r3, #44]
 21700              	.LVL235:
 21701              	.L145:
 616:../fatfs/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 21702              		.loc 1 616 0 discriminator 1
 21703 08ca 2368     		ldr	r3, [r4, #0]
 21704 08cc 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 21705 08ce BA42     		cmp	r2, r7
 21706 08d0 EBD8     		bhi	.L146
 621:../fatfs/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 21707              		.loc 1 621 0
 21708 08d2 DA6A     		ldr	r2, [r3, #44]
 21709 08d4 D71B     		subs	r7, r2, r7
 21710              	.LVL236:
 21711 08d6 DF62     		str	r7, [r3, #44]
 21712              	.L144:
 21713              	.LBE3:
 626:../fatfs/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 21714              		.loc 1 626 0
 21715 08d8 E560     		str	r5, [r4, #12]
 627:../fatfs/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 21716              		.loc 1 627 0
 21717 08da 2068     		ldr	r0, [r4, #0]
 21718 08dc 2946     		mov	r1, r5
 21719 08de FFF7AAFB 		bl	clust2sect
 21720 08e2 2061     		str	r0, [r4, #16]
 21721              	.LVL237:
 21722              	.L142:
 633:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 21723              		.loc 1 633 0
 21724 08e4 2368     		ldr	r3, [r4, #0]
 632:../fatfs/ff.c **** 	dj->index = i;
 21725              		.loc 1 632 0
 21726 08e6 E680     		strh	r6, [r4, #6]	@ movhi
 633:../fatfs/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 21727              		.loc 1 633 0
 21728 08e8 06F00F06 		and	r6, r6, #15
 21729              	.LVL238:
 21730 08ec 3033     		adds	r3, r3, #48
 21731 08ee 7601     		lsls	r6, r6, #5
 21732 08f0 9E19     		adds	r6, r3, r6
 21733 08f2 6661     		str	r6, [r4, #20]
 635:../fatfs/ff.c **** 	return FR_OK;
 21734              		.loc 1 635 0
 21735 08f4 0020     		movs	r0, #0
 21736 08f6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21737              	.LVL239:
 21738              	.L152:
 21739              	.LBB4:
 607:../fatfs/ff.c **** 					if (!streach) return FR_NO_FILE;			/* When do not streach, report EOT */
 21740              		.loc 1 607 0
 21741 08fa 0420     		movs	r0, #4
 21742 08fc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21743              	.LVL240:
 21744              	.L153:
 609:../fatfs/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 21745              		.loc 1 609 0
 21746 0900 0720     		movs	r0, #7
 21747              	.LVL241:
 21748 0902 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21749              	.LVL242:
 21750              	.L154:
 610:../fatfs/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 21751              		.loc 1 610 0
 21752 0906 0220     		movs	r0, #2
 21753              	.LVL243:
 21754 0908 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21755              	.L156:
 613:../fatfs/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 21756              		.loc 1 613 0
 21757 090c 0120     		movs	r0, #1
 21758 090e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21759              	.LVL244:
 21760              	.L157:
 618:../fatfs/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 21761              		.loc 1 618 0
 21762 0912 4046     		mov	r0, r8
 21763              	.LBE4:
 636:../fatfs/ff.c **** }
 21764              		.loc 1 636 0
 21765 0914 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21766              		.cfi_endproc
 21767              	.LFE41:
 21769              		.align	1
 21770              		.thumb
 21771              		.thumb_func
 21773              	dir_register:
 21774              	.LFB44:
 931:../fatfs/ff.c **** {
 21775              		.loc 1 931 0
 21776              		.cfi_startproc
 21777              		@ args = 0, pretend = 0, frame = 0
 21778              		@ frame_needed = 0, uses_anonymous_args = 0
 21779              	.LVL245:
 21780 0918 70B5     		push	{r4, r5, r6, lr}
 21781              	.LCFI12:
 21782              		.cfi_def_cfa_offset 16
 997:../fatfs/ff.c **** 	res = dir_seek(dj, 0);
 21783              		.loc 1 997 0
 21784 091a 0021     		movs	r1, #0
 931:../fatfs/ff.c **** {
 21785              		.loc 1 931 0
 21786 091c 0446     		mov	r4, r0
 21787              		.cfi_offset 14, -4
 21788              		.cfi_offset 6, -8
 21789              		.cfi_offset 5, -12
 21790              		.cfi_offset 4, -16
 997:../fatfs/ff.c **** 	res = dir_seek(dj, 0);
 21791              		.loc 1 997 0
 21792 091e FFF739FE 		bl	dir_seek
 21793              	.LVL246:
 21794              	.L164:
 998:../fatfs/ff.c **** 	if (res == FR_OK) {
 21795              		.loc 1 998 0
 21796 0922 0546     		mov	r5, r0
 21797 0924 10BB     		cbnz	r0, .L162
1000:../fatfs/ff.c **** 			res = move_window(dj->fs, dj->sect);
 21798              		.loc 1 1000 0
 21799 0926 2068     		ldr	r0, [r4, #0]
 21800              	.LVL247:
 21801 0928 2169     		ldr	r1, [r4, #16]
 21802 092a FFF789FD 		bl	move_window
 21803              	.LVL248:
1001:../fatfs/ff.c **** 			if (res != FR_OK) break;
 21804              		.loc 1 1001 0
 21805 092e 0546     		mov	r5, r0
 21806 0930 E0B9     		cbnz	r0, .L162
1002:../fatfs/ff.c **** 			c = *dj->dir;
 21807              		.loc 1 1002 0
 21808 0932 6369     		ldr	r3, [r4, #20]
 21809 0934 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 21810              	.LVL249:
1003:../fatfs/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 21811              		.loc 1 1003 0
 21812 0936 E52B     		cmp	r3, #229
 21813 0938 1AD0     		beq	.L160
1003:../fatfs/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 21814              		.loc 1 1003 0 is_stmt 0 discriminator 1
 21815 093a CBB1     		cbz	r3, .L160
1004:../fatfs/ff.c **** 			res = dir_next(dj, TRUE);		/* Next entry with table streach */
 21816              		.loc 1 1004 0 is_stmt 1
 21817 093c 2046     		mov	r0, r4
 21818              	.LVL250:
 21819 093e 0121     		movs	r1, #1
 21820 0940 FFF766FF 		bl	dir_next
 21821              	.LVL251:
 21822 0944 EDE7     		b	.L164
 21823              	.LVL252:
 21824              	.L165:
1012:../fatfs/ff.c **** 			dir = dj->dir;
 21825              		.loc 1 1012 0
 21826 0946 6669     		ldr	r6, [r4, #20]
 21827              	.LVL253:
1013:../fatfs/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
 21828              		.loc 1 1013 0
 21829 0948 2946     		mov	r1, r5
 21830 094a 3046     		mov	r0, r6
 21831              	.LVL254:
 21832 094c 2022     		movs	r2, #32
 21833 094e FFF75FFB 		bl	mem_set
 21834              	.LVL255:
1014:../fatfs/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 21835              		.loc 1 1014 0
 21836 0952 0B22     		movs	r2, #11
 21837 0954 3046     		mov	r0, r6
 21838 0956 A169     		ldr	r1, [r4, #24]
 21839 0958 FFF752FB 		bl	mem_cpy
1015:../fatfs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 21840              		.loc 1 1015 0
 21841 095c A369     		ldr	r3, [r4, #24]
1016:../fatfs/ff.c **** 			dj->fs->wflag = 1;
 21842              		.loc 1 1016 0
 21843 095e 0122     		movs	r2, #1
1015:../fatfs/ff.c **** 			dir[DIR_NTres] = *(dj->fn+11) & 0x18;	/* Put NT flag */
 21844              		.loc 1 1015 0
 21845 0960 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 21846 0962 03F01803 		and	r3, r3, #24
 21847 0966 3373     		strb	r3, [r6, #12]
1016:../fatfs/ff.c **** 			dj->fs->wflag = 1;
 21848              		.loc 1 1016 0
 21849 0968 2368     		ldr	r3, [r4, #0]
 21850 096a 1A71     		strb	r2, [r3, #4]
 21851              	.LVL256:
 21852              	.L162:
1021:../fatfs/ff.c **** }
 21853              		.loc 1 1021 0
 21854 096c 2846     		mov	r0, r5
 21855 096e 70BD     		pop	{r4, r5, r6, pc}
 21856              	.LVL257:
 21857              	.L160:
1010:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 21858              		.loc 1 1010 0
 21859 0970 2068     		ldr	r0, [r4, #0]
 21860 0972 2169     		ldr	r1, [r4, #16]
 21861 0974 FFF764FD 		bl	move_window
 21862              	.LVL258:
1011:../fatfs/ff.c **** 		if (res == FR_OK) {
 21863              		.loc 1 1011 0
 21864 0978 0546     		mov	r5, r0
 21865 097a 0028     		cmp	r0, #0
 21866 097c F6D1     		bne	.L162
 21867 097e E2E7     		b	.L165
 21868              		.cfi_endproc
 21869              	.LFE44:
 21871              		.align	1
 21872              		.thumb
 21873              		.thumb_func
 21875              	dir_remove:
 21876              	.LFB45:
1035:../fatfs/ff.c **** {
 21877              		.loc 1 1035 0
 21878              		.cfi_startproc
 21879              		@ args = 0, pretend = 0, frame = 0
 21880              		@ frame_needed = 0, uses_anonymous_args = 0
 21881              	.LVL259:
 21882 0980 10B5     		push	{r4, lr}
 21883              	.LCFI13:
 21884              		.cfi_def_cfa_offset 8
1055:../fatfs/ff.c **** 	res = dir_seek(dj, dj->index);
 21885              		.loc 1 1055 0
 21886 0982 C188     		ldrh	r1, [r0, #6]
1035:../fatfs/ff.c **** {
 21887              		.loc 1 1035 0
 21888 0984 0446     		mov	r4, r0
 21889              		.cfi_offset 14, -4
 21890              		.cfi_offset 4, -8
1055:../fatfs/ff.c **** 	res = dir_seek(dj, dj->index);
 21891              		.loc 1 1055 0
 21892 0986 FFF705FE 		bl	dir_seek
 21893              	.LVL260:
1056:../fatfs/ff.c **** 	if (res == FR_OK) {
 21894              		.loc 1 1056 0
 21895 098a 50B9     		cbnz	r0, .L167
1057:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 21896              		.loc 1 1057 0
 21897 098c 2068     		ldr	r0, [r4, #0]
 21898              	.LVL261:
 21899 098e 2169     		ldr	r1, [r4, #16]
 21900 0990 FFF756FD 		bl	move_window
 21901              	.LVL262:
1058:../fatfs/ff.c **** 		if (res == FR_OK) {
 21902              		.loc 1 1058 0
 21903 0994 28B9     		cbnz	r0, .L167
1059:../fatfs/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 21904              		.loc 1 1059 0
 21905 0996 6369     		ldr	r3, [r4, #20]
 21906 0998 E522     		movs	r2, #229
 21907 099a 1A70     		strb	r2, [r3, #0]
1060:../fatfs/ff.c **** 			dj->fs->wflag = 1;
 21908              		.loc 1 1060 0
 21909 099c 2368     		ldr	r3, [r4, #0]
 21910 099e E43A     		subs	r2, r2, #228
 21911 09a0 1A71     		strb	r2, [r3, #4]
 21912              	.L167:
1066:../fatfs/ff.c **** }
 21913              		.loc 1 1066 0
 21914 09a2 10BD     		pop	{r4, pc}
 21915              		.cfi_endproc
 21916              	.LFE45:
 21918              		.align	1
 21919              		.thumb
 21920              		.thumb_func
 21922              	dir_read:
 21923              	.LFB43:
 874:../fatfs/ff.c **** {
 21924              		.loc 1 874 0
 21925              		.cfi_startproc
 21926              		@ args = 0, pretend = 0, frame = 0
 21927              		@ frame_needed = 0, uses_anonymous_args = 0
 21928              	.LVL263:
 21929 09a4 10B5     		push	{r4, lr}
 21930              	.LCFI14:
 21931              		.cfi_def_cfa_offset 8
 881:../fatfs/ff.c **** 	res = FR_NO_FILE;
 21932              		.loc 1 881 0
 21933 09a6 0423     		movs	r3, #4
 874:../fatfs/ff.c **** {
 21934              		.loc 1 874 0
 21935 09a8 0446     		mov	r4, r0
 21936              		.cfi_offset 14, -4
 21937              		.cfi_offset 4, -8
 882:../fatfs/ff.c **** 	while (dj->sect) {
 21938              		.loc 1 882 0
 21939 09aa 14E0     		b	.L169
 21940              	.LVL264:
 21941              	.L173:
 883:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 21942              		.loc 1 883 0
 21943 09ac 2068     		ldr	r0, [r4, #0]
 21944 09ae FFF747FD 		bl	move_window
 21945              	.LVL265:
 884:../fatfs/ff.c **** 		if (res != FR_OK) break;
 21946              		.loc 1 884 0
 21947 09b2 D0B9     		cbnz	r0, .L170
 885:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 21948              		.loc 1 885 0
 21949 09b4 6269     		ldr	r2, [r4, #20]
 21950              	.LVL266:
 886:../fatfs/ff.c **** 		c = dir[DIR_Name];
 21951              		.loc 1 886 0
 21952 09b6 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 21953              	.LVL267:
 887:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 21954              		.loc 1 887 0
 21955 09b8 B3B1     		cbz	r3, .L175
 908:../fatfs/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 21956              		.loc 1 908 0
 21957 09ba E52B     		cmp	r3, #229
 21958 09bc 05D0     		beq	.L171
 908:../fatfs/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 21959              		.loc 1 908 0 is_stmt 0 discriminator 1
 21960 09be 2E2B     		cmp	r3, #46
 21961 09c0 03D0     		beq	.L171
 21962 09c2 D37A     		ldrb	r3, [r2, #11]	@ zero_extendqisi2
 21963              	.LVL268:
 21964 09c4 13F0080F 		tst	r3, #8
 21965 09c8 0DD0     		beq	.L172
 21966              	.L171:
 911:../fatfs/ff.c **** 		res = dir_next(dj, FALSE);				/* Next entry */
 21967              		.loc 1 911 0 is_stmt 1
 21968 09ca 2046     		mov	r0, r4
 21969              	.LVL269:
 21970 09cc 0021     		movs	r1, #0
 21971 09ce FFF71FFF 		bl	dir_next
 21972              	.LVL270:
 21973 09d2 0346     		mov	r3, r0
 21974              	.LVL271:
 912:../fatfs/ff.c **** 		if (res != FR_OK) break;
 21975              		.loc 1 912 0
 21976 09d4 48B9     		cbnz	r0, .L170
 21977              	.LVL272:
 21978              	.L169:
 882:../fatfs/ff.c **** 	while (dj->sect) {
 21979              		.loc 1 882 0 discriminator 1
 21980 09d6 2169     		ldr	r1, [r4, #16]
 21981 09d8 0029     		cmp	r1, #0
 21982 09da E7D1     		bne	.L173
 882:../fatfs/ff.c **** 	while (dj->sect) {
 21983              		.loc 1 882 0 is_stmt 0
 21984 09dc 1846     		mov	r0, r3
 915:../fatfs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 21985              		.loc 1 915 0 is_stmt 1
 21986 09de 13B1     		cbz	r3, .L172
 21987              	.LVL273:
 21988              	.L174:
 915:../fatfs/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 21989              		.loc 1 915 0 is_stmt 0 discriminator 1
 21990 09e0 0022     		movs	r2, #0
 21991 09e2 2261     		str	r2, [r4, #16]
 21992 09e4 1846     		mov	r0, r3
 21993              	.L172:
 918:../fatfs/ff.c **** }
 21994              		.loc 1 918 0 is_stmt 1
 21995 09e6 10BD     		pop	{r4, pc}
 21996              	.LVL274:
 21997              	.L175:
 887:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 21998              		.loc 1 887 0
 21999 09e8 0420     		movs	r0, #4
 22000              	.LVL275:
 22001              	.L170:
 882:../fatfs/ff.c **** 	while (dj->sect) {
 22002              		.loc 1 882 0
 22003 09ea 0346     		mov	r3, r0
 22004 09ec F8E7     		b	.L174
 22005              		.cfi_endproc
 22006              	.LFE43:
 22008              		.align	1
 22009              		.thumb
 22010              		.thumb_func
 22012              	sync:
 22013              	.LFB34:
 274:../fatfs/ff.c **** {
 22014              		.loc 1 274 0
 22015              		.cfi_startproc
 22016              		@ args = 0, pretend = 0, frame = 0
 22017              		@ frame_needed = 0, uses_anonymous_args = 0
 22018              	.LVL276:
 22019 09ee 70B5     		push	{r4, r5, r6, lr}
 22020              	.LCFI15:
 22021              		.cfi_def_cfa_offset 16
 278:../fatfs/ff.c **** 	res = move_window(fs, 0);
 22022              		.loc 1 278 0
 22023 09f0 0021     		movs	r1, #0
 274:../fatfs/ff.c **** {
 22024              		.loc 1 274 0
 22025 09f2 0446     		mov	r4, r0
 22026              		.cfi_offset 14, -4
 22027              		.cfi_offset 6, -8
 22028              		.cfi_offset 5, -12
 22029              		.cfi_offset 4, -16
 278:../fatfs/ff.c **** 	res = move_window(fs, 0);
 22030              		.loc 1 278 0
 22031 09f4 FFF724FD 		bl	move_window
 22032              	.LVL277:
 22033 09f8 0546     		mov	r5, r0
 22034              	.LVL278:
 279:../fatfs/ff.c **** 	if (res == FR_OK) {
 22035              		.loc 1 279 0
 22036 09fa 002D     		cmp	r5, #0
 22037 09fc 4FD1     		bne	.L178
 281:../fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 22038              		.loc 1 281 0
 22039 09fe 2378     		ldrb	r3, [r4, #0]	@ zero_extendqisi2
 22040 0a00 032B     		cmp	r3, #3
 22041 0a02 44D1     		bne	.L179
 281:../fatfs/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 22042              		.loc 1 281 0 is_stmt 0 discriminator 1
 22043 0a04 A37A     		ldrb	r3, [r4, #10]	@ zero_extendqisi2
 22044 0a06 002B     		cmp	r3, #0
 22045 0a08 41D0     		beq	.L179
 283:../fatfs/ff.c **** 			mem_set(fs->win, 0, 512);
 22046              		.loc 1 283 0 is_stmt 1
 22047 0a0a 04F13006 		add	r6, r4, #48
 22048 0a0e 3046     		mov	r0, r6
 22049              	.LVL279:
 22050 0a10 2946     		mov	r1, r5
 22051 0a12 4FF40072 		mov	r2, #512
 282:../fatfs/ff.c **** 			fs->winsect = 0;
 22052              		.loc 1 282 0
 22053 0a16 E562     		str	r5, [r4, #44]
 283:../fatfs/ff.c **** 			mem_set(fs->win, 0, 512);
 22054              		.loc 1 283 0
 22055 0a18 FFF7FAFA 		bl	mem_set
 284:../fatfs/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 22056              		.loc 1 284 0
 22057 0a1c 5523     		movs	r3, #85
 22058 0a1e 84F82E32 		strb	r3, [r4, #558]
 22059 0a22 DB18     		adds	r3, r3, r3
 22060 0a24 84F82F32 		strb	r3, [r4, #559]
 285:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 22061              		.loc 1 285 0
 22062 0a28 583B     		subs	r3, r3, #88
 22063 0a2a 84F83030 		strb	r3, [r4, #48]
 22064 0a2e 84F83130 		strb	r3, [r4, #49]
 22065 0a32 0F33     		adds	r3, r3, #15
 22066 0a34 84F83230 		strb	r3, [r4, #50]
 286:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 22067              		.loc 1 286 0
 22068 0a38 84F81732 		strb	r3, [r4, #535]
 287:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 22069              		.loc 1 287 0
 22070 0a3c 2369     		ldr	r3, [r4, #16]
 285:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 22071              		.loc 1 285 0
 22072 0a3e 4122     		movs	r2, #65
 22073 0a40 84F83320 		strb	r2, [r4, #51]
 286:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 22074              		.loc 1 286 0
 22075 0a44 84F81622 		strb	r2, [r4, #534]
 287:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 22076              		.loc 1 287 0
 22077 0a48 1A0A     		lsrs	r2, r3, #8
 22078 0a4a 84F81832 		strb	r3, [r4, #536]
 22079 0a4e 84F81922 		strb	r2, [r4, #537]
 22080 0a52 1A0C     		lsrs	r2, r3, #16
 22081 0a54 1B0E     		lsrs	r3, r3, #24
 22082 0a56 84F81B32 		strb	r3, [r4, #539]
 288:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 22083              		.loc 1 288 0
 22084 0a5a E368     		ldr	r3, [r4, #12]
 287:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 22085              		.loc 1 287 0
 22086 0a5c 84F81A22 		strb	r2, [r4, #538]
 288:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 22087              		.loc 1 288 0
 22088 0a60 1A0A     		lsrs	r2, r3, #8
 286:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 22089              		.loc 1 286 0
 22090 0a62 7221     		movs	r1, #114
 288:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 22091              		.loc 1 288 0
 22092 0a64 84F81C32 		strb	r3, [r4, #540]
 22093 0a68 84F81D22 		strb	r2, [r4, #541]
 22094 0a6c 1A0C     		lsrs	r2, r3, #16
 22095 0a6e 1B0E     		lsrs	r3, r3, #24
 286:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 22096              		.loc 1 286 0
 22097 0a70 84F81412 		strb	r1, [r4, #532]
 22098 0a74 84F81512 		strb	r1, [r4, #533]
 288:../fatfs/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 22099              		.loc 1 288 0
 22100 0a78 84F81E22 		strb	r2, [r4, #542]
 22101 0a7c 84F81F32 		strb	r3, [r4, #543]
 289:../fatfs/ff.c **** 			disk_write(fs->drive, fs->win, fs->fsi_sector, 1);
 22102              		.loc 1 289 0
 22103 0a80 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 22104 0a82 3146     		mov	r1, r6
 22105 0a84 6269     		ldr	r2, [r4, #20]
 22106 0a86 0123     		movs	r3, #1
 22107 0a88 FFF7FEFF 		bl	disk_write
 290:../fatfs/ff.c **** 			fs->fsi_flag = 0;
 22108              		.loc 1 290 0
 22109 0a8c A572     		strb	r5, [r4, #10]
 22110              	.L179:
 293:../fatfs/ff.c **** 		if (disk_ioctl(fs->drive, CTRL_SYNC, (void*)NULL) != RES_OK)
 22111              		.loc 1 293 0
 22112 0a8e 0021     		movs	r1, #0
 22113 0a90 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 22114 0a92 0A46     		mov	r2, r1
 22115 0a94 FFF7FEFF 		bl	disk_ioctl
 22116 0a98 0038     		subs	r0, r0, #0
 22117 0a9a 18BF     		it	ne
 22118 0a9c 0120     		movne	r0, #1
 22119              	.L178:
 22120              	.LVL280:
 298:../fatfs/ff.c **** }
 22121              		.loc 1 298 0
 22122 0a9e 70BD     		pop	{r4, r5, r6, pc}
 22123              		.cfi_endproc
 22124              	.LFE34:
 22126              		.align	1
 22127              		.thumb
 22128              		.thumb_func
 22130              	follow_path:
 22131              	.LFB48:
1366:../fatfs/ff.c **** {
 22132              		.loc 1 1366 0
 22133              		.cfi_startproc
 22134              		@ args = 0, pretend = 0, frame = 0
 22135              		@ frame_needed = 0, uses_anonymous_args = 0
 22136              	.LVL281:
 22137 0aa0 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 22138              	.LCFI16:
 22139              		.cfi_def_cfa_offset 24
1378:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 22140              		.loc 1 1378 0
 22141 0aa4 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
1366:../fatfs/ff.c **** {
 22142              		.loc 1 1366 0
 22143 0aa6 0546     		mov	r5, r0
 22144              		.cfi_offset 14, -4
 22145              		.cfi_offset 8, -8
 22146              		.cfi_offset 7, -12
 22147              		.cfi_offset 6, -16
 22148              		.cfi_offset 5, -20
 22149              		.cfi_offset 4, -24
1378:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 22150              		.loc 1 1378 0
 22151 0aa8 2F2B     		cmp	r3, #47
1366:../fatfs/ff.c **** {
 22152              		.loc 1 1366 0
 22153 0aaa 0E46     		mov	r6, r1
1378:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 22154              		.loc 1 1378 0
 22155 0aac 01D0     		beq	.L181
1378:../fatfs/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
 22156              		.loc 1 1378 0 is_stmt 0 discriminator 1
 22157 0aae 5C2B     		cmp	r3, #92
 22158 0ab0 00D1     		bne	.L182
 22159              	.L181:
1379:../fatfs/ff.c **** 		path++;
 22160              		.loc 1 1379 0 is_stmt 1
 22161 0ab2 0136     		adds	r6, r6, #1
 22162              	.LVL282:
 22163              	.L182:
1380:../fatfs/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
 22164              		.loc 1 1380 0
 22165 0ab4 0027     		movs	r7, #0
 22166 0ab6 AF60     		str	r7, [r5, #8]
1383:../fatfs/ff.c **** 	if ((UINT)*path < ' ') {			/* Null path means the start directory itself */
 22167              		.loc 1 1383 0
 22168 0ab8 3378     		ldrb	r3, [r6, #0]	@ zero_extendqisi2
 22169 0aba 1F2B     		cmp	r3, #31
 22170 0abc 06D8     		bhi	.L184
1384:../fatfs/ff.c **** 		res = dir_seek(dj, 0);
 22171              		.loc 1 1384 0
 22172 0abe 2846     		mov	r0, r5
 22173              	.LVL283:
 22174 0ac0 3946     		mov	r1, r7
 22175 0ac2 FFF767FD 		bl	dir_seek
1385:../fatfs/ff.c **** 		dj->dir = NULL;
 22176              		.loc 1 1385 0
 22177 0ac6 6F61     		str	r7, [r5, #20]
1384:../fatfs/ff.c **** 		res = dir_seek(dj, 0);
 22178              		.loc 1 1384 0
 22179 0ac8 0446     		mov	r4, r0
 22180              	.LVL284:
 22181 0aca A4E0     		b	.L185
 22182              	.LVL285:
 22183              	.L184:
1598:../fatfs/ff.c **** 
1599:../fatfs/ff.c **** 
1600:../fatfs/ff.c **** 
1601:../fatfs/ff.c **** 
1602:../fatfs/ff.c **** /*--------------------------------------------------------------------------
1603:../fatfs/ff.c **** 
1604:../fatfs/ff.c ****    Public Functions
1605:../fatfs/ff.c **** 
1606:../fatfs/ff.c **** --------------------------------------------------------------------------*/
1607:../fatfs/ff.c **** 
1608:../fatfs/ff.c **** 
1609:../fatfs/ff.c **** 
1610:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1611:../fatfs/ff.c **** /* Mount/Unmount a Locical Drive                                         */
1612:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1613:../fatfs/ff.c **** 
1614:../fatfs/ff.c **** FRESULT f_mount (
1615:../fatfs/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
1616:../fatfs/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
1617:../fatfs/ff.c **** )
1618:../fatfs/ff.c **** {
1619:../fatfs/ff.c **** 	FATFS *rfs;
1620:../fatfs/ff.c **** 
1621:../fatfs/ff.c **** 
1622:../fatfs/ff.c **** 	if (vol >= _DRIVES)				/* Check if the drive number is valid */
1623:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
1624:../fatfs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
1625:../fatfs/ff.c **** 
1626:../fatfs/ff.c **** 	if (rfs) {
1627:../fatfs/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
1628:../fatfs/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
1629:../fatfs/ff.c **** #endif
1630:../fatfs/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
1631:../fatfs/ff.c **** 	}
1632:../fatfs/ff.c **** 
1633:../fatfs/ff.c **** 	if (fs) {
1634:../fatfs/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
1635:../fatfs/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
1636:../fatfs/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
1637:../fatfs/ff.c **** #endif
1638:../fatfs/ff.c **** 	}
1639:../fatfs/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
1640:../fatfs/ff.c **** 
1641:../fatfs/ff.c **** 	return FR_OK;
1642:../fatfs/ff.c **** }
1643:../fatfs/ff.c **** 
1644:../fatfs/ff.c **** 
1645:../fatfs/ff.c **** 
1646:../fatfs/ff.c **** 
1647:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1648:../fatfs/ff.c **** /* Open or Create a File                                                 */
1649:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1650:../fatfs/ff.c **** 
1651:../fatfs/ff.c **** FRESULT f_open (
1652:../fatfs/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
1653:../fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file name */
1654:../fatfs/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
1655:../fatfs/ff.c **** )
1656:../fatfs/ff.c **** {
1657:../fatfs/ff.c **** 	FRESULT res;
1658:../fatfs/ff.c **** 	DIR dj;
1659:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
1660:../fatfs/ff.c **** 	BYTE *dir;
1661:../fatfs/ff.c **** 
1662:../fatfs/ff.c **** 
1663:../fatfs/ff.c **** 	fp->fs = NULL;		/* Clear file object */
1664:../fatfs/ff.c **** #if !_FS_READONLY
1665:../fatfs/ff.c **** 	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
1666:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_C
1667:../fatfs/ff.c **** #else
1668:../fatfs/ff.c **** 	mode &= FA_READ;
1669:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
1670:../fatfs/ff.c **** #endif
1671:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
1672:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
1673:../fatfs/ff.c **** 	res = follow_path(&dj, path);	/* Follow the file path */
1674:../fatfs/ff.c **** 
1675:../fatfs/ff.c **** #if !_FS_READONLY
1676:../fatfs/ff.c **** 	/* Create or Open a file */
1677:../fatfs/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1678:../fatfs/ff.c **** 		DWORD ps, cl;
1679:../fatfs/ff.c **** 
1680:../fatfs/ff.c **** 		if (res != FR_OK) {			/* No file, create new */
1681:../fatfs/ff.c **** 			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
1682:../fatfs/ff.c **** 				res = dir_register(&dj);
1683:../fatfs/ff.c **** 			if (res != FR_OK) LEAVE_FF(dj.fs, res);
1684:../fatfs/ff.c **** 			mode |= FA_CREATE_ALWAYS;
1685:../fatfs/ff.c **** 			dir = dj.dir;			/* Created entry (SFN entry) */
1686:../fatfs/ff.c **** 		}
1687:../fatfs/ff.c **** 		else {						/* Any object is already existing */
1688:../fatfs/ff.c **** 			if (mode & FA_CREATE_NEW)			/* Cannot create new */
1689:../fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_EXIST);
1690:../fatfs/ff.c **** 			dir = dj.dir;
1691:../fatfs/ff.c **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
1692:../fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_DENIED);
1693:../fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
1694:../fatfs/ff.c **** 				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start clust
1695:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
1696:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, 0);
1697:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
1698:../fatfs/ff.c **** 				dj.fs->wflag = 1;
1699:../fatfs/ff.c **** 				ps = dj.fs->winsect;			/* Remove the cluster chain */
1700:../fatfs/ff.c **** 				if (cl) {
1701:../fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
1702:../fatfs/ff.c **** 					if (res) LEAVE_FF(dj.fs, res);
1703:../fatfs/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
1704:../fatfs/ff.c **** 				}
1705:../fatfs/ff.c **** 				res = move_window(dj.fs, ps);
1706:../fatfs/ff.c **** 				if (res != FR_OK) LEAVE_FF(dj.fs, res);
1707:../fatfs/ff.c **** 			}
1708:../fatfs/ff.c **** 		}
1709:../fatfs/ff.c **** 		if (mode & FA_CREATE_ALWAYS) {
1710:../fatfs/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
1711:../fatfs/ff.c **** 			ps = get_fattime();
1712:../fatfs/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
1713:../fatfs/ff.c **** 			dj.fs->wflag = 1;
1714:../fatfs/ff.c **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
1715:../fatfs/ff.c **** 		}
1716:../fatfs/ff.c **** 	}
1717:../fatfs/ff.c **** 	/* Open an existing file */
1718:../fatfs/ff.c **** 	else {
1719:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1720:../fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
1721:../fatfs/ff.c **** 		dir = dj.dir;
1722:../fatfs/ff.c **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
1723:../fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_NO_FILE);
1724:../fatfs/ff.c **** #if !_FS_READONLY
1725:../fatfs/ff.c **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
1726:../fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_DENIED);
1727:../fatfs/ff.c **** 	}
1728:../fatfs/ff.c **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
1729:../fatfs/ff.c **** 	fp->dir_ptr = dj.dir;
1730:../fatfs/ff.c **** #endif
1731:../fatfs/ff.c **** 	fp->flag = mode;					/* File access mode */
1732:../fatfs/ff.c **** 	fp->org_clust =						/* File start cluster */
1733:../fatfs/ff.c **** 		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
1734:../fatfs/ff.c **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
1735:../fatfs/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
1736:../fatfs/ff.c **** 	fp->dsect = 0;
1737:../fatfs/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
1738:../fatfs/ff.c **** 
1739:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, FR_OK);
1740:../fatfs/ff.c **** }
1741:../fatfs/ff.c **** 
1742:../fatfs/ff.c **** 
1743:../fatfs/ff.c **** 
1744:../fatfs/ff.c **** 
1745:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1746:../fatfs/ff.c **** /* Read File                                                             */
1747:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1748:../fatfs/ff.c **** 
1749:../fatfs/ff.c **** FRESULT f_read (
1750:../fatfs/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
1751:../fatfs/ff.c **** 	void *buff,		/* Pointer to data buffer */
1752:../fatfs/ff.c **** 	UINT btr,		/* Number of bytes to read */
1753:../fatfs/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
1754:../fatfs/ff.c **** )
1755:../fatfs/ff.c **** {
1756:../fatfs/ff.c **** 	FRESULT res;
1757:../fatfs/ff.c **** 	DWORD clst, sect, remain;
1758:../fatfs/ff.c **** 	UINT rcnt, cc;
1759:../fatfs/ff.c **** 	BYTE *rbuff = buff;
1760:../fatfs/ff.c **** 
1761:../fatfs/ff.c **** 
1762:../fatfs/ff.c **** 	*br = 0;
1763:../fatfs/ff.c **** 
1764:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
1765:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
1766:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
1767:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1768:../fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
1769:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
1770:../fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
1771:../fatfs/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
1772:../fatfs/ff.c **** 
1773:../fatfs/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
1774:../fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
1775:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1776:../fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1777:../fatfs/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
1778:../fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
1779:../fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
1780:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1781:../fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
1782:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
1783:../fatfs/ff.c **** 			}
1784:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1785:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1786:../fatfs/ff.c **** 			sect += fp->csect;
1787:../fatfs/ff.c **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
1788:../fatfs/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
1789:../fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1790:../fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
1791:../fatfs/ff.c **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
1792:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1793:../fatfs/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2
1794:../fatfs/ff.c **** #if _FS_TINY
1795:../fatfs/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)		/* Replace one of the read sectors with cach
1796:../fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
1797:../fatfs/ff.c **** #else
1798:../fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with ca
1799:../fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
1800:../fatfs/ff.c **** #endif
1801:../fatfs/ff.c **** #endif
1802:../fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1803:../fatfs/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1804:../fatfs/ff.c **** 				continue;
1805:../fatfs/ff.c **** 			}
1806:../fatfs/ff.c **** #if !_FS_TINY
1807:../fatfs/ff.c **** #if !_FS_READONLY
1808:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
1809:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1810:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1811:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1812:../fatfs/ff.c **** 			}
1813:../fatfs/ff.c **** #endif
1814:../fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
1815:../fatfs/ff.c **** 				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
1816:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1817:../fatfs/ff.c **** 			}
1818:../fatfs/ff.c **** #endif
1819:../fatfs/ff.c **** 			fp->dsect = sect;
1820:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
1821:../fatfs/ff.c **** 		}
1822:../fatfs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
1823:../fatfs/ff.c **** 		if (rcnt > btr) rcnt = btr;
1824:../fatfs/ff.c **** #if _FS_TINY
1825:../fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1826:../fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
1827:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
1828:../fatfs/ff.c **** #else
1829:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
1830:../fatfs/ff.c **** #endif
1831:../fatfs/ff.c **** 	}
1832:../fatfs/ff.c **** 
1833:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
1834:../fatfs/ff.c **** }
1835:../fatfs/ff.c **** 
1836:../fatfs/ff.c **** 
1837:../fatfs/ff.c **** 
1838:../fatfs/ff.c **** 
1839:../fatfs/ff.c **** #if !_FS_READONLY
1840:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1841:../fatfs/ff.c **** /* Write File                                                            */
1842:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1843:../fatfs/ff.c **** 
1844:../fatfs/ff.c **** FRESULT f_write (
1845:../fatfs/ff.c **** 	FIL *fp,			/* Pointer to the file object */
1846:../fatfs/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
1847:../fatfs/ff.c **** 	UINT btw,			/* Number of bytes to write */
1848:../fatfs/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
1849:../fatfs/ff.c **** )
1850:../fatfs/ff.c **** {
1851:../fatfs/ff.c **** 	FRESULT res;
1852:../fatfs/ff.c **** 	DWORD clst, sect;
1853:../fatfs/ff.c **** 	UINT wcnt, cc;
1854:../fatfs/ff.c **** 	const BYTE *wbuff = buff;
1855:../fatfs/ff.c **** 
1856:../fatfs/ff.c **** 
1857:../fatfs/ff.c **** 	*bw = 0;
1858:../fatfs/ff.c **** 
1859:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
1860:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
1861:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
1862:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
1863:../fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
1864:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
1865:../fatfs/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
1866:../fatfs/ff.c **** 
1867:../fatfs/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
1868:../fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
1869:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
1870:../fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
1871:../fatfs/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
1872:../fatfs/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
1873:../fatfs/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
1874:../fatfs/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
1875:../fatfs/ff.c **** 				} else {							/* Middle or end of the file */
1876:../fatfs/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
1877:../fatfs/ff.c **** 				}
1878:../fatfs/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
1879:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
1880:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
1881:../fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
1882:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
1883:../fatfs/ff.c **** 			}
1884:../fatfs/ff.c **** #if _FS_TINY
1885:../fatfs/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to f
1886:../fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
1887:../fatfs/ff.c **** #else
1888:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
1889:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1890:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1891:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1892:../fatfs/ff.c **** 			}
1893:../fatfs/ff.c **** #endif
1894:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
1895:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
1896:../fatfs/ff.c **** 			sect += fp->csect;
1897:../fatfs/ff.c **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
1898:../fatfs/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
1899:../fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
1900:../fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
1901:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
1902:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
1903:../fatfs/ff.c **** #if _FS_TINY
1904:../fatfs/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write 
1905:../fatfs/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
1906:../fatfs/ff.c **** 					fp->fs->wflag = 0;
1907:../fatfs/ff.c **** 				}
1908:../fatfs/ff.c **** #else
1909:../fatfs/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
1910:../fatfs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
1911:../fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
1912:../fatfs/ff.c **** 				}
1913:../fatfs/ff.c **** #endif
1914:../fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
1915:../fatfs/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
1916:../fatfs/ff.c **** 				continue;
1917:../fatfs/ff.c **** 			}
1918:../fatfs/ff.c **** #if _FS_TINY
1919:../fatfs/ff.c **** 			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
1920:../fatfs/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
1921:../fatfs/ff.c **** 				fp->fs->winsect = sect;
1922:../fatfs/ff.c **** 			}
1923:../fatfs/ff.c **** #else
1924:../fatfs/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
1925:../fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
1926:../fatfs/ff.c **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
1927:../fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
1928:../fatfs/ff.c **** 			}
1929:../fatfs/ff.c **** #endif
1930:../fatfs/ff.c **** 			fp->dsect = sect;
1931:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
1932:../fatfs/ff.c **** 		}
1933:../fatfs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
1934:../fatfs/ff.c **** 		if (wcnt > btw) wcnt = btw;
1935:../fatfs/ff.c **** #if _FS_TINY
1936:../fatfs/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
1937:../fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
1938:../fatfs/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
1939:../fatfs/ff.c **** 		fp->fs->wflag = 1;
1940:../fatfs/ff.c **** #else
1941:../fatfs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
1942:../fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
1943:../fatfs/ff.c **** #endif
1944:../fatfs/ff.c **** 	}
1945:../fatfs/ff.c **** 
1946:../fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
1947:../fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
1948:../fatfs/ff.c **** 
1949:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
1950:../fatfs/ff.c **** }
1951:../fatfs/ff.c **** 
1952:../fatfs/ff.c **** 
1953:../fatfs/ff.c **** 
1954:../fatfs/ff.c **** 
1955:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1956:../fatfs/ff.c **** /* Synchronize the File Object                                           */
1957:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
1958:../fatfs/ff.c **** 
1959:../fatfs/ff.c **** FRESULT f_sync (
1960:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
1961:../fatfs/ff.c **** )
1962:../fatfs/ff.c **** {
1963:../fatfs/ff.c **** 	FRESULT res;
1964:../fatfs/ff.c **** 	DWORD tim;
1965:../fatfs/ff.c **** 	BYTE *dir;
1966:../fatfs/ff.c **** 
1967:../fatfs/ff.c **** 
1968:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
1969:../fatfs/ff.c **** 	if (res == FR_OK) {
1970:../fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
1971:../fatfs/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
1972:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
1973:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
1974:../fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
1975:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
1976:../fatfs/ff.c **** 			}
1977:../fatfs/ff.c **** #endif
1978:../fatfs/ff.c **** 			/* Update the directory entry */
1979:../fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
1980:../fatfs/ff.c **** 			if (res == FR_OK) {
1981:../fatfs/ff.c **** 				dir = fp->dir_ptr;
1982:../fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
1983:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
1984:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
1985:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
1986:../fatfs/ff.c **** 				tim = get_fattime();			/* Updated time */
1987:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
1988:../fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
1989:../fatfs/ff.c **** 				fp->fs->wflag = 1;
1990:../fatfs/ff.c **** 				res = sync(fp->fs);
1991:../fatfs/ff.c **** 			}
1992:../fatfs/ff.c **** 		}
1993:../fatfs/ff.c **** 	}
1994:../fatfs/ff.c **** 
1995:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
1996:../fatfs/ff.c **** }
1997:../fatfs/ff.c **** 
1998:../fatfs/ff.c **** #endif /* !_FS_READONLY */
1999:../fatfs/ff.c **** 
2000:../fatfs/ff.c **** 
2001:../fatfs/ff.c **** 
2002:../fatfs/ff.c **** 
2003:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2004:../fatfs/ff.c **** /* Close File                                                            */
2005:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2006:../fatfs/ff.c **** 
2007:../fatfs/ff.c **** FRESULT f_close (
2008:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2009:../fatfs/ff.c **** )
2010:../fatfs/ff.c **** {
2011:../fatfs/ff.c **** 	FRESULT res;
2012:../fatfs/ff.c **** 
2013:../fatfs/ff.c **** 
2014:../fatfs/ff.c **** #if _FS_READONLY
2015:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);
2016:../fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
2017:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2018:../fatfs/ff.c **** #else
2019:../fatfs/ff.c **** 	res = f_sync(fp);
2020:../fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
2021:../fatfs/ff.c **** 	return res;
2022:../fatfs/ff.c **** #endif
2023:../fatfs/ff.c **** }
2024:../fatfs/ff.c **** 
2025:../fatfs/ff.c **** 
2026:../fatfs/ff.c **** 
2027:../fatfs/ff.c **** 
2028:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2029:../fatfs/ff.c **** /* Change Current Drive/Directory                                        */
2030:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2031:../fatfs/ff.c **** 
2032:../fatfs/ff.c **** #if _FS_RPATH
2033:../fatfs/ff.c **** 
2034:../fatfs/ff.c **** FRESULT f_chdrive (
2035:../fatfs/ff.c **** 	BYTE drv		/* Drive number */
2036:../fatfs/ff.c **** )
2037:../fatfs/ff.c **** {
2038:../fatfs/ff.c **** 	if (drv >= _DRIVES) return FR_INVALID_DRIVE;
2039:../fatfs/ff.c **** 
2040:../fatfs/ff.c **** 	Drive = drv;
2041:../fatfs/ff.c **** 
2042:../fatfs/ff.c **** 	return FR_OK;
2043:../fatfs/ff.c **** }
2044:../fatfs/ff.c **** 
2045:../fatfs/ff.c **** 
2046:../fatfs/ff.c **** 
2047:../fatfs/ff.c **** 
2048:../fatfs/ff.c **** FRESULT f_chdir (
2049:../fatfs/ff.c **** 	const XCHAR *path	/* Pointer to the directory path */
2050:../fatfs/ff.c **** )
2051:../fatfs/ff.c **** {
2052:../fatfs/ff.c **** 	FRESULT res;
2053:../fatfs/ff.c **** 	DIR dj;
2054:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2055:../fatfs/ff.c **** 	BYTE *dir;
2056:../fatfs/ff.c **** 
2057:../fatfs/ff.c **** 
2058:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
2059:../fatfs/ff.c **** 	if (res == FR_OK) {
2060:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2061:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2062:../fatfs/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2063:../fatfs/ff.c **** 			dir = dj.dir;					/* Pointer to the entry */
2064:../fatfs/ff.c **** 			if (!dir) {
2065:../fatfs/ff.c **** 				dj.fs->cdir = 0;			/* No entry (root dir) */
2066:../fatfs/ff.c **** 			} else {
2067:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR)	/* Reached to the dir */
2068:../fatfs/ff.c **** 					dj.fs->cdir = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2069:../fatfs/ff.c **** 				else
2070:../fatfs/ff.c **** 					res = FR_NO_PATH;		/* Could not reach the dir (it is a file) */
2071:../fatfs/ff.c **** 			}
2072:../fatfs/ff.c **** 		}
2073:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2074:../fatfs/ff.c **** 	}
2075:../fatfs/ff.c **** 
2076:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2077:../fatfs/ff.c **** }
2078:../fatfs/ff.c **** 
2079:../fatfs/ff.c **** #endif
2080:../fatfs/ff.c **** 
2081:../fatfs/ff.c **** 
2082:../fatfs/ff.c **** 
2083:../fatfs/ff.c **** #if _FS_MINIMIZE <= 2
2084:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2085:../fatfs/ff.c **** /* Seek File R/W Pointer                                                 */
2086:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2087:../fatfs/ff.c **** 
2088:../fatfs/ff.c **** FRESULT f_lseek (
2089:../fatfs/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2090:../fatfs/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2091:../fatfs/ff.c **** )
2092:../fatfs/ff.c **** {
2093:../fatfs/ff.c **** 	FRESULT res;
2094:../fatfs/ff.c **** 	DWORD clst, bcs, nsect, ifptr;
2095:../fatfs/ff.c **** 
2096:../fatfs/ff.c **** 
2097:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2098:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2099:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2100:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2101:../fatfs/ff.c **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
2102:../fatfs/ff.c **** #if !_FS_READONLY
2103:../fatfs/ff.c **** 		 && !(fp->flag & FA_WRITE)
2104:../fatfs/ff.c **** #endif
2105:../fatfs/ff.c **** 		) ofs = fp->fsize;
2106:../fatfs/ff.c **** 
2107:../fatfs/ff.c **** 	ifptr = fp->fptr;
2108:../fatfs/ff.c **** 	fp->fptr = nsect = 0; fp->csect = 255;
2109:../fatfs/ff.c **** 	if (ofs > 0) {
2110:../fatfs/ff.c **** 		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
2111:../fatfs/ff.c **** 		if (ifptr > 0 &&
2112:../fatfs/ff.c **** 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
2113:../fatfs/ff.c **** 			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
2114:../fatfs/ff.c **** 			ofs -= fp->fptr;
2115:../fatfs/ff.c **** 			clst = fp->curr_clust;
2116:../fatfs/ff.c **** 		} else {									/* When seek to back cluster, */
2117:../fatfs/ff.c **** 			clst = fp->org_clust;					/* start from the first cluster */
2118:../fatfs/ff.c **** #if !_FS_READONLY
2119:../fatfs/ff.c **** 			if (clst == 0) {						/* If no cluster chain, create a new chain */
2120:../fatfs/ff.c **** 				clst = create_chain(fp->fs, 0);
2121:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2122:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2123:../fatfs/ff.c **** 				fp->org_clust = clst;
2124:../fatfs/ff.c **** 			}
2125:../fatfs/ff.c **** #endif
2126:../fatfs/ff.c **** 			fp->curr_clust = clst;
2127:../fatfs/ff.c **** 		}
2128:../fatfs/ff.c **** 		if (clst != 0) {
2129:../fatfs/ff.c **** 			while (ofs > bcs) {						/* Cluster following loop */
2130:../fatfs/ff.c **** #if !_FS_READONLY
2131:../fatfs/ff.c **** 				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2132:../fatfs/ff.c **** 					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
2133:../fatfs/ff.c **** 					if (clst == 0) {				/* When disk gets full, clip file size */
2134:../fatfs/ff.c **** 						ofs = bcs; break;
2135:../fatfs/ff.c **** 					}
2136:../fatfs/ff.c **** 				} else
2137:../fatfs/ff.c **** #endif
2138:../fatfs/ff.c **** 					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2139:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2140:../fatfs/ff.c **** 				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
2141:../fatfs/ff.c **** 				fp->curr_clust = clst;
2142:../fatfs/ff.c **** 				fp->fptr += bcs;
2143:../fatfs/ff.c **** 				ofs -= bcs;
2144:../fatfs/ff.c **** 			}
2145:../fatfs/ff.c **** 			fp->fptr += ofs;
2146:../fatfs/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
2147:../fatfs/ff.c **** 			if (ofs % SS(fp->fs)) {
2148:../fatfs/ff.c **** 				nsect = clust2sect(fp->fs, clst);	/* Current sector */
2149:../fatfs/ff.c **** 				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
2150:../fatfs/ff.c **** 				nsect += fp->csect;
2151:../fatfs/ff.c **** 				fp->csect++;
2152:../fatfs/ff.c **** 			}
2153:../fatfs/ff.c **** 		}
2154:../fatfs/ff.c **** 	}
2155:../fatfs/ff.c **** 	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
2156:../fatfs/ff.c **** #if !_FS_TINY
2157:../fatfs/ff.c **** #if !_FS_READONLY
2158:../fatfs/ff.c **** 		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
2159:../fatfs/ff.c **** 			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
2160:../fatfs/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2161:../fatfs/ff.c **** 			fp->flag &= ~FA__DIRTY;
2162:../fatfs/ff.c **** 		}
2163:../fatfs/ff.c **** #endif
2164:../fatfs/ff.c **** 		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
2165:../fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2166:../fatfs/ff.c **** #endif
2167:../fatfs/ff.c **** 		fp->dsect = nsect;
2168:../fatfs/ff.c **** 	}
2169:../fatfs/ff.c **** #if !_FS_READONLY
2170:../fatfs/ff.c **** 	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
2171:../fatfs/ff.c **** 		fp->fsize = fp->fptr;
2172:../fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
2173:../fatfs/ff.c **** 	}
2174:../fatfs/ff.c **** #endif
2175:../fatfs/ff.c **** 
2176:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2177:../fatfs/ff.c **** }
2178:../fatfs/ff.c **** 
2179:../fatfs/ff.c **** 
2180:../fatfs/ff.c **** 
2181:../fatfs/ff.c **** 
2182:../fatfs/ff.c **** #if _FS_MINIMIZE <= 1
2183:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2184:../fatfs/ff.c **** /* Create a Directroy Object                                             */
2185:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2186:../fatfs/ff.c **** 
2187:../fatfs/ff.c **** FRESULT f_opendir (
2188:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
2189:../fatfs/ff.c **** 	const XCHAR *path	/* Pointer to the directory path */
2190:../fatfs/ff.c **** )
2191:../fatfs/ff.c **** {
2192:../fatfs/ff.c **** 	FRESULT res;
2193:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2194:../fatfs/ff.c **** 	BYTE *dir;
2195:../fatfs/ff.c **** 
2196:../fatfs/ff.c **** 
2197:../fatfs/ff.c **** 	res = auto_mount(&path, &dj->fs, 0);
2198:../fatfs/ff.c **** 	if (res == FR_OK) {
2199:../fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
2200:../fatfs/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
2201:../fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
2202:../fatfs/ff.c **** 			dir = dj->dir;
2203:../fatfs/ff.c **** 			if (dir) {							/* It is not the root dir */
2204:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
2205:../fatfs/ff.c **** 					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2206:../fatfs/ff.c **** 				} else {						/* The object is not a directory */
2207:../fatfs/ff.c **** 					res = FR_NO_PATH;
2208:../fatfs/ff.c **** 				}
2209:../fatfs/ff.c **** 			}
2210:../fatfs/ff.c **** 			if (res == FR_OK) {
2211:../fatfs/ff.c **** 				dj->id = dj->fs->id;
2212:../fatfs/ff.c **** 				res = dir_seek(dj, 0);			/* Rewind dir */
2213:../fatfs/ff.c **** 			}
2214:../fatfs/ff.c **** 		}
2215:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2216:../fatfs/ff.c **** 	}
2217:../fatfs/ff.c **** 
2218:../fatfs/ff.c **** 	LEAVE_FF(dj->fs, res);
2219:../fatfs/ff.c **** }
2220:../fatfs/ff.c **** 
2221:../fatfs/ff.c **** 
2222:../fatfs/ff.c **** 
2223:../fatfs/ff.c **** 
2224:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2225:../fatfs/ff.c **** /* Read Directory Entry in Sequense                                      */
2226:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2227:../fatfs/ff.c **** 
2228:../fatfs/ff.c **** FRESULT f_readdir (
2229:../fatfs/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
2230:../fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2231:../fatfs/ff.c **** )
2232:../fatfs/ff.c **** {
2233:../fatfs/ff.c **** 	FRESULT res;
2234:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2235:../fatfs/ff.c **** 
2236:../fatfs/ff.c **** 
2237:../fatfs/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
2238:../fatfs/ff.c **** 	if (res == FR_OK) {
2239:../fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
2240:../fatfs/ff.c **** 		if (!fno) {
2241:../fatfs/ff.c **** 			res = dir_seek(dj, 0);
2242:../fatfs/ff.c **** 		} else {
2243:../fatfs/ff.c **** 			res = dir_read(dj);
2244:../fatfs/ff.c **** 			if (res == FR_NO_FILE) {
2245:../fatfs/ff.c **** 				dj->sect = 0;
2246:../fatfs/ff.c **** 				res = FR_OK;
2247:../fatfs/ff.c **** 			}
2248:../fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
2249:../fatfs/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
2250:../fatfs/ff.c **** 				res = dir_next(dj, FALSE);	/* Increment index for next */
2251:../fatfs/ff.c **** 				if (res == FR_NO_FILE) {
2252:../fatfs/ff.c **** 					dj->sect = 0;
2253:../fatfs/ff.c **** 					res = FR_OK;
2254:../fatfs/ff.c **** 				}
2255:../fatfs/ff.c **** 			}
2256:../fatfs/ff.c **** 		}
2257:../fatfs/ff.c **** 	}
2258:../fatfs/ff.c **** 
2259:../fatfs/ff.c **** 	LEAVE_FF(dj->fs, res);
2260:../fatfs/ff.c **** }
2261:../fatfs/ff.c **** 
2262:../fatfs/ff.c **** 
2263:../fatfs/ff.c **** 
2264:../fatfs/ff.c **** #if _FS_MINIMIZE == 0
2265:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2266:../fatfs/ff.c **** /* Get File Status                                                       */
2267:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2268:../fatfs/ff.c **** 
2269:../fatfs/ff.c **** FRESULT f_stat (
2270:../fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file path */
2271:../fatfs/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2272:../fatfs/ff.c **** )
2273:../fatfs/ff.c **** {
2274:../fatfs/ff.c **** 	FRESULT res;
2275:../fatfs/ff.c **** 	DIR dj;
2276:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2277:../fatfs/ff.c **** 
2278:../fatfs/ff.c **** 
2279:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
2280:../fatfs/ff.c **** 	if (res == FR_OK) {
2281:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2282:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2283:../fatfs/ff.c **** 		if (res == FR_OK) {				/* Follwo completed */
2284:../fatfs/ff.c **** 			if (dj.dir)	/* Found an object */
2285:../fatfs/ff.c **** 				get_fileinfo(&dj, fno);
2286:../fatfs/ff.c **** 			else		/* It is root dir */
2287:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
2288:../fatfs/ff.c **** 		}
2289:../fatfs/ff.c **** 	}
2290:../fatfs/ff.c **** 
2291:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2292:../fatfs/ff.c **** }
2293:../fatfs/ff.c **** 
2294:../fatfs/ff.c **** 
2295:../fatfs/ff.c **** 
2296:../fatfs/ff.c **** #if !_FS_READONLY
2297:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2298:../fatfs/ff.c **** /* Get Number of Free Clusters                                           */
2299:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2300:../fatfs/ff.c **** 
2301:../fatfs/ff.c **** FRESULT f_getfree (
2302:../fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the logical drive number (root dir) */
2303:../fatfs/ff.c **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
2304:../fatfs/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
2305:../fatfs/ff.c **** )
2306:../fatfs/ff.c **** {
2307:../fatfs/ff.c **** 	FRESULT res;
2308:../fatfs/ff.c **** 	DWORD n, clst, sect, stat;
2309:../fatfs/ff.c **** 	UINT i;
2310:../fatfs/ff.c **** 	BYTE fat, *p;
2311:../fatfs/ff.c **** 
2312:../fatfs/ff.c **** 
2313:../fatfs/ff.c **** 	/* Get drive number */
2314:../fatfs/ff.c **** 	res = auto_mount(&path, fatfs, 0);
2315:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(*fatfs, res);
2316:../fatfs/ff.c **** 
2317:../fatfs/ff.c **** 	/* If number of free cluster is valid, return it without cluster scan. */
2318:../fatfs/ff.c **** 	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
2319:../fatfs/ff.c **** 		*nclst = (*fatfs)->free_clust;
2320:../fatfs/ff.c **** 		LEAVE_FF(*fatfs, FR_OK);
2321:../fatfs/ff.c **** 	}
2322:../fatfs/ff.c **** 
2323:../fatfs/ff.c **** 	/* Get number of free clusters */
2324:../fatfs/ff.c **** 	fat = (*fatfs)->fs_type;
2325:../fatfs/ff.c **** 	n = 0;
2326:../fatfs/ff.c **** 	if (fat == FS_FAT12) {
2327:../fatfs/ff.c **** 		clst = 2;
2328:../fatfs/ff.c **** 		do {
2329:../fatfs/ff.c **** 			stat = get_fat(*fatfs, clst);
2330:../fatfs/ff.c **** 			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
2331:../fatfs/ff.c **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
2332:../fatfs/ff.c **** 			if (stat == 0) n++;
2333:../fatfs/ff.c **** 		} while (++clst < (*fatfs)->max_clust);
2334:../fatfs/ff.c **** 	} else {
2335:../fatfs/ff.c **** 		clst = (*fatfs)->max_clust;
2336:../fatfs/ff.c **** 		sect = (*fatfs)->fatbase;
2337:../fatfs/ff.c **** 		i = 0; p = 0;
2338:../fatfs/ff.c **** 		do {
2339:../fatfs/ff.c **** 			if (!i) {
2340:../fatfs/ff.c **** 				res = move_window(*fatfs, sect++);
2341:../fatfs/ff.c **** 				if (res != FR_OK)
2342:../fatfs/ff.c **** 					LEAVE_FF(*fatfs, res);
2343:../fatfs/ff.c **** 				p = (*fatfs)->win;
2344:../fatfs/ff.c **** 				i = SS(*fatfs);
2345:../fatfs/ff.c **** 			}
2346:../fatfs/ff.c **** 			if (fat == FS_FAT16) {
2347:../fatfs/ff.c **** 				if (LD_WORD(p) == 0) n++;
2348:../fatfs/ff.c **** 				p += 2; i -= 2;
2349:../fatfs/ff.c **** 			} else {
2350:../fatfs/ff.c **** 				if (LD_DWORD(p) == 0) n++;
2351:../fatfs/ff.c **** 				p += 4; i -= 4;
2352:../fatfs/ff.c **** 			}
2353:../fatfs/ff.c **** 		} while (--clst);
2354:../fatfs/ff.c **** 	}
2355:../fatfs/ff.c **** 	(*fatfs)->free_clust = n;
2356:../fatfs/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
2357:../fatfs/ff.c **** 	*nclst = n;
2358:../fatfs/ff.c **** 
2359:../fatfs/ff.c **** 	LEAVE_FF(*fatfs, FR_OK);
2360:../fatfs/ff.c **** }
2361:../fatfs/ff.c **** 
2362:../fatfs/ff.c **** 
2363:../fatfs/ff.c **** 
2364:../fatfs/ff.c **** 
2365:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2366:../fatfs/ff.c **** /* Truncate File                                                         */
2367:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2368:../fatfs/ff.c **** 
2369:../fatfs/ff.c **** FRESULT f_truncate (
2370:../fatfs/ff.c **** 	FIL *fp		/* Pointer to the file object */
2371:../fatfs/ff.c **** )
2372:../fatfs/ff.c **** {
2373:../fatfs/ff.c **** 	FRESULT res;
2374:../fatfs/ff.c **** 	DWORD ncl;
2375:../fatfs/ff.c **** 
2376:../fatfs/ff.c **** 
2377:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2378:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2379:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2380:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2381:../fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))			/* Check access mode */
2382:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2383:../fatfs/ff.c **** 
2384:../fatfs/ff.c **** 	if (fp->fsize > fp->fptr) {
2385:../fatfs/ff.c **** 		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
2386:../fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
2387:../fatfs/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
2388:../fatfs/ff.c **** 			res = remove_chain(fp->fs, fp->org_clust);
2389:../fatfs/ff.c **** 			fp->org_clust = 0;
2390:../fatfs/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
2391:../fatfs/ff.c **** 			ncl = get_fat(fp->fs, fp->curr_clust);
2392:../fatfs/ff.c **** 			res = FR_OK;
2393:../fatfs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
2394:../fatfs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
2395:../fatfs/ff.c **** 			if (res == FR_OK && ncl < fp->fs->max_clust) {
2396:../fatfs/ff.c **** 				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
2397:../fatfs/ff.c **** 				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
2398:../fatfs/ff.c **** 			}
2399:../fatfs/ff.c **** 		}
2400:../fatfs/ff.c **** 	}
2401:../fatfs/ff.c **** 	if (res != FR_OK) fp->flag |= FA__ERROR;
2402:../fatfs/ff.c **** 
2403:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, res);
2404:../fatfs/ff.c **** }
2405:../fatfs/ff.c **** 
2406:../fatfs/ff.c **** 
2407:../fatfs/ff.c **** 
2408:../fatfs/ff.c **** 
2409:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2410:../fatfs/ff.c **** /* Delete a File or Directory                                            */
2411:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2412:../fatfs/ff.c **** 
2413:../fatfs/ff.c **** FRESULT f_unlink (
2414:../fatfs/ff.c **** 	const XCHAR *path		/* Pointer to the file or directory path */
2415:../fatfs/ff.c **** )
2416:../fatfs/ff.c **** {
2417:../fatfs/ff.c **** 	FRESULT res;
2418:../fatfs/ff.c **** 	DIR dj, sdj;
2419:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2420:../fatfs/ff.c **** 	BYTE *dir;
2421:../fatfs/ff.c **** 	DWORD dclst;
2422:../fatfs/ff.c **** 
2423:../fatfs/ff.c **** 
2424:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
2425:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2426:../fatfs/ff.c **** 
2427:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
2428:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
2429:../fatfs/ff.c **** 	if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
2430:../fatfs/ff.c **** 		res = FR_INVALID_NAME;
2431:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
2432:../fatfs/ff.c **** 
2433:../fatfs/ff.c **** 	dir = dj.dir;
2434:../fatfs/ff.c **** 	if (!dir)								/* Is it the root directory? */
2435:../fatfs/ff.c **** 		LEAVE_FF(dj.fs, FR_INVALID_NAME);
2436:../fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
2437:../fatfs/ff.c **** 		LEAVE_FF(dj.fs, FR_DENIED);
2438:../fatfs/ff.c **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
2439:../fatfs/ff.c **** 
2440:../fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
2441:../fatfs/ff.c **** 		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
2442:../fatfs/ff.c **** 		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
2443:../fatfs/ff.c **** 		sdj.sclust = dclst;
2444:../fatfs/ff.c **** 		res = dir_seek(&sdj, 0);
2445:../fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);
2446:../fatfs/ff.c **** 		res = dir_read(&sdj);
2447:../fatfs/ff.c **** 		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
2448:../fatfs/ff.c **** 		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
2449:../fatfs/ff.c **** 	}
2450:../fatfs/ff.c **** 
2451:../fatfs/ff.c **** 	res = dir_remove(&dj);					/* Remove directory entry */
2452:../fatfs/ff.c **** 	if (res == FR_OK) {
2453:../fatfs/ff.c **** 		if (dclst)
2454:../fatfs/ff.c **** 			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
2455:../fatfs/ff.c **** 		if (res == FR_OK) res = sync(dj.fs);
2456:../fatfs/ff.c **** 	}
2457:../fatfs/ff.c **** 
2458:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2459:../fatfs/ff.c **** }
2460:../fatfs/ff.c **** 
2461:../fatfs/ff.c **** 
2462:../fatfs/ff.c **** 
2463:../fatfs/ff.c **** 
2464:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2465:../fatfs/ff.c **** /* Create a Directory                                                    */
2466:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2467:../fatfs/ff.c **** 
2468:../fatfs/ff.c **** FRESULT f_mkdir (
2469:../fatfs/ff.c **** 	const XCHAR *path		/* Pointer to the directory path */
2470:../fatfs/ff.c **** )
2471:../fatfs/ff.c **** {
2472:../fatfs/ff.c **** 	FRESULT res;
2473:../fatfs/ff.c **** 	DIR dj;
2474:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2475:../fatfs/ff.c **** 	BYTE *dir, n;
2476:../fatfs/ff.c **** 	DWORD dsect, dclst, pclst, tim;
2477:../fatfs/ff.c **** 
2478:../fatfs/ff.c **** 
2479:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
2480:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2481:../fatfs/ff.c **** 
2482:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
2483:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
2484:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
2485:../fatfs/ff.c **** 	if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[11] & NS_DOT))
2486:../fatfs/ff.c **** 		res = FR_INVALID_NAME;
2487:../fatfs/ff.c **** 	if (res != FR_NO_FILE)					/* Any error occured */
2488:../fatfs/ff.c **** 		LEAVE_FF(dj.fs, res);
2489:../fatfs/ff.c **** 
2490:../fatfs/ff.c **** 	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
2491:../fatfs/ff.c **** 	res = FR_OK;
2492:../fatfs/ff.c **** 	if (dclst == 0) res = FR_DENIED;
2493:../fatfs/ff.c **** 	if (dclst == 1) res = FR_INT_ERR;
2494:../fatfs/ff.c **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
2495:../fatfs/ff.c **** 	if (res == FR_OK)
2496:../fatfs/ff.c **** 		res = move_window(dj.fs, 0);
2497:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
2498:../fatfs/ff.c **** 	dsect = clust2sect(dj.fs, dclst);
2499:../fatfs/ff.c **** 
2500:../fatfs/ff.c **** 	dir = dj.fs->win;						/* Initialize the new directory table */
2501:../fatfs/ff.c **** 	mem_set(dir, 0, SS(dj.fs));
2502:../fatfs/ff.c **** 	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
2503:../fatfs/ff.c **** 	dir[DIR_Name] = '.';
2504:../fatfs/ff.c **** 	dir[DIR_Attr] = AM_DIR;
2505:../fatfs/ff.c **** 	tim = get_fattime();
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
2507:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
2508:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
2509:../fatfs/ff.c **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
2510:../fatfs/ff.c **** 	dir[33] = '.';
2511:../fatfs/ff.c **** 	pclst = dj.sclust;
2512:../fatfs/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
2513:../fatfs/ff.c **** 		pclst = 0;
2514:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusLO, pclst);
2515:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
2516:../fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
2517:../fatfs/ff.c **** 		dj.fs->winsect = dsect++;
2518:../fatfs/ff.c **** 		dj.fs->wflag = 1;
2519:../fatfs/ff.c **** 		res = move_window(dj.fs, 0);
2520:../fatfs/ff.c **** 		if (res) LEAVE_FF(dj.fs, res);
2521:../fatfs/ff.c **** 		mem_set(dir, 0, SS(dj.fs));
2522:../fatfs/ff.c **** 	}
2523:../fatfs/ff.c **** 
2524:../fatfs/ff.c **** 	res = dir_register(&dj);
2525:../fatfs/ff.c **** 	if (res != FR_OK) {
2526:../fatfs/ff.c **** 		remove_chain(dj.fs, dclst);
2527:../fatfs/ff.c **** 	} else {
2528:../fatfs/ff.c **** 		dir = dj.dir;
2529:../fatfs/ff.c **** 		dir[DIR_Attr] = AM_DIR;					/* Attribute */
2530:../fatfs/ff.c **** 		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
2531:../fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
2532:../fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
2533:../fatfs/ff.c **** 		dj.fs->wflag = 1;
2534:../fatfs/ff.c **** 		res = sync(dj.fs);
2535:../fatfs/ff.c **** 	}
2536:../fatfs/ff.c **** 
2537:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2538:../fatfs/ff.c **** }
2539:../fatfs/ff.c **** 
2540:../fatfs/ff.c **** 
2541:../fatfs/ff.c **** 
2542:../fatfs/ff.c **** 
2543:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2544:../fatfs/ff.c **** /* Change File Attribute                                                 */
2545:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2546:../fatfs/ff.c **** 
2547:../fatfs/ff.c **** FRESULT f_chmod (
2548:../fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file path */
2549:../fatfs/ff.c **** 	BYTE value,			/* Attribute bits */
2550:../fatfs/ff.c **** 	BYTE mask			/* Attribute mask to change */
2551:../fatfs/ff.c **** )
2552:../fatfs/ff.c **** {
2553:../fatfs/ff.c **** 	FRESULT res;
2554:../fatfs/ff.c **** 	DIR dj;
2555:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2556:../fatfs/ff.c **** 	BYTE *dir;
2557:../fatfs/ff.c **** 
2558:../fatfs/ff.c **** 
2559:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
2560:../fatfs/ff.c **** 	if (res == FR_OK) {
2561:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2562:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2563:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
2564:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
2565:../fatfs/ff.c **** 		if (res == FR_OK) {
2566:../fatfs/ff.c **** 			dir = dj.dir;
2567:../fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
2568:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
2569:../fatfs/ff.c **** 			} else {						/* File or sub directory */
2570:../fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
2571:../fatfs/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
2572:../fatfs/ff.c **** 				dj.fs->wflag = 1;
2573:../fatfs/ff.c **** 				res = sync(dj.fs);
2574:../fatfs/ff.c **** 			}
2575:../fatfs/ff.c **** 		}
2576:../fatfs/ff.c **** 	}
2577:../fatfs/ff.c **** 
2578:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2579:../fatfs/ff.c **** }
2580:../fatfs/ff.c **** 
2581:../fatfs/ff.c **** 
2582:../fatfs/ff.c **** 
2583:../fatfs/ff.c **** 
2584:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2585:../fatfs/ff.c **** /* Change Timestamp                                                      */
2586:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2587:../fatfs/ff.c **** 
2588:../fatfs/ff.c **** FRESULT f_utime (
2589:../fatfs/ff.c **** 	const XCHAR *path,	/* Pointer to the file/directory name */
2590:../fatfs/ff.c **** 	const FILINFO *fno	/* Pointer to the timestamp to be set */
2591:../fatfs/ff.c **** )
2592:../fatfs/ff.c **** {
2593:../fatfs/ff.c **** 	FRESULT res;
2594:../fatfs/ff.c **** 	DIR dj;
2595:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2596:../fatfs/ff.c **** 	BYTE *dir;
2597:../fatfs/ff.c **** 
2598:../fatfs/ff.c **** 
2599:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
2600:../fatfs/ff.c **** 	if (res == FR_OK) {
2601:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
2602:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2603:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[11] & NS_DOT))
2604:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
2605:../fatfs/ff.c **** 		if (res == FR_OK) {
2606:../fatfs/ff.c **** 			dir = dj.dir;
2607:../fatfs/ff.c **** 			if (!dir) {				/* Root directory */
2608:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
2609:../fatfs/ff.c **** 			} else {				/* File or sub-directory */
2610:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
2611:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
2612:../fatfs/ff.c **** 				dj.fs->wflag = 1;
2613:../fatfs/ff.c **** 				res = sync(dj.fs);
2614:../fatfs/ff.c **** 			}
2615:../fatfs/ff.c **** 		}
2616:../fatfs/ff.c **** 	}
2617:../fatfs/ff.c **** 
2618:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, res);
2619:../fatfs/ff.c **** }
2620:../fatfs/ff.c **** 
2621:../fatfs/ff.c **** 
2622:../fatfs/ff.c **** 
2623:../fatfs/ff.c **** 
2624:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2625:../fatfs/ff.c **** /* Rename File/Directory                                                 */
2626:../fatfs/ff.c **** /*-----------------------------------------------------------------------*/
2627:../fatfs/ff.c **** 
2628:../fatfs/ff.c **** FRESULT f_rename (
2629:../fatfs/ff.c **** 	const XCHAR *path_old,	/* Pointer to the old name */
2630:../fatfs/ff.c **** 	const XCHAR *path_new	/* Pointer to the new name */
2631:../fatfs/ff.c **** )
2632:../fatfs/ff.c **** {
2633:../fatfs/ff.c **** 	FRESULT res;
2634:../fatfs/ff.c **** 	DIR dj_old, dj_new;
2635:../fatfs/ff.c **** 	NAMEBUF(sfn, lfn);
2636:../fatfs/ff.c **** 	BYTE buf[21], *dir;
2637:../fatfs/ff.c **** 	DWORD dw;
2638:../fatfs/ff.c **** 
2639:../fatfs/ff.c **** 
2640:../fatfs/ff.c **** 	INITBUF(dj_old, sfn, lfn);
2641:../fatfs/ff.c **** 	res = auto_mount(&path_old, &dj_old.fs, 1);
2642:../fatfs/ff.c **** 	if (res == FR_OK) {
2643:../fatfs/ff.c **** 		dj_new.fs = dj_old.fs;
2644:../fatfs/ff.c **** 		res = follow_path(&dj_old, path_old);	/* Check old object */
2645:../fatfs/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj_old.fn[11] & NS_DOT))
2646:../fatfs/ff.c **** 			res = FR_INVALID_NAME;
2647:../fatfs/ff.c **** 	}
2648:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
2649:../fatfs/ff.c **** 
2650:../fatfs/ff.c **** 	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
2651:../fatfs/ff.c **** 	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
2652:../fatfs/ff.c **** 
2653:../fatfs/ff.c **** 	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
2654:../fatfs/ff.c **** 	res = follow_path(&dj_new, path_new);		/* Check new object */
2655:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
2656:../fatfs/ff.c **** 	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
2657:../fatfs/ff.c **** 		res = dir_register(&dj_new);			/* Register the new object */
2658:../fatfs/ff.c **** 		if (res == FR_OK) {
2659:../fatfs/ff.c **** 			dir = dj_new.dir;					/* Copy object information into new entry */
2660:../fatfs/ff.c **** 			mem_cpy(dir+13, buf+2, 19);
2661:../fatfs/ff.c **** 			dir[DIR_Attr] = buf[0] | AM_ARC;
2662:../fatfs/ff.c **** 			dj_old.fs->wflag = 1;
2663:../fatfs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
2664:../fatfs/ff.c **** 				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
2665:../fatfs/ff.c **** 				if (!dw) {
2666:../fatfs/ff.c **** 					res = FR_INT_ERR;
2667:../fatfs/ff.c **** 				} else {
2668:../fatfs/ff.c **** 					res = move_window(dj_new.fs, dw);
2669:../fatfs/ff.c **** 					dir = dj_new.fs->win+32;
2670:../fatfs/ff.c **** 					if (res == FR_OK && dir[1] == '.') {
2671:../fatfs/ff.c **** 						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.scl
2672:../fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusLO, dw);
2673:../fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
2674:../fatfs/ff.c **** 						dj_new.fs->wflag = 1;
2675:../fatfs/ff.c **** 					}
2676:../fatfs/ff.c **** 				}
2677:../fatfs/ff.c **** 			}
2678:../fatfs/ff.c **** 			if (res == FR_OK) {
2679:../fatfs/ff.c **** 				res = dir_remove(&dj_old);			/* Remove old entry */
2680:../fatfs/ff.c **** 				if (res == FR_OK)
2681:../fatfs/ff.c **** 					res = sync(dj_old.fs);
2682:../fatfs/ff.c **** 			}
2683:../fatfs/ff.c **** 		}
2684:../fatfs/ff.c **** 	}
2685:../fatfs/ff.c **** 
2686:../fatfs/ff.c **** 	LEAVE_FF(dj_old.fs, res);
2687:../fatfs/ff.c **** }
 22184              		.loc 1 2687 0
 22185 0acc AC69     		ldr	r4, [r5, #24]
 22186              	.LVL286:
 22187              	.LBB11:
 22188              	.LBB13:
1212:../fatfs/ff.c **** 	mem_set(sfn, ' ', 11);
 22189              		.loc 1 1212 0
 22190 0ace 2021     		movs	r1, #32
 22191 0ad0 2046     		mov	r0, r4
 22192 0ad2 0B22     		movs	r2, #11
 22193 0ad4 FFF79CFA 		bl	mem_set
 22194              	.LVL287:
1213:../fatfs/ff.c **** 	si = i = b = 0; ni = 8;
 22195              		.loc 1 1213 0
 22196 0ad8 0021     		movs	r1, #0
 22197 0ada 0F46     		mov	r7, r1
 22198 0adc 0820     		movs	r0, #8
 22199 0ade 0A46     		mov	r2, r1
 22200              	.LVL288:
 22201              	.L213:
1229:../fatfs/ff.c **** 		c = p[si++];
 22202              		.loc 1 1229 0
 22203 0ae0 F35D     		ldrb	r3, [r6, r7]	@ zero_extendqisi2
 22204              	.LVL289:
 22205 0ae2 0137     		adds	r7, r7, #1
 22206              	.LVL290:
1230:../fatfs/ff.c **** 		if (c < ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 22207              		.loc 1 1230 0
 22208 0ae4 1F2B     		cmp	r3, #31
 22209 0ae6 3BD9     		bls	.L204
 22210 0ae8 2F2B     		cmp	r3, #47
 22211 0aea 3BD0     		beq	.L206
 22212 0aec 5C2B     		cmp	r3, #92
 22213 0aee 39D0     		beq	.L206
1231:../fatfs/ff.c **** 		if (c == '.' || i >= ni) {
 22214              		.loc 1 1231 0
 22215 0af0 2E2B     		cmp	r3, #46
 22216 0af2 01D0     		beq	.L188
 22217 0af4 8142     		cmp	r1, r0
 22218 0af6 0ADB     		blt	.L189
 22219              	.L188:
1232:../fatfs/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 22220              		.loc 1 1232 0
 22221 0af8 0828     		cmp	r0, #8
 22222 0afa 40F08980 		bne	.L209
 22223 0afe 2E2B     		cmp	r3, #46
 22224 0b00 40F08680 		bne	.L209
 22225              	.LVL291:
1234:../fatfs/ff.c **** 			b <<= 2; continue;
 22226              		.loc 1 1234 0
 22227 0b04 9200     		lsls	r2, r2, #2
 22228              	.LVL292:
1233:../fatfs/ff.c **** 			i = 8; ni = 11;
 22229              		.loc 1 1233 0
 22230 0b06 0146     		mov	r1, r0
1234:../fatfs/ff.c **** 			b <<= 2; continue;
 22231              		.loc 1 1234 0
 22232 0b08 D2B2     		uxtb	r2, r2
 22233              	.LVL293:
1233:../fatfs/ff.c **** 			i = 8; ni = 11;
 22234              		.loc 1 1233 0
 22235 0b0a 0330     		adds	r0, r0, #3
 22236 0b0c E8E7     		b	.L213
 22237              	.LVL294:
 22238              	.L189:
1236:../fatfs/ff.c **** 		if (c >= 0x80) {				/* Extended char */
 22239              		.loc 1 1236 0
 22240 0b0e 13F0800F 		tst	r3, #128
 22241 0b12 03D0     		beq	.L191
1238:../fatfs/ff.c **** 			c = cvt[c - 0x80];			/* Convert extend char (SBCS) */
 22242              		.loc 1 1238 0
 22243 0b14 DFF804C1 		ldr	ip, .L215
 22244 0b18 6344     		add	r3, r3, ip
 22245              	.LVL295:
 22246 0b1a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 22247              	.LVL296:
 22248              	.L191:
1253:../fatfs/ff.c **** 			if (chk_chr(" \"*+,[=]|\x7F", c))	/* Reject unallowable chrs for SFN */
 22249              		.loc 1 1253 0
 22250 0b1c DFF800C1 		ldr	ip, .L215+4
 22251              	.LVL297:
 22252              	.L193:
 22253              	.LBB14:
 22254              	.LBB15:
 187:../fatfs/ff.c **** 	while (*str && *str != chr) str++;
 22255              		.loc 1 187 0
 22256 0b20 1CF8018F 		ldrb	r8, [ip, #1]!	@ zero_extendqisi2
 22257 0b24 B8F1000F 		cmp	r8, #0
 22258 0b28 02D0     		beq	.L192
 22259 0b2a 9845     		cmp	r8, r3
 22260 0b2c F8D1     		bne	.L193
 22261 0b2e 6FE0     		b	.L209
 22262              	.L192:
 22263              	.LBE15:
 22264              	.LBE14:
1255:../fatfs/ff.c **** 			if (IsUpper(c)) {
 22265              		.loc 1 1255 0
 22266 0b30 A3F1410C 		sub	ip, r3, #65
 22267 0b34 5FFA8CFC 		uxtb	ip, ip
 22268 0b38 BCF1190F 		cmp	ip, #25
 22269 0b3c 02D8     		bhi	.L194
1256:../fatfs/ff.c **** 				b |= 2;
 22270              		.loc 1 1256 0
 22271 0b3e 42F00202 		orr	r2, r2, #2
 22272              	.LVL298:
 22273 0b42 0AE0     		b	.L195
 22274              	.L194:
1258:../fatfs/ff.c **** 				if (IsLower(c)) {
 22275              		.loc 1 1258 0
 22276 0b44 A3F1610C 		sub	ip, r3, #97
 22277 0b48 5FFA8CFC 		uxtb	ip, ip
 22278 0b4c BCF1190F 		cmp	ip, #25
 22279 0b50 03D8     		bhi	.L195
1259:../fatfs/ff.c **** 					b |= 1; c -= 0x20;
 22280              		.loc 1 1259 0
 22281 0b52 203B     		subs	r3, r3, #32
 22282              	.LVL299:
 22283 0b54 42F00102 		orr	r2, r2, #1
 22284              	.LVL300:
 22285 0b58 DBB2     		uxtb	r3, r3
 22286              	.LVL301:
 22287              	.L195:
1262:../fatfs/ff.c **** 			sfn[i++] = c;
 22288              		.loc 1 1262 0
 22289 0b5a 6354     		strb	r3, [r4, r1]
 22290 0b5c 0131     		adds	r1, r1, #1
 22291              	.LVL302:
 22292 0b5e BFE7     		b	.L213
 22293              	.L204:
1266:../fatfs/ff.c **** 	c = (c < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 22294              		.loc 1 1266 0
 22295 0b60 0423     		movs	r3, #4
 22296              	.LVL303:
 22297 0b62 00E0     		b	.L187
 22298              	.LVL304:
 22299              	.L206:
 22300 0b64 0023     		movs	r3, #0
 22301              	.LVL305:
 22302              	.L187:
1268:../fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 22303              		.loc 1 1268 0
 22304 0b66 0029     		cmp	r1, #0
 22305 0b68 52D0     		beq	.L209
1269:../fatfs/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 22306              		.loc 1 1269 0
 22307 0b6a 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 22308              	.LVL306:
 22309 0b6c E529     		cmp	r1, #229
 22310 0b6e 01D1     		bne	.L196
 22311 0b70 E039     		subs	r1, r1, #224
 22312 0b72 2170     		strb	r1, [r4, #0]
 22313              	.L196:
1271:../fatfs/ff.c **** 	if (ni == 8) b <<= 2;
 22314              		.loc 1 1271 0
 22315 0b74 0828     		cmp	r0, #8
 22316 0b76 01D1     		bne	.L197
 22317 0b78 9200     		lsls	r2, r2, #2
 22318              	.LVL307:
 22319 0b7a D2B2     		uxtb	r2, r2
 22320              	.LVL308:
 22321              	.L197:
1272:../fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 22322              		.loc 1 1272 0
 22323 0b7c 02F00301 		and	r1, r2, #3
 22324 0b80 0129     		cmp	r1, #1
1273:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 22325              		.loc 1 1273 0
 22326 0b82 02F00C02 		and	r2, r2, #12
 22327              	.LVL309:
1272:../fatfs/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Extension has only small capital) */
 22328              		.loc 1 1272 0
 22329 0b86 08BF     		it	eq
 22330 0b88 43F01003 		orreq	r3, r3, #16
 22331              	.LVL310:
1273:../fatfs/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Filename has only small capital) */
 22332              		.loc 1 1273 0
 22333 0b8c 042A     		cmp	r2, #4
 22334 0b8e 08BF     		it	eq
 22335 0b90 43F00803 		orreq	r3, r3, #8
 22336              	.LVL311:
1275:../fatfs/ff.c **** 	sfn[11] = c;		/* Store NT flag, File name is created */
 22337              		.loc 1 1275 0
 22338 0b94 E372     		strb	r3, [r4, #11]
 22339              	.LVL312:
 22340              	.LBE13:
 22341              	.LBE11:
 22342              	.LBB17:
 22343              	.LBB18:
 815:../fatfs/ff.c **** 	res = dir_seek(dj, 0);			/* Rewind directory object */
 22344              		.loc 1 815 0
 22345 0b96 2846     		mov	r0, r5
 22346              	.LVL313:
 22347 0b98 0021     		movs	r1, #0
 22348 0b9a FFF7FBFC 		bl	dir_seek
 22349              	.LVL314:
 22350              	.L214:
 816:../fatfs/ff.c **** 	if (res != FR_OK) return res;
 22351              		.loc 1 816 0
 22352 0b9e 0446     		mov	r4, r0
 22353 0ba0 B8B9     		cbnz	r0, .L200
 822:../fatfs/ff.c **** 		res = move_window(dj->fs, dj->sect);
 22354              		.loc 1 822 0
 22355 0ba2 2868     		ldr	r0, [r5, #0]
 22356              	.LVL315:
 22357 0ba4 2969     		ldr	r1, [r5, #16]
 22358 0ba6 FFF74BFC 		bl	move_window
 22359              	.LVL316:
 823:../fatfs/ff.c **** 		if (res != FR_OK) break;
 22360              		.loc 1 823 0
 22361 0baa 0446     		mov	r4, r0
 22362 0bac 88B9     		cbnz	r0, .L200
 824:../fatfs/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 22363              		.loc 1 824 0
 22364 0bae 6869     		ldr	r0, [r5, #20]
 22365              	.LVL317:
 826:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 22366              		.loc 1 826 0
 22367 0bb0 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 22368 0bb2 6BB1     		cbz	r3, .L210
 854:../fatfs/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 22369              		.loc 1 854 0
 22370 0bb4 C37A     		ldrb	r3, [r0, #11]	@ zero_extendqisi2
 22371 0bb6 13F0080F 		tst	r3, #8
 22372 0bba 04D1     		bne	.L201
 22373 0bbc A969     		ldr	r1, [r5, #24]
 22374 0bbe 0B22     		movs	r2, #11
 22375 0bc0 FFF72CFA 		bl	mem_cmp
 22376              	.LVL318:
 22377 0bc4 28B1     		cbz	r0, .L200
 22378              	.L201:
 857:../fatfs/ff.c **** 		res = dir_next(dj, FALSE);				/* Next entry */
 22379              		.loc 1 857 0
 22380 0bc6 2846     		mov	r0, r5
 22381 0bc8 0021     		movs	r1, #0
 22382 0bca FFF721FE 		bl	dir_next
 22383 0bce E6E7     		b	.L214
 22384              	.LVL319:
 22385              	.L210:
 826:../fatfs/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 22386              		.loc 1 826 0
 22387 0bd0 0424     		movs	r4, #4
 22388              	.LVL320:
 22389              	.L200:
 22390              	.LBE18:
 22391              	.LBE17:
1392:../fatfs/ff.c **** 			last = *(dj->fn+11) & NS_LAST;
 22392              		.loc 1 1392 0
 22393 0bd2 AB69     		ldr	r3, [r5, #24]
 22394 0bd4 DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 22395 0bd6 03F00403 		and	r3, r3, #4
 22396 0bda DBB2     		uxtb	r3, r3
 22397              	.LVL321:
1393:../fatfs/ff.c **** 			if (res != FR_OK) {				/* Could not find the object */
 22398              		.loc 1 1393 0
 22399 0bdc 2CB1     		cbz	r4, .L203
1394:../fatfs/ff.c **** 				if (res == FR_NO_FILE && !last)
 22400              		.loc 1 1394 0
 22401 0bde 042C     		cmp	r4, #4
 22402 0be0 19D1     		bne	.L185
1395:../fatfs/ff.c **** 					res = FR_NO_PATH;
 22403              		.loc 1 1395 0 discriminator 1
 22404 0be2 002B     		cmp	r3, #0
 22405 0be4 08BF     		it	eq
 22406 0be6 0524     		moveq	r4, #5
 22407 0be8 15E0     		b	.L185
 22408              	.L203:
1398:../fatfs/ff.c **** 			if (last) break;				/* Last segment match. Function completed. */
 22409              		.loc 1 1398 0
 22410 0bea A3B9     		cbnz	r3, .L185
1399:../fatfs/ff.c **** 			dir = dj->dir;					/* There is next segment. Follow the sub directory */
 22411              		.loc 1 1399 0
 22412 0bec 6B69     		ldr	r3, [r5, #20]
 22413              	.LVL322:
1400:../fatfs/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
 22414              		.loc 1 1400 0
 22415 0bee DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 22416 0bf0 12F0100F 		tst	r2, #16
 22417 0bf4 0ED0     		beq	.L212
1403:../fatfs/ff.c **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 22418              		.loc 1 1403 0
 22419 0bf6 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 22420 0bf8 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 22421              	.LBB19:
 22422              	.LBB12:
1265:../fatfs/ff.c **** 	*path = &p[si];						/* Rerurn pointer to the next segment */
 22423              		.loc 1 1265 0
 22424 0bfa F619     		adds	r6, r6, r7
 22425              	.LVL323:
 22426              	.LBE12:
 22427              	.LBE19:
1403:../fatfs/ff.c **** 			dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 22428              		.loc 1 1403 0
 22429 0bfc 42EA0122 		orr	r2, r2, r1, lsl #8
 22430 0c00 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 22431 0c02 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 22432 0c04 43EA0123 		orr	r3, r3, r1, lsl #8
 22433 0c08 43EA0243 		orr	r3, r3, r2, lsl #16
 22434 0c0c AB60     		str	r3, [r5, #8]
1404:../fatfs/ff.c **** 		}
 22435              		.loc 1 1404 0
 22436 0c0e 5DE7     		b	.L184
 22437              	.LVL324:
 22438              	.L209:
 22439              	.LBB20:
 22440              	.LBB16:
1268:../fatfs/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject null string */
 22441              		.loc 1 1268 0
 22442 0c10 0624     		movs	r4, #6
 22443              	.LVL325:
 22444 0c12 00E0     		b	.L185
 22445              	.LVL326:
 22446              	.L212:
 22447              	.LBE16:
 22448              	.LBE20:
1401:../fatfs/ff.c **** 				res = FR_NO_PATH; break;
 22449              		.loc 1 1401 0
 22450 0c14 0524     		movs	r4, #5
 22451              	.LVL327:
 22452              	.L185:
1408:../fatfs/ff.c **** }
 22453              		.loc 1 1408 0
 22454 0c16 2046     		mov	r0, r4
 22455 0c18 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22456              	.L216:
 22457              		.align	2
 22458              	.L215:
 22459 0c1c 80FFFFFF 		.word	.LANCHOR0-128
 22460 0c20 FFFFFFFF 		.word	.LC0-1
 22461              		.cfi_endproc
 22462              	.LFE48:
 22464              		.align	1
 22465              		.global	f_mount
 22466              		.thumb
 22467              		.thumb_func
 22469              	f_mount:
 22470              	.LFB52:
1618:../fatfs/ff.c **** {
 22471              		.loc 1 1618 0
 22472              		.cfi_startproc
 22473              		@ args = 0, pretend = 0, frame = 0
 22474              		@ frame_needed = 0, uses_anonymous_args = 0
 22475              		@ link register save eliminated.
 22476              	.LVL328:
1622:../fatfs/ff.c **** 	if (vol >= _DRIVES)				/* Check if the drive number is valid */
 22477              		.loc 1 1622 0
 22478 0c24 48B9     		cbnz	r0, .L221
1624:../fatfs/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 22479              		.loc 1 1624 0
 22480 0c26 064A     		ldr	r2, .L222
 22481 0c28 1368     		ldr	r3, [r2, #0]
 22482              	.LVL329:
1626:../fatfs/ff.c **** 	if (rfs) {
 22483              		.loc 1 1626 0
 22484 0c2a 03B1     		cbz	r3, .L219
1630:../fatfs/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 22485              		.loc 1 1630 0
 22486 0c2c 1870     		strb	r0, [r3, #0]
 22487              	.L219:
1633:../fatfs/ff.c **** 	if (fs) {
 22488              		.loc 1 1633 0
 22489 0c2e 09B1     		cbz	r1, .L220
1634:../fatfs/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 22490              		.loc 1 1634 0
 22491 0c30 0023     		movs	r3, #0
 22492 0c32 0B70     		strb	r3, [r1, #0]
 22493              	.L220:
1639:../fatfs/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 22494              		.loc 1 1639 0
 22495 0c34 1160     		str	r1, [r2, #0]
1641:../fatfs/ff.c **** 	return FR_OK;
 22496              		.loc 1 1641 0
 22497 0c36 0020     		movs	r0, #0
 22498              	.LVL330:
 22499 0c38 7047     		bx	lr
 22500              	.LVL331:
 22501              	.L221:
1623:../fatfs/ff.c **** 		return FR_INVALID_DRIVE;
 22502              		.loc 1 1623 0
 22503 0c3a 0B20     		movs	r0, #11
 22504              	.LVL332:
1642:../fatfs/ff.c **** }
 22505              		.loc 1 1642 0
 22506 0c3c 7047     		bx	lr
 22507              	.L223:
 22508 0c3e 00BF     		.align	2
 22509              	.L222:
 22510 0c40 00000000 		.word	.LANCHOR1
 22511              		.cfi_endproc
 22512              	.LFE52:
 22514              		.align	1
 22515              		.global	f_open
 22516              		.thumb
 22517              		.thumb_func
 22519              	f_open:
 22520              	.LFB53:
1656:../fatfs/ff.c **** {
 22521              		.loc 1 1656 0
 22522              		.cfi_startproc
 22523              		@ args = 0, pretend = 0, frame = 48
 22524              		@ frame_needed = 0, uses_anonymous_args = 0
 22525              	.LVL333:
 22526 0c44 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 22527              	.LCFI17:
 22528              		.cfi_def_cfa_offset 24
 22529 0c48 8CB0     		sub	sp, sp, #48
 22530              	.LCFI18:
 22531              		.cfi_def_cfa_offset 72
1656:../fatfs/ff.c **** {
 22532              		.loc 1 1656 0
 22533 0c4a 0446     		mov	r4, r0
 22534              		.cfi_offset 14, -4
 22535              		.cfi_offset 8, -8
 22536              		.cfi_offset 7, -12
 22537              		.cfi_offset 6, -16
 22538              		.cfi_offset 5, -20
 22539              		.cfi_offset 4, -24
1663:../fatfs/ff.c **** 	fp->fs = NULL;		/* Clear file object */
 22540              		.loc 1 1663 0
 22541 0c4c 0023     		movs	r3, #0
1656:../fatfs/ff.c **** {
 22542              		.loc 1 1656 0
 22543 0c4e 0CA8     		add	r0, sp, #48
 22544              	.LVL334:
1665:../fatfs/ff.c **** 	mode &= (FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW);
 22545              		.loc 1 1665 0
 22546 0c50 02F01F05 		and	r5, r2, #31
 22547              	.LVL335:
1656:../fatfs/ff.c **** {
 22548              		.loc 1 1656 0
 22549 0c54 40F82C1D 		str	r1, [r0, #-44]!
1663:../fatfs/ff.c **** 	fp->fs = NULL;		/* Clear file object */
 22550              		.loc 1 1663 0
 22551 0c58 2360     		str	r3, [r4, #0]
1666:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, (BYTE)(mode & (FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_C
 22552              		.loc 1 1666 0
 22553 0c5a 02A9     		add	r1, sp, #8
 22554              	.LVL336:
 22555 0c5c 05F01E02 		and	r2, r5, #30
 22556 0c60 FFF790FA 		bl	auto_mount
 22557              	.LVL337:
1671:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 22558              		.loc 1 1671 0
 22559 0c64 0028     		cmp	r0, #0
 22560 0c66 40F09780 		bne	.L225
1672:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 22561              		.loc 1 1672 0
 22562 0c6a 09AB     		add	r3, sp, #36
1673:../fatfs/ff.c **** 	res = follow_path(&dj, path);	/* Follow the file path */
 22563              		.loc 1 1673 0
 22564 0c6c 02A8     		add	r0, sp, #8
 22565              	.LVL338:
 22566 0c6e 0199     		ldr	r1, [sp, #4]
1672:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 22567              		.loc 1 1672 0
 22568 0c70 0893     		str	r3, [sp, #32]
1673:../fatfs/ff.c **** 	res = follow_path(&dj, path);	/* Follow the file path */
 22569              		.loc 1 1673 0
 22570 0c72 FFF715FF 		bl	follow_path
 22571              	.LVL339:
1677:../fatfs/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 22572              		.loc 1 1677 0
 22573 0c76 15F01C0F 		tst	r5, #28
 22574 0c7a 54D0     		beq	.L226
 22575              	.LBB21:
1680:../fatfs/ff.c **** 		if (res != FR_OK) {			/* No file, create new */
 22576              		.loc 1 1680 0
 22577 0c7c 60B1     		cbz	r0, .L227
1681:../fatfs/ff.c **** 			if (res == FR_NO_FILE)	/* There is no file to open, create a new entry */
 22578              		.loc 1 1681 0
 22579 0c7e 0428     		cmp	r0, #4
 22580 0c80 40F08A80 		bne	.L225
1682:../fatfs/ff.c **** 				res = dir_register(&dj);
 22581              		.loc 1 1682 0
 22582 0c84 02A8     		add	r0, sp, #8
 22583              	.LVL340:
 22584 0c86 FFF747FE 		bl	dir_register
 22585              	.LVL341:
1683:../fatfs/ff.c **** 			if (res != FR_OK) LEAVE_FF(dj.fs, res);
 22586              		.loc 1 1683 0
 22587 0c8a 0028     		cmp	r0, #0
 22588 0c8c 40F08480 		bne	.L225
1684:../fatfs/ff.c **** 			mode |= FA_CREATE_ALWAYS;
 22589              		.loc 1 1684 0
 22590 0c90 45F00805 		orr	r5, r5, #8
 22591              	.LVL342:
1685:../fatfs/ff.c **** 			dir = dj.dir;			/* Created entry (SFN entry) */
 22592              		.loc 1 1685 0
 22593 0c94 079E     		ldr	r6, [sp, #28]
 22594              	.LVL343:
 22595 0c96 32E0     		b	.L228
 22596              	.LVL344:
 22597              	.L227:
1688:../fatfs/ff.c **** 			if (mode & FA_CREATE_NEW)			/* Cannot create new */
 22598              		.loc 1 1688 0
 22599 0c98 15F0040F 		tst	r5, #4
 22600 0c9c 77D1     		bne	.L232
1690:../fatfs/ff.c **** 			dir = dj.dir;
 22601              		.loc 1 1690 0
 22602 0c9e 079E     		ldr	r6, [sp, #28]
 22603              	.LVL345:
1691:../fatfs/ff.c **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 22604              		.loc 1 1691 0
 22605 0ca0 002E     		cmp	r6, #0
 22606 0ca2 78D0     		beq	.L237
1691:../fatfs/ff.c **** 			if (!dir || (dir[DIR_Attr] & (AM_RDO | AM_DIR)))	/* Cannot overwrite it (R/O or DIR) */
 22607              		.loc 1 1691 0 is_stmt 0 discriminator 1
 22608 0ca4 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 22609 0ca6 13F01103 		ands	r3, r3, #17
 22610 0caa 74D1     		bne	.L237
1693:../fatfs/ff.c **** 			if (mode & FA_CREATE_ALWAYS) {		/* Resize it to zero on over write mode */
 22611              		.loc 1 1693 0 is_stmt 1
 22612 0cac 15F0080F 		tst	r5, #8
 22613 0cb0 25D0     		beq	.L228
1694:../fatfs/ff.c **** 				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start clust
 22614              		.loc 1 1694 0
 22615 0cb2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 22616 0cb4 777D     		ldrb	r7, [r6, #21]	@ zero_extendqisi2
 22617 0cb6 F17E     		ldrb	r1, [r6, #27]	@ zero_extendqisi2
 22618 0cb8 42EA0727 		orr	r7, r2, r7, lsl #8
 22619 0cbc B27E     		ldrb	r2, [r6, #26]	@ zero_extendqisi2
1695:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, 0);	/* cluster = 0 */
 22620              		.loc 1 1695 0
 22621 0cbe 3375     		strb	r3, [r6, #20]
 22622 0cc0 7375     		strb	r3, [r6, #21]
1696:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, 0);
 22623              		.loc 1 1696 0
 22624 0cc2 B376     		strb	r3, [r6, #26]
 22625 0cc4 F376     		strb	r3, [r6, #27]
1697:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, 0);	/* size = 0 */
 22626              		.loc 1 1697 0
 22627 0cc6 3377     		strb	r3, [r6, #28]
 22628 0cc8 7377     		strb	r3, [r6, #29]
 22629 0cca B377     		strb	r3, [r6, #30]
 22630 0ccc F377     		strb	r3, [r6, #31]
1698:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 22631              		.loc 1 1698 0
 22632 0cce 0298     		ldr	r0, [sp, #8]
 22633              	.LVL346:
1694:../fatfs/ff.c **** 				cl = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);	/* Get start clust
 22634              		.loc 1 1694 0
 22635 0cd0 42EA0122 		orr	r2, r2, r1, lsl #8
 22636              	.LVL347:
1698:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 22637              		.loc 1 1698 0
 22638 0cd4 0123     		movs	r3, #1
1700:../fatfs/ff.c **** 				if (cl) {
 22639              		.loc 1 1700 0
 22640 0cd6 52EA0747 		orrs	r7, r2, r7, lsl #16
 22641              	.LVL348:
1698:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 22642              		.loc 1 1698 0
 22643 0cda 0371     		strb	r3, [r0, #4]
1699:../fatfs/ff.c **** 				ps = dj.fs->winsect;			/* Remove the cluster chain */
 22644              		.loc 1 1699 0
 22645 0cdc D0F82C80 		ldr	r8, [r0, #44]
 22646              	.LVL349:
1700:../fatfs/ff.c **** 				if (cl) {
 22647              		.loc 1 1700 0
 22648 0ce0 07D0     		beq	.L229
1701:../fatfs/ff.c **** 					res = remove_chain(dj.fs, cl);
 22649              		.loc 1 1701 0
 22650 0ce2 3946     		mov	r1, r7
 22651 0ce4 FFF767FD 		bl	remove_chain
 22652              	.LVL350:
1702:../fatfs/ff.c **** 					if (res) LEAVE_FF(dj.fs, res);
 22653              		.loc 1 1702 0
 22654 0ce8 0028     		cmp	r0, #0
 22655 0cea 55D1     		bne	.L225
1703:../fatfs/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 22656              		.loc 1 1703 0
 22657 0cec 029B     		ldr	r3, [sp, #8]
 22658 0cee 013F     		subs	r7, r7, #1
 22659              	.LVL351:
 22660 0cf0 DF60     		str	r7, [r3, #12]
 22661              	.LVL352:
 22662              	.L229:
1705:../fatfs/ff.c **** 				res = move_window(dj.fs, ps);
 22663              		.loc 1 1705 0
 22664 0cf2 0298     		ldr	r0, [sp, #8]
 22665 0cf4 4146     		mov	r1, r8
 22666 0cf6 FFF7A3FB 		bl	move_window
 22667              	.LVL353:
1706:../fatfs/ff.c **** 				if (res != FR_OK) LEAVE_FF(dj.fs, res);
 22668              		.loc 1 1706 0
 22669 0cfa 0028     		cmp	r0, #0
 22670 0cfc 4CD1     		bne	.L225
 22671              	.LVL354:
 22672              	.L228:
1709:../fatfs/ff.c **** 		if (mode & FA_CREATE_ALWAYS) {
 22673              		.loc 1 1709 0
 22674 0cfe 15F0080F 		tst	r5, #8
 22675 0d02 1FD0     		beq	.L230
1710:../fatfs/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 22676              		.loc 1 1710 0
 22677 0d04 0023     		movs	r3, #0
 22678 0d06 F372     		strb	r3, [r6, #11]
1711:../fatfs/ff.c **** 			ps = get_fattime();
 22679              		.loc 1 1711 0
 22680 0d08 FFF7FEFF 		bl	get_fattime
 22681              	.LVL355:
1712:../fatfs/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, ps);		/* Created time */
 22682              		.loc 1 1712 0
 22683 0d0c 030A     		lsrs	r3, r0, #8
 22684 0d0e B073     		strb	r0, [r6, #14]
 22685 0d10 F373     		strb	r3, [r6, #15]
 22686 0d12 030C     		lsrs	r3, r0, #16
 22687 0d14 000E     		lsrs	r0, r0, #24
 22688              	.LVL356:
 22689 0d16 3374     		strb	r3, [r6, #16]
 22690 0d18 7074     		strb	r0, [r6, #17]
1713:../fatfs/ff.c **** 			dj.fs->wflag = 1;
 22691              		.loc 1 1713 0
 22692 0d1a 029B     		ldr	r3, [sp, #8]
 22693 0d1c 0122     		movs	r2, #1
 22694 0d1e 1A71     		strb	r2, [r3, #4]
1714:../fatfs/ff.c **** 			mode |= FA__WRITTEN;				/* Set file changed flag */
 22695              		.loc 1 1714 0
 22696 0d20 45F02005 		orr	r5, r5, #32
 22697              	.LVL357:
 22698 0d24 0EE0     		b	.L230
 22699              	.LVL358:
 22700              	.L226:
 22701              	.LBE21:
1720:../fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);	/* Follow failed */
 22702              		.loc 1 1720 0
 22703 0d26 0028     		cmp	r0, #0
 22704 0d28 36D1     		bne	.L225
1721:../fatfs/ff.c **** 		dir = dj.dir;
 22705              		.loc 1 1721 0
 22706 0d2a 079E     		ldr	r6, [sp, #28]
 22707              	.LVL359:
1722:../fatfs/ff.c **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 22708              		.loc 1 1722 0
 22709 0d2c 002E     		cmp	r6, #0
 22710 0d2e 30D0     		beq	.L236
1722:../fatfs/ff.c **** 		if (!dir || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
 22711              		.loc 1 1722 0 is_stmt 0 discriminator 1
 22712 0d30 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
 22713 0d32 13F0100F 		tst	r3, #16
 22714 0d36 2CD1     		bne	.L236
1725:../fatfs/ff.c **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 22715              		.loc 1 1725 0 is_stmt 1
 22716 0d38 15F0020F 		tst	r5, #2
 22717 0d3c 02D0     		beq	.L230
1725:../fatfs/ff.c **** 		if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 22718              		.loc 1 1725 0 is_stmt 0 discriminator 1
 22719 0d3e 13F0010F 		tst	r3, #1
 22720 0d42 28D1     		bne	.L237
 22721              	.LVL360:
 22722              	.L230:
1728:../fatfs/ff.c **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 22723              		.loc 1 1728 0 is_stmt 1
 22724 0d44 029B     		ldr	r3, [sp, #8]
 22725 0d46 DA6A     		ldr	r2, [r3, #44]
1731:../fatfs/ff.c **** 	fp->flag = mode;					/* File access mode */
 22726              		.loc 1 1731 0
 22727 0d48 A571     		strb	r5, [r4, #6]
1728:../fatfs/ff.c **** 	fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 22728              		.loc 1 1728 0
 22729 0d4a E261     		str	r2, [r4, #28]
1729:../fatfs/ff.c **** 	fp->dir_ptr = dj.dir;
 22730              		.loc 1 1729 0
 22731 0d4c 079A     		ldr	r2, [sp, #28]
 22732 0d4e 2262     		str	r2, [r4, #32]
1733:../fatfs/ff.c **** 		((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 22733              		.loc 1 1733 0
 22734 0d50 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 22735 0d52 717D     		ldrb	r1, [r6, #21]	@ zero_extendqisi2
 22736 0d54 F07E     		ldrb	r0, [r6, #27]	@ zero_extendqisi2
 22737 0d56 42EA0121 		orr	r1, r2, r1, lsl #8
 22738 0d5a B27E     		ldrb	r2, [r6, #26]	@ zero_extendqisi2
 22739 0d5c 42EA0022 		orr	r2, r2, r0, lsl #8
 22740 0d60 42EA0142 		orr	r2, r2, r1, lsl #16
1732:../fatfs/ff.c **** 	fp->org_clust =						/* File start cluster */
 22741              		.loc 1 1732 0
 22742 0d64 2261     		str	r2, [r4, #16]
1734:../fatfs/ff.c **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 22743              		.loc 1 1734 0
 22744 0d66 B27F     		ldrb	r2, [r6, #30]	@ zero_extendqisi2
 22745 0d68 F17F     		ldrb	r1, [r6, #31]	@ zero_extendqisi2
 22746 0d6a 1204     		lsls	r2, r2, #16
 22747 0d6c 42EA0162 		orr	r2, r2, r1, lsl #24
 22748 0d70 317F     		ldrb	r1, [r6, #28]	@ zero_extendqisi2
1735:../fatfs/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 22749              		.loc 1 1735 0
 22750 0d72 0020     		movs	r0, #0
1734:../fatfs/ff.c **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 22751              		.loc 1 1734 0
 22752 0d74 0A43     		orrs	r2, r2, r1
 22753 0d76 717F     		ldrb	r1, [r6, #29]	@ zero_extendqisi2
1737:../fatfs/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 22754              		.loc 1 1737 0
 22755 0d78 2360     		str	r3, [r4, #0]
1734:../fatfs/ff.c **** 	fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 22756              		.loc 1 1734 0
 22757 0d7a 42EA0122 		orr	r2, r2, r1, lsl #8
 22758 0d7e E260     		str	r2, [r4, #12]
1735:../fatfs/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 22759              		.loc 1 1735 0
 22760 0d80 FF22     		movs	r2, #255
 22761 0d82 E271     		strb	r2, [r4, #7]
1737:../fatfs/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 22762              		.loc 1 1737 0
 22763 0d84 DB88     		ldrh	r3, [r3, #6]
1735:../fatfs/ff.c **** 	fp->fptr = 0; fp->csect = 255;		/* File pointer */
 22764              		.loc 1 1735 0
 22765 0d86 A060     		str	r0, [r4, #8]
1736:../fatfs/ff.c **** 	fp->dsect = 0;
 22766              		.loc 1 1736 0
 22767 0d88 A061     		str	r0, [r4, #24]
1737:../fatfs/ff.c **** 	fp->fs = dj.fs; fp->id = dj.fs->id;	/* Owner file system object of the file */
 22768              		.loc 1 1737 0
 22769 0d8a A380     		strh	r3, [r4, #4]	@ movhi
1739:../fatfs/ff.c **** 	LEAVE_FF(dj.fs, FR_OK);
 22770              		.loc 1 1739 0
 22771 0d8c 04E0     		b	.L225
 22772              	.LVL361:
 22773              	.L232:
 22774              	.LBB22:
1689:../fatfs/ff.c **** 				LEAVE_FF(dj.fs, FR_EXIST);
 22775              		.loc 1 1689 0
 22776 0d8e 0820     		movs	r0, #8
 22777              	.LVL362:
 22778 0d90 02E0     		b	.L225
 22779              	.LVL363:
 22780              	.L236:
 22781              	.LBE22:
1723:../fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_NO_FILE);
 22782              		.loc 1 1723 0
 22783 0d92 0420     		movs	r0, #4
 22784              	.LVL364:
 22785 0d94 00E0     		b	.L225
 22786              	.LVL365:
 22787              	.L237:
1726:../fatfs/ff.c **** 			LEAVE_FF(dj.fs, FR_DENIED);
 22788              		.loc 1 1726 0
 22789 0d96 0720     		movs	r0, #7
 22790              	.LVL366:
 22791              	.L225:
1740:../fatfs/ff.c **** }
 22792              		.loc 1 1740 0
 22793 0d98 0CB0     		add	sp, sp, #48
 22794 0d9a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 22795              		.cfi_endproc
 22796              	.LFE53:
 22798              		.align	1
 22799              		.global	f_read
 22800              		.thumb
 22801              		.thumb_func
 22803              	f_read:
 22804              	.LFB54:
1755:../fatfs/ff.c **** {
 22805              		.loc 1 1755 0
 22806              		.cfi_startproc
 22807              		@ args = 0, pretend = 0, frame = 0
 22808              		@ frame_needed = 0, uses_anonymous_args = 0
 22809              	.LVL367:
 22810 0d9e 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22811              	.LCFI19:
 22812              		.cfi_def_cfa_offset 40
1755:../fatfs/ff.c **** {
 22813              		.loc 1 1755 0
 22814 0da2 0446     		mov	r4, r0
 22815              		.cfi_offset 14, -4
 22816              		.cfi_offset 11, -8
 22817              		.cfi_offset 10, -12
 22818              		.cfi_offset 9, -16
 22819              		.cfi_offset 8, -20
 22820              		.cfi_offset 7, -24
 22821              		.cfi_offset 6, -28
 22822              		.cfi_offset 5, -32
 22823              		.cfi_offset 4, -36
 22824              		.cfi_offset 3, -40
 22825 0da4 9A46     		mov	sl, r3
1762:../fatfs/ff.c **** 	*br = 0;
 22826              		.loc 1 1762 0
 22827 0da6 0023     		movs	r3, #0
 22828              	.LVL368:
1755:../fatfs/ff.c **** {
 22829              		.loc 1 1755 0
 22830 0da8 8846     		mov	r8, r1
 22831              	.LVL369:
1762:../fatfs/ff.c **** 	*br = 0;
 22832              		.loc 1 1762 0
 22833 0daa CAF80030 		str	r3, [sl, #0]
1764:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 22834              		.loc 1 1764 0
 22835 0dae 0068     		ldr	r0, [r0, #0]
 22836              	.LVL370:
 22837 0db0 A188     		ldrh	r1, [r4, #4]
 22838              	.LVL371:
1755:../fatfs/ff.c **** {
 22839              		.loc 1 1755 0
 22840 0db2 1646     		mov	r6, r2
1764:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 22841              		.loc 1 1764 0
 22842 0db4 FFF7A2F9 		bl	validate
 22843              	.LVL372:
1765:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 22844              		.loc 1 1765 0
 22845 0db8 0546     		mov	r5, r0
 22846 0dba 0028     		cmp	r0, #0
 22847 0dbc 40F0AA80 		bne	.L239
1766:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 22848              		.loc 1 1766 0
 22849 0dc0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22850 0dc2 13F0800F 		tst	r3, #128
 22851 0dc6 40F0A280 		bne	.L257
1768:../fatfs/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 22852              		.loc 1 1768 0
 22853 0dca 13F0010F 		tst	r3, #1
 22854 0dce 00F0A080 		beq	.L258
 22855              	.LVL373:
1770:../fatfs/ff.c **** 	remain = fp->fsize - fp->fptr;
 22856              		.loc 1 1770 0
 22857 0dd2 E268     		ldr	r2, [r4, #12]
 22858 0dd4 A368     		ldr	r3, [r4, #8]
 22859 0dd6 C3EB0209 		rsb	r9, r3, r2
1759:../fatfs/ff.c **** 	BYTE *rbuff = buff;
 22860              		.loc 1 1759 0
 22861 0dda 4E45     		cmp	r6, r9
 22862 0ddc 38BF     		it	cc
 22863 0dde B146     		movcc	r9, r6
 22864 0de0 90E0     		b	.L240
 22865              	.LVL374:
 22866              	.L256:
1775:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 22867              		.loc 1 1775 0
 22868 0de2 A268     		ldr	r2, [r4, #8]
 22869 0de4 D305     		lsls	r3, r2, #23
 22870 0de6 DB0D     		lsrs	r3, r3, #23
 22871 0de8 002B     		cmp	r3, #0
 22872 0dea 71D1     		bne	.L241
1776:../fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 22873              		.loc 1 1776 0
 22874 0dec 2068     		ldr	r0, [r4, #0]
 22875 0dee E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 22876 0df0 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 22877 0df2 9942     		cmp	r1, r3
 22878 0df4 0DD3     		bcc	.L242
1778:../fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 22879              		.loc 1 1778 0
 22880 0df6 0AB9     		cbnz	r2, .L243
1778:../fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 22881              		.loc 1 1778 0 is_stmt 0 discriminator 1
 22882 0df8 2069     		ldr	r0, [r4, #16]
 22883 0dfa 02E0     		b	.L244
 22884              	.L243:
1778:../fatfs/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 22885              		.loc 1 1778 0 discriminator 2
 22886 0dfc 6169     		ldr	r1, [r4, #20]
 22887 0dfe FFF75DFB 		bl	get_fat
 22888              	.L244:
 22889              	.LVL375:
1779:../fatfs/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 22890              		.loc 1 1779 0 is_stmt 1
 22891 0e02 0128     		cmp	r0, #1
 22892 0e04 0CD9     		bls	.L259
 22893              	.L245:
1780:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 22894              		.loc 1 1780 0
 22895 0e06 B0F1FF3F 		cmp	r0, #-1
 22896 0e0a 57D0     		beq	.L260
 22897              	.L246:
1782:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
 22898              		.loc 1 1782 0
 22899 0e0c 0023     		movs	r3, #0
1781:../fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
 22900              		.loc 1 1781 0
 22901 0e0e 6061     		str	r0, [r4, #20]
1782:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector offset in the cluster */
 22902              		.loc 1 1782 0
 22903 0e10 E371     		strb	r3, [r4, #7]
 22904              	.LVL376:
 22905              	.L242:
1784:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 22906              		.loc 1 1784 0
 22907 0e12 D4F800B0 		ldr	fp, [r4, #0]
 22908 0e16 6169     		ldr	r1, [r4, #20]
 22909 0e18 5846     		mov	r0, fp
 22910 0e1a FFF70CF9 		bl	clust2sect
 22911              	.LVL377:
1785:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 22912              		.loc 1 1785 0
 22913 0e1e 20B9     		cbnz	r0, .L247
 22914              	.LVL378:
 22915              	.L259:
1785:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 22916              		.loc 1 1785 0 is_stmt 0 discriminator 1
 22917 0e20 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22918 0e22 63F07F03 		orn	r3, r3, #127
 22919 0e26 A371     		strb	r3, [r4, #6]
 22920 0e28 71E0     		b	.L257
 22921              	.LVL379:
 22922              	.L247:
1786:../fatfs/ff.c **** 			sect += fp->csect;
 22923              		.loc 1 1786 0 is_stmt 1
 22924 0e2a E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
1788:../fatfs/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
 22925              		.loc 1 1788 0
 22926 0e2c 5FEA5926 		lsrs	r6, r9, #9
1786:../fatfs/ff.c **** 			sect += fp->csect;
 22927              		.loc 1 1786 0
 22928 0e30 00EB0307 		add	r7, r0, r3
 22929              	.LVL380:
1788:../fatfs/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
 22930              		.loc 1 1788 0
 22931 0e34 25D0     		beq	.L248
1789:../fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 22932              		.loc 1 1789 0
 22933 0e36 9BF80220 		ldrb	r2, [fp, #2]	@ zero_extendqisi2
 22934 0e3a F118     		adds	r1, r6, r3
 22935 0e3c 9142     		cmp	r1, r2
1790:../fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
 22936              		.loc 1 1790 0
 22937 0e3e 88BF     		it	hi
 22938 0e40 C3EB0206 		rsbhi	r6, r3, r2
 22939              	.LVL381:
1791:../fatfs/ff.c **** 				if (disk_read(fp->fs->drive, rbuff, sect, (BYTE)cc) != RES_OK)
 22940              		.loc 1 1791 0
 22941 0e44 F3B2     		uxtb	r3, r6
 22942 0e46 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 22943 0e4a 4146     		mov	r1, r8
 22944 0e4c 3A46     		mov	r2, r7
 22945 0e4e FFF7FEFF 		bl	disk_read
 22946 0e52 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22947 0e54 0028     		cmp	r0, #0
 22948 0e56 32D1     		bne	.L261
 22949              	.L250:
1798:../fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with ca
 22950              		.loc 1 1798 0
 22951 0e58 13F0400F 		tst	r3, #64
 22952 0e5c 0CD0     		beq	.L251
1798:../fatfs/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)	/* Replace one of the read sectors with ca
 22953              		.loc 1 1798 0 is_stmt 0 discriminator 1
 22954 0e5e A369     		ldr	r3, [r4, #24]
 22955 0e60 DF1B     		subs	r7, r3, r7
 22956              	.LVL382:
 22957 0e62 B742     		cmp	r7, r6
 22958 0e64 08D2     		bcs	.L251
1799:../fatfs/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 22959              		.loc 1 1799 0 is_stmt 1
 22960 0e66 7F02     		lsls	r7, r7, #9
 22961 0e68 08EB0700 		add	r0, r8, r7
 22962 0e6c 04F12401 		add	r1, r4, #36
 22963 0e70 4FF40072 		mov	r2, #512
 22964 0e74 FFF7C4F8 		bl	mem_cpy
 22965              	.L251:
1802:../fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 22966              		.loc 1 1802 0
 22967 0e78 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 22968 0e7a F318     		adds	r3, r6, r3
 22969 0e7c E371     		strb	r3, [r4, #7]
1803:../fatfs/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 22970              		.loc 1 1803 0
 22971 0e7e 7602     		lsls	r6, r6, #9
 22972              	.LVL383:
1804:../fatfs/ff.c **** 				continue;
 22973              		.loc 1 1804 0
 22974 0e80 35E0     		b	.L252
 22975              	.LVL384:
 22976              	.L248:
1808:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Write sector I/O buffer if needed */
 22977              		.loc 1 1808 0
 22978 0e82 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22979 0e84 13F0400F 		tst	r3, #64
 22980 0e88 0CD0     		beq	.L253
1809:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 22981              		.loc 1 1809 0
 22982 0e8a 0123     		movs	r3, #1
 22983 0e8c 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 22984 0e90 04F12401 		add	r1, r4, #36
 22985 0e94 A269     		ldr	r2, [r4, #24]
 22986 0e96 FFF7FEFF 		bl	disk_write
 22987 0e9a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 22988 0e9c 78B9     		cbnz	r0, .L261
 22989              	.L254:
1811:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 22990              		.loc 1 1811 0
 22991 0e9e 23F04003 		bic	r3, r3, #64
 22992 0ea2 A371     		strb	r3, [r4, #6]
 22993              	.L253:
1814:../fatfs/ff.c **** 			if (fp->dsect != sect) {			/* Fill sector buffer with file data */
 22994              		.loc 1 1814 0
 22995 0ea4 A369     		ldr	r3, [r4, #24]
 22996 0ea6 BB42     		cmp	r3, r7
 22997 0ea8 0ED0     		beq	.L255
1815:../fatfs/ff.c **** 				if (disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 22998              		.loc 1 1815 0
 22999 0eaa 2146     		mov	r1, r4
 23000 0eac 51F8243B 		ldr	r3, [r1], #36
 23001 0eb0 3A46     		mov	r2, r7
 23002 0eb2 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 23003 0eb4 0123     		movs	r3, #1
 23004 0eb6 FFF7FEFF 		bl	disk_read
 23005 0eba 28B1     		cbz	r0, .L255
 23006              	.LVL385:
 23007              	.L260:
1816:../fatfs/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 23008              		.loc 1 1816 0
 23009 0ebc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23010              	.L261:
 23011 0ebe 63F07F03 		orn	r3, r3, #127
 23012 0ec2 A371     		strb	r3, [r4, #6]
 23013 0ec4 0125     		movs	r5, #1
 23014 0ec6 25E0     		b	.L239
 23015              	.LVL386:
 23016              	.L255:
1820:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
 23017              		.loc 1 1820 0
 23018 0ec8 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
1819:../fatfs/ff.c **** 			fp->dsect = sect;
 23019              		.loc 1 1819 0
 23020 0eca A761     		str	r7, [r4, #24]
1820:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
 23021              		.loc 1 1820 0
 23022 0ecc 0133     		adds	r3, r3, #1
 23023 0ece E371     		strb	r3, [r4, #7]
 23024              	.LVL387:
 23025              	.L241:
1822:../fatfs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 23026              		.loc 1 1822 0
 23027 0ed0 A368     		ldr	r3, [r4, #8]
1829:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 23028              		.loc 1 1829 0
 23029 0ed2 04F12401 		add	r1, r4, #36
1822:../fatfs/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 23030              		.loc 1 1822 0
 23031 0ed6 DB05     		lsls	r3, r3, #23
 23032 0ed8 DB0D     		lsrs	r3, r3, #23
 23033 0eda C3F50076 		rsb	r6, r3, #512
 23034              	.LVL388:
 23035 0ede B145     		cmp	r9, r6
 23036 0ee0 38BF     		it	cc
 23037 0ee2 4E46     		movcc	r6, r9
 23038              	.LVL389:
1829:../fatfs/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 23039              		.loc 1 1829 0
 23040 0ee4 4046     		mov	r0, r8
 23041 0ee6 C918     		adds	r1, r1, r3
 23042 0ee8 3246     		mov	r2, r6
 23043 0eea FFF789F8 		bl	mem_cpy
 23044              	.L252:
1774:../fatfs/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 23045              		.loc 1 1774 0
 23046 0eee A368     		ldr	r3, [r4, #8]
 23047 0ef0 B044     		add	r8, r8, r6
 23048              	.LVL390:
 23049 0ef2 9B19     		adds	r3, r3, r6
 23050 0ef4 A360     		str	r3, [r4, #8]
 23051 0ef6 DAF80030 		ldr	r3, [sl, #0]
 23052 0efa C6EB0909 		rsb	r9, r6, r9
 23053              	.LVL391:
 23054 0efe 9B19     		adds	r3, r3, r6
 23055 0f00 CAF80030 		str	r3, [sl, #0]
 23056              	.LVL392:
 23057              	.L240:
1773:../fatfs/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
 23058              		.loc 1 1773 0 discriminator 1
 23059 0f04 B9F1000F 		cmp	r9, #0
 23060 0f08 7FF46BAF 		bne	.L256
 23061 0f0c 02E0     		b	.L239
 23062              	.LVL393:
 23063              	.L257:
1767:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 23064              		.loc 1 1767 0
 23065 0f0e 0225     		movs	r5, #2
 23066 0f10 00E0     		b	.L239
 23067              	.LVL394:
 23068              	.L258:
1769:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 23069              		.loc 1 1769 0
 23070 0f12 0725     		movs	r5, #7
 23071              	.LVL395:
 23072              	.L239:
1834:../fatfs/ff.c **** }
 23073              		.loc 1 1834 0
 23074 0f14 2846     		mov	r0, r5
 23075 0f16 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23076              		.cfi_endproc
 23077              	.LFE54:
 23079              		.align	1
 23080              		.global	f_write
 23081              		.thumb
 23082              		.thumb_func
 23084              	f_write:
 23085              	.LFB55:
1850:../fatfs/ff.c **** {
 23086              		.loc 1 1850 0
 23087              		.cfi_startproc
 23088              		@ args = 0, pretend = 0, frame = 0
 23089              		@ frame_needed = 0, uses_anonymous_args = 0
 23090              	.LVL396:
 23091 0f1a 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23092              	.LCFI20:
 23093              		.cfi_def_cfa_offset 40
1850:../fatfs/ff.c **** {
 23094              		.loc 1 1850 0
 23095 0f1e 0446     		mov	r4, r0
 23096              		.cfi_offset 14, -4
 23097              		.cfi_offset 11, -8
 23098              		.cfi_offset 10, -12
 23099              		.cfi_offset 9, -16
 23100              		.cfi_offset 8, -20
 23101              		.cfi_offset 7, -24
 23102              		.cfi_offset 6, -28
 23103              		.cfi_offset 5, -32
 23104              		.cfi_offset 4, -36
 23105              		.cfi_offset 3, -40
 23106 0f20 9A46     		mov	sl, r3
1857:../fatfs/ff.c **** 	*bw = 0;
 23107              		.loc 1 1857 0
 23108 0f22 0023     		movs	r3, #0
 23109              	.LVL397:
1850:../fatfs/ff.c **** {
 23110              		.loc 1 1850 0
 23111 0f24 8946     		mov	r9, r1
 23112              	.LVL398:
1857:../fatfs/ff.c **** 	*bw = 0;
 23113              		.loc 1 1857 0
 23114 0f26 CAF80030 		str	r3, [sl, #0]
1859:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 23115              		.loc 1 1859 0
 23116 0f2a 0068     		ldr	r0, [r0, #0]
 23117              	.LVL399:
 23118 0f2c A188     		ldrh	r1, [r4, #4]
 23119              	.LVL400:
1850:../fatfs/ff.c **** {
 23120              		.loc 1 1850 0
 23121 0f2e 1646     		mov	r6, r2
1859:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 23122              		.loc 1 1859 0
 23123 0f30 FFF7E4F8 		bl	validate
 23124              	.LVL401:
1860:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 23125              		.loc 1 1860 0
 23126 0f34 0546     		mov	r5, r0
 23127 0f36 0028     		cmp	r0, #0
 23128 0f38 40F0C180 		bne	.L263
1861:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 23129              		.loc 1 1861 0
 23130 0f3c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23131 0f3e 13F0800F 		tst	r3, #128
 23132 0f42 48D1     		bne	.L289
1863:../fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 23133              		.loc 1 1863 0
 23134 0f44 13F0020F 		tst	r3, #2
 23135 0f48 00F0B880 		beq	.L286
1865:../fatfs/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 23136              		.loc 1 1865 0
 23137 0f4c E368     		ldr	r3, [r4, #12]
 23138 0f4e DE42     		cmn	r6, r3
 23139 0f50 28BF     		it	cs
 23140 0f52 0026     		movcs	r6, #0
 23141              	.LVL402:
 23142 0f54 A5E0     		b	.L265
 23143              	.LVL403:
 23144              	.L283:
1869:../fatfs/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 23145              		.loc 1 1869 0
 23146 0f56 A268     		ldr	r2, [r4, #8]
 23147 0f58 D305     		lsls	r3, r2, #23
 23148 0f5a DB0D     		lsrs	r3, r3, #23
 23149 0f5c 002B     		cmp	r3, #0
 23150 0f5e 40F08380 		bne	.L266
1870:../fatfs/ff.c **** 			if (fp->csect >= fp->fs->csize) {		/* On the cluster boundary? */
 23151              		.loc 1 1870 0
 23152 0f62 2068     		ldr	r0, [r4, #0]
 23153 0f64 E179     		ldrb	r1, [r4, #7]	@ zero_extendqisi2
 23154 0f66 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 23155 0f68 9942     		cmp	r1, r3
 23156 0f6a 17D3     		bcc	.L267
1871:../fatfs/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
 23157              		.loc 1 1871 0
 23158 0f6c 32B9     		cbnz	r2, .L268
1872:../fatfs/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
 23159              		.loc 1 1872 0
 23160 0f6e 2169     		ldr	r1, [r4, #16]
 23161              	.LVL404:
1873:../fatfs/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
 23162              		.loc 1 1873 0
 23163 0f70 59B9     		cbnz	r1, .L269
1874:../fatfs/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 23164              		.loc 1 1874 0
 23165 0f72 FFF7CFFB 		bl	create_chain
 23166              	.LVL405:
 23167 0f76 0146     		mov	r1, r0
 23168              	.LVL406:
 23169 0f78 2061     		str	r0, [r4, #16]
 23170 0f7a 03E0     		b	.L270
 23171              	.LVL407:
 23172              	.L268:
1876:../fatfs/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or streach cluster chain */
 23173              		.loc 1 1876 0
 23174 0f7c 6169     		ldr	r1, [r4, #20]
 23175 0f7e FFF7C9FB 		bl	create_chain
 23176 0f82 0146     		mov	r1, r0
 23177              	.LVL408:
 23178              	.L270:
1878:../fatfs/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 23179              		.loc 1 1878 0
 23180 0f84 0029     		cmp	r1, #0
 23181 0f86 00F08F80 		beq	.L271
 23182              	.LVL409:
 23183              	.L269:
1879:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 23184              		.loc 1 1879 0
 23185 0f8a 0129     		cmp	r1, #1
 23186 0f8c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23187 0f8e 1FD0     		beq	.L288
 23188              	.L272:
1880:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 23189              		.loc 1 1880 0
 23190 0f90 B1F1FF3F 		cmp	r1, #-1
 23191 0f94 5ED0     		beq	.L291
 23192              	.L273:
1882:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
 23193              		.loc 1 1882 0
 23194 0f96 0023     		movs	r3, #0
1881:../fatfs/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
 23195              		.loc 1 1881 0
 23196 0f98 6161     		str	r1, [r4, #20]
1882:../fatfs/ff.c **** 				fp->csect = 0;						/* Reset sector address in the cluster */
 23197              		.loc 1 1882 0
 23198 0f9a E371     		strb	r3, [r4, #7]
 23199              	.LVL410:
 23200              	.L267:
1888:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 23201              		.loc 1 1888 0
 23202 0f9c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23203 0f9e 13F0400F 		tst	r3, #64
 23204 0fa2 0DD0     		beq	.L274
1889:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 23205              		.loc 1 1889 0
 23206 0fa4 2146     		mov	r1, r4
 23207 0fa6 51F8243B 		ldr	r3, [r1], #36
 23208 0faa A269     		ldr	r2, [r4, #24]
 23209 0fac 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 23210 0fae 0123     		movs	r3, #1
 23211 0fb0 FFF7FEFF 		bl	disk_write
 23212 0fb4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23213 0fb6 0028     		cmp	r0, #0
 23214 0fb8 4CD1     		bne	.L291
 23215              	.L275:
1891:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 23216              		.loc 1 1891 0
 23217 0fba 23F04003 		bic	r3, r3, #64
 23218 0fbe A371     		strb	r3, [r4, #6]
 23219              	.L274:
1894:../fatfs/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 23220              		.loc 1 1894 0
 23221 0fc0 D4F800B0 		ldr	fp, [r4, #0]
 23222 0fc4 6169     		ldr	r1, [r4, #20]
 23223 0fc6 5846     		mov	r0, fp
 23224 0fc8 FFF735F8 		bl	clust2sect
 23225              	.LVL411:
1895:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 23226              		.loc 1 1895 0
 23227 0fcc 28B9     		cbnz	r0, .L276
1895:../fatfs/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 23228              		.loc 1 1895 0 is_stmt 0 discriminator 1
 23229 0fce A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23230              	.LVL412:
 23231              	.L288:
 23232 0fd0 63F07F03 		orn	r3, r3, #127
 23233 0fd4 A371     		strb	r3, [r4, #6]
 23234              	.L289:
 23235 0fd6 0225     		movs	r5, #2
 23236 0fd8 71E0     		b	.L263
 23237              	.LVL413:
 23238              	.L276:
1896:../fatfs/ff.c **** 			sect += fp->csect;
 23239              		.loc 1 1896 0 is_stmt 1
 23240 0fda E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
1898:../fatfs/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
 23241              		.loc 1 1898 0
 23242 0fdc 770A     		lsrs	r7, r6, #9
1896:../fatfs/ff.c **** 			sect += fp->csect;
 23243              		.loc 1 1896 0
 23244 0fde 00EB0308 		add	r8, r0, r3
 23245              	.LVL414:
1898:../fatfs/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
 23246              		.loc 1 1898 0
 23247 0fe2 26D0     		beq	.L277
1899:../fatfs/ff.c **** 				if (fp->csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 23248              		.loc 1 1899 0
 23249 0fe4 9BF80220 		ldrb	r2, [fp, #2]	@ zero_extendqisi2
 23250 0fe8 F918     		adds	r1, r7, r3
 23251 0fea 9142     		cmp	r1, r2
1900:../fatfs/ff.c **** 					cc = fp->fs->csize - fp->csect;
 23252              		.loc 1 1900 0
 23253 0fec 88BF     		it	hi
 23254 0fee C3EB0207 		rsbhi	r7, r3, r2
 23255              	.LVL415:
1901:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, wbuff, sect, (BYTE)cc) != RES_OK)
 23256              		.loc 1 1901 0
 23257 0ff2 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 23258 0ff6 4946     		mov	r1, r9
 23259 0ff8 4246     		mov	r2, r8
 23260 0ffa FBB2     		uxtb	r3, r7
 23261 0ffc FFF7FEFF 		bl	disk_write
 23262 1000 38BB     		cbnz	r0, .L290
 23263              	.L279:
1909:../fatfs/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 23264              		.loc 1 1909 0
 23265 1002 A369     		ldr	r3, [r4, #24]
 23266 1004 C8EB0308 		rsb	r8, r8, r3
 23267              	.LVL416:
 23268 1008 B845     		cmp	r8, r7
 23269 100a 0DD2     		bcs	.L280
1910:../fatfs/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 23270              		.loc 1 1910 0
 23271 100c 4FEA4828 		lsl	r8, r8, #9
 23272 1010 04F12400 		add	r0, r4, #36
 23273 1014 09EB0801 		add	r1, r9, r8
 23274 1018 4FF40072 		mov	r2, #512
 23275 101c FEF7F0FF 		bl	mem_cpy
1911:../fatfs/ff.c **** 					fp->flag &= ~FA__DIRTY;
 23276              		.loc 1 1911 0
 23277 1020 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23278 1022 23F04003 		bic	r3, r3, #64
 23279 1026 A371     		strb	r3, [r4, #6]
 23280              	.L280:
1914:../fatfs/ff.c **** 				fp->csect += (BYTE)cc;				/* Next sector address in the cluster */
 23281              		.loc 1 1914 0
 23282 1028 E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
 23283 102a FB18     		adds	r3, r7, r3
 23284 102c E371     		strb	r3, [r4, #7]
1915:../fatfs/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 23285              		.loc 1 1915 0
 23286 102e 7F02     		lsls	r7, r7, #9
 23287              	.LVL417:
1916:../fatfs/ff.c **** 				continue;
 23288              		.loc 1 1916 0
 23289 1030 2DE0     		b	.L281
 23290              	.LVL418:
 23291              	.L277:
1924:../fatfs/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 23292              		.loc 1 1924 0
 23293 1032 A369     		ldr	r3, [r4, #24]
 23294 1034 4345     		cmp	r3, r8
 23295 1036 12D0     		beq	.L282
1925:../fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 23296              		.loc 1 1925 0
 23297 1038 A268     		ldr	r2, [r4, #8]
 23298 103a E368     		ldr	r3, [r4, #12]
 23299 103c 9A42     		cmp	r2, r3
 23300 103e 0ED2     		bcs	.L282
1926:../fatfs/ff.c **** 					disk_read(fp->fs->drive, fp->buf, sect, 1) != RES_OK)
 23301              		.loc 1 1926 0 discriminator 1
 23302 1040 9BF80100 		ldrb	r0, [fp, #1]	@ zero_extendqisi2
 23303 1044 04F12401 		add	r1, r4, #36
 23304 1048 4246     		mov	r2, r8
 23305 104a 0123     		movs	r3, #1
 23306 104c FFF7FEFF 		bl	disk_read
1925:../fatfs/ff.c **** 				if (fp->fptr < fp->fsize &&
 23307              		.loc 1 1925 0 discriminator 1
 23308 1050 28B1     		cbz	r0, .L282
 23309              	.L290:
1927:../fatfs/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 23310              		.loc 1 1927 0
 23311 1052 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23312              	.LVL419:
 23313              	.L291:
 23314 1054 63F07F03 		orn	r3, r3, #127
 23315 1058 A371     		strb	r3, [r4, #6]
 23316 105a 0125     		movs	r5, #1
 23317 105c 2FE0     		b	.L263
 23318              	.LVL420:
 23319              	.L282:
1931:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
 23320              		.loc 1 1931 0
 23321 105e E379     		ldrb	r3, [r4, #7]	@ zero_extendqisi2
1930:../fatfs/ff.c **** 			fp->dsect = sect;
 23322              		.loc 1 1930 0
 23323 1060 C4F81880 		str	r8, [r4, #24]
1931:../fatfs/ff.c **** 			fp->csect++;							/* Next sector address in the cluster */
 23324              		.loc 1 1931 0
 23325 1064 0133     		adds	r3, r3, #1
 23326 1066 E371     		strb	r3, [r4, #7]
 23327              	.LVL421:
 23328              	.L266:
1933:../fatfs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 23329              		.loc 1 1933 0
 23330 1068 A368     		ldr	r3, [r4, #8]
1941:../fatfs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 23331              		.loc 1 1941 0
 23332 106a 04F12400 		add	r0, r4, #36
1933:../fatfs/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Put partial sector into file I/O buffer */
 23333              		.loc 1 1933 0
 23334 106e DB05     		lsls	r3, r3, #23
 23335 1070 DB0D     		lsrs	r3, r3, #23
 23336 1072 C3F50077 		rsb	r7, r3, #512
 23337              	.LVL422:
 23338 1076 BE42     		cmp	r6, r7
 23339 1078 38BF     		it	cc
 23340 107a 3746     		movcc	r7, r6
 23341              	.LVL423:
1941:../fatfs/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 23342              		.loc 1 1941 0
 23343 107c C018     		adds	r0, r0, r3
 23344 107e 4946     		mov	r1, r9
 23345 1080 3A46     		mov	r2, r7
 23346 1082 FEF7BDFF 		bl	mem_cpy
1942:../fatfs/ff.c **** 		fp->flag |= FA__DIRTY;
 23347              		.loc 1 1942 0
 23348 1086 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23349 1088 43F04003 		orr	r3, r3, #64
 23350 108c A371     		strb	r3, [r4, #6]
 23351              	.L281:
1868:../fatfs/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 23352              		.loc 1 1868 0
 23353 108e A368     		ldr	r3, [r4, #8]
 23354 1090 B944     		add	r9, r9, r7
 23355              	.LVL424:
 23356 1092 DB19     		adds	r3, r3, r7
 23357 1094 A360     		str	r3, [r4, #8]
 23358 1096 DAF80030 		ldr	r3, [sl, #0]
 23359 109a F61B     		subs	r6, r6, r7
 23360              	.LVL425:
 23361 109c DB19     		adds	r3, r3, r7
 23362 109e CAF80030 		str	r3, [sl, #0]
 23363              	.LVL426:
 23364              	.L265:
1867:../fatfs/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
 23365              		.loc 1 1867 0 discriminator 1
 23366 10a2 002E     		cmp	r6, #0
 23367 10a4 7FF457AF 		bne	.L283
 23368              	.L271:
1946:../fatfs/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 23369              		.loc 1 1946 0
 23370 10a8 A368     		ldr	r3, [r4, #8]
 23371 10aa E268     		ldr	r2, [r4, #12]
 23372 10ac 9342     		cmp	r3, r2
 23373 10ae 88BF     		it	hi
 23374 10b0 E360     		strhi	r3, [r4, #12]
1947:../fatfs/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file changed flag */
 23375              		.loc 1 1947 0
 23376 10b2 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23377 10b4 43F02003 		orr	r3, r3, #32
 23378 10b8 A371     		strb	r3, [r4, #6]
1949:../fatfs/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 23379              		.loc 1 1949 0
 23380 10ba 00E0     		b	.L263
 23381              	.LVL427:
 23382              	.L286:
1864:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 23383              		.loc 1 1864 0
 23384 10bc 0725     		movs	r5, #7
 23385              	.LVL428:
 23386              	.L263:
1950:../fatfs/ff.c **** }
 23387              		.loc 1 1950 0
 23388 10be 2846     		mov	r0, r5
 23389 10c0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23390              		.cfi_endproc
 23391              	.LFE55:
 23393              		.align	1
 23394              		.global	f_sync
 23395              		.thumb
 23396              		.thumb_func
 23398              	f_sync:
 23399              	.LFB56:
1962:../fatfs/ff.c **** {
 23400              		.loc 1 1962 0
 23401              		.cfi_startproc
 23402              		@ args = 0, pretend = 0, frame = 0
 23403              		@ frame_needed = 0, uses_anonymous_args = 0
 23404              	.LVL429:
 23405 10c4 70B5     		push	{r4, r5, r6, lr}
 23406              	.LCFI21:
 23407              		.cfi_def_cfa_offset 16
1962:../fatfs/ff.c **** {
 23408              		.loc 1 1962 0
 23409 10c6 0446     		mov	r4, r0
 23410              		.cfi_offset 14, -4
 23411              		.cfi_offset 6, -8
 23412              		.cfi_offset 5, -12
 23413              		.cfi_offset 4, -16
1968:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 23414              		.loc 1 1968 0
 23415 10c8 A188     		ldrh	r1, [r4, #4]
 23416 10ca 0068     		ldr	r0, [r0, #0]
 23417              	.LVL430:
 23418 10cc FFF716F8 		bl	validate
 23419              	.LVL431:
1969:../fatfs/ff.c **** 	if (res == FR_OK) {
 23420              		.loc 1 1969 0
 23421 10d0 0028     		cmp	r0, #0
 23422 10d2 47D1     		bne	.L293
1970:../fatfs/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 23423              		.loc 1 1970 0
 23424 10d4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23425 10d6 13F0200F 		tst	r3, #32
 23426 10da 43D0     		beq	.L293
1972:../fatfs/ff.c **** 			if (fp->flag & FA__DIRTY) {
 23427              		.loc 1 1972 0
 23428 10dc 13F0400F 		tst	r3, #64
 23429 10e0 0DD0     		beq	.L294
1973:../fatfs/ff.c **** 				if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 23430              		.loc 1 1973 0
 23431 10e2 2146     		mov	r1, r4
 23432 10e4 51F8243B 		ldr	r3, [r1], #36
 23433 10e8 A269     		ldr	r2, [r4, #24]
 23434 10ea 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 23435              	.LVL432:
 23436 10ec 0123     		movs	r3, #1
 23437 10ee FFF7FEFF 		bl	disk_write
 23438 10f2 0028     		cmp	r0, #0
 23439 10f4 35D1     		bne	.L295
1975:../fatfs/ff.c **** 				fp->flag &= ~FA__DIRTY;
 23440              		.loc 1 1975 0
 23441 10f6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23442 10f8 23F04003 		bic	r3, r3, #64
 23443 10fc A371     		strb	r3, [r4, #6]
 23444              	.L294:
1979:../fatfs/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 23445              		.loc 1 1979 0
 23446 10fe 2068     		ldr	r0, [r4, #0]
 23447 1100 E169     		ldr	r1, [r4, #28]
 23448 1102 FFF79DF9 		bl	move_window
 23449              	.LVL433:
1980:../fatfs/ff.c **** 			if (res == FR_OK) {
 23450              		.loc 1 1980 0
 23451 1106 0028     		cmp	r0, #0
 23452 1108 2CD1     		bne	.L293
1981:../fatfs/ff.c **** 				dir = fp->dir_ptr;
 23453              		.loc 1 1981 0
 23454 110a 256A     		ldr	r5, [r4, #32]
 23455              	.LVL434:
1982:../fatfs/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 23456              		.loc 1 1982 0
 23457 110c EB7A     		ldrb	r3, [r5, #11]	@ zero_extendqisi2
 23458 110e 43F02003 		orr	r3, r3, #32
 23459 1112 EB72     		strb	r3, [r5, #11]
1983:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 23460              		.loc 1 1983 0
 23461 1114 E368     		ldr	r3, [r4, #12]
 23462 1116 2B77     		strb	r3, [r5, #28]
 23463 1118 A389     		ldrh	r3, [r4, #12]
 23464 111a 1B0A     		lsrs	r3, r3, #8
 23465 111c 6B77     		strb	r3, [r5, #29]
 23466 111e E389     		ldrh	r3, [r4, #14]
 23467 1120 AB77     		strb	r3, [r5, #30]
 23468 1122 E37B     		ldrb	r3, [r4, #15]	@ zero_extendqisi2
 23469 1124 EB77     		strb	r3, [r5, #31]
1984:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusLO, fp->org_clust);	/* Update start cluster */
 23470              		.loc 1 1984 0
 23471 1126 2369     		ldr	r3, [r4, #16]
 23472 1128 AB76     		strb	r3, [r5, #26]
 23473 112a 238A     		ldrh	r3, [r4, #16]
 23474 112c 1B0A     		lsrs	r3, r3, #8
 23475 112e EB76     		strb	r3, [r5, #27]
1985:../fatfs/ff.c **** 				ST_WORD(dir+DIR_FstClusHI, fp->org_clust >> 16);
 23476              		.loc 1 1985 0
 23477 1130 638A     		ldrh	r3, [r4, #18]
 23478 1132 2B75     		strb	r3, [r5, #20]
 23479 1134 638A     		ldrh	r3, [r4, #18]
 23480 1136 1B0A     		lsrs	r3, r3, #8
 23481 1138 6B75     		strb	r3, [r5, #21]
1986:../fatfs/ff.c **** 				tim = get_fattime();			/* Updated time */
 23482              		.loc 1 1986 0
 23483 113a FFF7FEFF 		bl	get_fattime
 23484              	.LVL435:
1987:../fatfs/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 23485              		.loc 1 1987 0
 23486 113e 030A     		lsrs	r3, r0, #8
 23487 1140 A875     		strb	r0, [r5, #22]
 23488 1142 EB75     		strb	r3, [r5, #23]
 23489 1144 030C     		lsrs	r3, r0, #16
 23490 1146 000E     		lsrs	r0, r0, #24
 23491              	.LVL436:
 23492 1148 2B76     		strb	r3, [r5, #24]
 23493 114a 6876     		strb	r0, [r5, #25]
1988:../fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 23494              		.loc 1 1988 0
 23495 114c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
1989:../fatfs/ff.c **** 				fp->fs->wflag = 1;
 23496              		.loc 1 1989 0
 23497 114e 0122     		movs	r2, #1
1988:../fatfs/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 23498              		.loc 1 1988 0
 23499 1150 23F02003 		bic	r3, r3, #32
 23500 1154 A371     		strb	r3, [r4, #6]
1989:../fatfs/ff.c **** 				fp->fs->wflag = 1;
 23501              		.loc 1 1989 0
 23502 1156 2368     		ldr	r3, [r4, #0]
 23503 1158 1A71     		strb	r2, [r3, #4]
1990:../fatfs/ff.c **** 				res = sync(fp->fs);
 23504              		.loc 1 1990 0
 23505 115a 2068     		ldr	r0, [r4, #0]
1996:../fatfs/ff.c **** }
 23506              		.loc 1 1996 0
 23507 115c BDE87040 		pop	{r4, r5, r6, lr}
1990:../fatfs/ff.c **** 				res = sync(fp->fs);
 23508              		.loc 1 1990 0
 23509 1160 45E4     		b	sync
 23510              	.LVL437:
 23511              	.L295:
1974:../fatfs/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 23512              		.loc 1 1974 0
 23513 1162 0120     		movs	r0, #1
 23514              	.L293:
1996:../fatfs/ff.c **** }
 23515              		.loc 1 1996 0
 23516 1164 70BD     		pop	{r4, r5, r6, pc}
 23517              		.cfi_endproc
 23518              	.LFE56:
 23520              		.align	1
 23521              		.global	f_close
 23522              		.thumb
 23523              		.thumb_func
 23525              	f_close:
 23526              	.LFB57:
2010:../fatfs/ff.c **** {
 23527              		.loc 1 2010 0
 23528              		.cfi_startproc
 23529              		@ args = 0, pretend = 0, frame = 0
 23530              		@ frame_needed = 0, uses_anonymous_args = 0
 23531              	.LVL438:
 23532 1166 10B5     		push	{r4, lr}
 23533              	.LCFI22:
 23534              		.cfi_def_cfa_offset 8
2010:../fatfs/ff.c **** {
 23535              		.loc 1 2010 0
 23536 1168 0446     		mov	r4, r0
 23537              		.cfi_offset 14, -4
 23538              		.cfi_offset 4, -8
2019:../fatfs/ff.c **** 	res = f_sync(fp);
 23539              		.loc 1 2019 0
 23540 116a FFF7FEFF 		bl	f_sync
 23541              	.LVL439:
2020:../fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
 23542              		.loc 1 2020 0
 23543 116e 00B9     		cbnz	r0, .L297
2020:../fatfs/ff.c **** 	if (res == FR_OK) fp->fs = NULL;
 23544              		.loc 1 2020 0 is_stmt 0 discriminator 1
 23545 1170 2060     		str	r0, [r4, #0]
 23546              	.L297:
2023:../fatfs/ff.c **** }
 23547              		.loc 1 2023 0 is_stmt 1
 23548 1172 10BD     		pop	{r4, pc}
 23549              		.cfi_endproc
 23550              	.LFE57:
 23552              		.align	1
 23553              		.global	f_lseek
 23554              		.thumb
 23555              		.thumb_func
 23557              	f_lseek:
 23558              	.LFB58:
2092:../fatfs/ff.c **** {
 23559              		.loc 1 2092 0
 23560              		.cfi_startproc
 23561              		@ args = 0, pretend = 0, frame = 0
 23562              		@ frame_needed = 0, uses_anonymous_args = 0
 23563              	.LVL440:
 23564 1174 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 23565              	.LCFI23:
 23566              		.cfi_def_cfa_offset 24
2092:../fatfs/ff.c **** {
 23567              		.loc 1 2092 0
 23568 1176 0446     		mov	r4, r0
 23569              		.cfi_offset 14, -4
 23570              		.cfi_offset 7, -8
 23571              		.cfi_offset 6, -12
 23572              		.cfi_offset 5, -16
 23573              		.cfi_offset 4, -20
 23574              		.cfi_offset 3, -24
 23575 1178 0E46     		mov	r6, r1
2097:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 23576              		.loc 1 2097 0
 23577 117a 0068     		ldr	r0, [r0, #0]
 23578              	.LVL441:
 23579 117c A188     		ldrh	r1, [r4, #4]
 23580              	.LVL442:
 23581 117e FEF7BDFF 		bl	validate
 23582              	.LVL443:
2098:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 23583              		.loc 1 2098 0
 23584 1182 0546     		mov	r5, r0
 23585 1184 0028     		cmp	r0, #0
 23586 1186 40F09F80 		bne	.L299
2099:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 23587              		.loc 1 2099 0
 23588 118a A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 23589 118c 12F0800F 		tst	r2, #128
 23590 1190 40F09980 		bne	.L320
2101:../fatfs/ff.c **** 	if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 23591              		.loc 1 2101 0
 23592 1194 E368     		ldr	r3, [r4, #12]
 23593 1196 9E42     		cmp	r6, r3
 23594 1198 04D9     		bls	.L300
2103:../fatfs/ff.c **** 		 && !(fp->flag & FA_WRITE)
 23595              		.loc 1 2103 0
 23596 119a 02F00202 		and	r2, r2, #2
 23597 119e 002A     		cmp	r2, #0
 23598 11a0 08BF     		it	eq
 23599 11a2 1E46     		moveq	r6, r3
 23600              	.LVL444:
 23601              	.L300:
2108:../fatfs/ff.c **** 	fp->fptr = nsect = 0; fp->csect = 255;
 23602              		.loc 1 2108 0
 23603 11a4 0022     		movs	r2, #0
2107:../fatfs/ff.c **** 	ifptr = fp->fptr;
 23604              		.loc 1 2107 0
 23605 11a6 A368     		ldr	r3, [r4, #8]
 23606              	.LVL445:
2108:../fatfs/ff.c **** 	fp->fptr = nsect = 0; fp->csect = 255;
 23607              		.loc 1 2108 0
 23608 11a8 A260     		str	r2, [r4, #8]
 23609 11aa FF32     		adds	r2, r2, #255
 23610 11ac E271     		strb	r2, [r4, #7]
2109:../fatfs/ff.c **** 	if (ofs > 0) {
 23611              		.loc 1 2109 0
 23612 11ae 002E     		cmp	r6, #0
 23613 11b0 58D0     		beq	.L301
2110:../fatfs/ff.c **** 		bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 23614              		.loc 1 2110 0
 23615 11b2 2068     		ldr	r0, [r4, #0]
 23616              	.LVL446:
 23617 11b4 8778     		ldrb	r7, [r0, #2]	@ zero_extendqisi2
 23618 11b6 7F02     		lsls	r7, r7, #9
 23619              	.LVL447:
2111:../fatfs/ff.c **** 		if (ifptr > 0 &&
 23620              		.loc 1 2111 0
 23621 11b8 73B1     		cbz	r3, .L302
2112:../fatfs/ff.c **** 			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 23622              		.loc 1 2112 0 discriminator 1
 23623 11ba 013B     		subs	r3, r3, #1
 23624 11bc 711E     		subs	r1, r6, #1
 23625 11be B1FBF7F1 		udiv	r1, r1, r7
 23626 11c2 B3FBF7F2 		udiv	r2, r3, r7
2111:../fatfs/ff.c **** 		if (ifptr > 0 &&
 23627              		.loc 1 2111 0 discriminator 1
 23628 11c6 9142     		cmp	r1, r2
 23629 11c8 06D3     		bcc	.L302
2113:../fatfs/ff.c **** 			fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 23630              		.loc 1 2113 0
 23631 11ca 7A42     		negs	r2, r7
 23632 11cc 02EA0303 		and	r3, r2, r3
 23633 11d0 A360     		str	r3, [r4, #8]
2114:../fatfs/ff.c **** 			ofs -= fp->fptr;
 23634              		.loc 1 2114 0
 23635 11d2 F61A     		subs	r6, r6, r3
 23636              	.LVL448:
2115:../fatfs/ff.c **** 			clst = fp->curr_clust;
 23637              		.loc 1 2115 0
 23638 11d4 6169     		ldr	r1, [r4, #20]
 23639              	.LVL449:
 23640 11d6 0BE0     		b	.L303
 23641              	.LVL450:
 23642              	.L302:
2117:../fatfs/ff.c **** 			clst = fp->org_clust;					/* start from the first cluster */
 23643              		.loc 1 2117 0
 23644 11d8 2169     		ldr	r1, [r4, #16]
 23645              	.LVL451:
2119:../fatfs/ff.c **** 			if (clst == 0) {						/* If no cluster chain, create a new chain */
 23646              		.loc 1 2119 0
 23647 11da 41B9     		cbnz	r1, .L304
2120:../fatfs/ff.c **** 				clst = create_chain(fp->fs, 0);
 23648              		.loc 1 2120 0
 23649 11dc FFF79AFA 		bl	create_chain
 23650              	.LVL452:
2121:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 23651              		.loc 1 2121 0
 23652 11e0 0128     		cmp	r0, #1
2120:../fatfs/ff.c **** 				clst = create_chain(fp->fs, 0);
 23653              		.loc 1 2120 0
 23654 11e2 0146     		mov	r1, r0
 23655              	.LVL453:
2121:../fatfs/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 23656              		.loc 1 2121 0
 23657 11e4 34D0     		beq	.L328
 23658              	.L305:
2122:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 23659              		.loc 1 2122 0
 23660 11e6 B0F1FF3F 		cmp	r0, #-1
 23661 11ea 5BD0     		beq	.L326
 23662              	.L306:
2123:../fatfs/ff.c **** 				fp->org_clust = clst;
 23663              		.loc 1 2123 0
 23664 11ec 2061     		str	r0, [r4, #16]
 23665              	.LVL454:
 23666              	.L304:
2126:../fatfs/ff.c **** 			fp->curr_clust = clst;
 23667              		.loc 1 2126 0
 23668 11ee 6161     		str	r1, [r4, #20]
 23669              	.L303:
2128:../fatfs/ff.c **** 		if (clst != 0) {
 23670              		.loc 1 2128 0
 23671 11f0 0029     		cmp	r1, #0
 23672 11f2 36D0     		beq	.L323
 23673 11f4 1BE0     		b	.L307
 23674              	.L314:
2131:../fatfs/ff.c **** 				if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 23675              		.loc 1 2131 0
 23676 11f6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23677 11f8 13F0020F 		tst	r3, #2
 23678 11fc 05D0     		beq	.L308
2132:../fatfs/ff.c **** 					clst = create_chain(fp->fs, clst);	/* Force streached if in write mode */
 23679              		.loc 1 2132 0
 23680 11fe 2068     		ldr	r0, [r4, #0]
 23681 1200 FFF788FA 		bl	create_chain
 23682              	.LVL455:
2133:../fatfs/ff.c **** 					if (clst == 0) {				/* When disk gets full, clip file size */
 23683              		.loc 1 2133 0
 23684 1204 0146     		mov	r1, r0
 23685 1206 20B9     		cbnz	r0, .L310
 23686 1208 14E0     		b	.L329
 23687              	.LVL456:
 23688              	.L308:
2138:../fatfs/ff.c **** 					clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 23689              		.loc 1 2138 0
 23690 120a 2068     		ldr	r0, [r4, #0]
 23691 120c FFF756F9 		bl	get_fat
 23692              	.LVL457:
 23693 1210 0146     		mov	r1, r0
 23694              	.LVL458:
 23695              	.L310:
2139:../fatfs/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 23696              		.loc 1 2139 0
 23697 1212 B1F1FF3F 		cmp	r1, #-1
 23698 1216 45D0     		beq	.L326
 23699              	.L311:
2140:../fatfs/ff.c **** 				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 23700              		.loc 1 2140 0
 23701 1218 0129     		cmp	r1, #1
 23702 121a 19D9     		bls	.L328
2140:../fatfs/ff.c **** 				if (clst <= 1 || clst >= fp->fs->max_clust) ABORT(fp->fs, FR_INT_ERR);
 23703              		.loc 1 2140 0 is_stmt 0 discriminator 2
 23704 121c 2368     		ldr	r3, [r4, #0]
 23705 121e DB69     		ldr	r3, [r3, #28]
 23706 1220 9942     		cmp	r1, r3
 23707 1222 15D2     		bcs	.L328
 23708              	.L313:
2142:../fatfs/ff.c **** 				fp->fptr += bcs;
 23709              		.loc 1 2142 0 is_stmt 1
 23710 1224 A368     		ldr	r3, [r4, #8]
2141:../fatfs/ff.c **** 				fp->curr_clust = clst;
 23711              		.loc 1 2141 0
 23712 1226 6161     		str	r1, [r4, #20]
2142:../fatfs/ff.c **** 				fp->fptr += bcs;
 23713              		.loc 1 2142 0
 23714 1228 DB19     		adds	r3, r3, r7
 23715 122a A360     		str	r3, [r4, #8]
2143:../fatfs/ff.c **** 				ofs -= bcs;
 23716              		.loc 1 2143 0
 23717 122c F61B     		subs	r6, r6, r7
 23718              	.LVL459:
 23719              	.L307:
2129:../fatfs/ff.c **** 			while (ofs > bcs) {						/* Cluster following loop */
 23720              		.loc 1 2129 0 discriminator 1
 23721 122e BE42     		cmp	r6, r7
 23722 1230 E1D8     		bhi	.L314
 23723 1232 00E0     		b	.L309
 23724              	.LVL460:
 23725              	.L329:
2133:../fatfs/ff.c **** 					if (clst == 0) {				/* When disk gets full, clip file size */
 23726              		.loc 1 2133 0
 23727 1234 3E46     		mov	r6, r7
 23728              	.LVL461:
 23729              	.L309:
2145:../fatfs/ff.c **** 			fp->fptr += ofs;
 23730              		.loc 1 2145 0
 23731 1236 A368     		ldr	r3, [r4, #8]
2146:../fatfs/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 23732              		.loc 1 2146 0
 23733 1238 770A     		lsrs	r7, r6, #9
 23734              	.LVL462:
2145:../fatfs/ff.c **** 			fp->fptr += ofs;
 23735              		.loc 1 2145 0
 23736 123a 9B19     		adds	r3, r3, r6
2147:../fatfs/ff.c **** 			if (ofs % SS(fp->fs)) {
 23737              		.loc 1 2147 0
 23738 123c F605     		lsls	r6, r6, #23
 23739              	.LVL463:
2146:../fatfs/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 23740              		.loc 1 2146 0
 23741 123e FFB2     		uxtb	r7, r7
2147:../fatfs/ff.c **** 			if (ofs % SS(fp->fs)) {
 23742              		.loc 1 2147 0
 23743 1240 F60D     		lsrs	r6, r6, #23
2145:../fatfs/ff.c **** 			fp->fptr += ofs;
 23744              		.loc 1 2145 0
 23745 1242 A360     		str	r3, [r4, #8]
2146:../fatfs/ff.c **** 			fp->csect = (BYTE)(ofs / SS(fp->fs));	/* Sector offset in the cluster */
 23746              		.loc 1 2146 0
 23747 1244 E771     		strb	r7, [r4, #7]
2147:../fatfs/ff.c **** 			if (ofs % SS(fp->fs)) {
 23748              		.loc 1 2147 0
 23749 1246 6EB1     		cbz	r6, .L301
2148:../fatfs/ff.c **** 				nsect = clust2sect(fp->fs, clst);	/* Current sector */
 23750              		.loc 1 2148 0
 23751 1248 2068     		ldr	r0, [r4, #0]
 23752 124a FEF7F4FE 		bl	clust2sect
 23753              	.LVL464:
2149:../fatfs/ff.c **** 				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 23754              		.loc 1 2149 0
 23755 124e 20B9     		cbnz	r0, .L315
 23756              	.LVL465:
 23757              	.L328:
2149:../fatfs/ff.c **** 				if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 23758              		.loc 1 2149 0 is_stmt 0 discriminator 1
 23759 1250 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23760 1252 63F07F03 		orn	r3, r3, #127
 23761 1256 A371     		strb	r3, [r4, #6]
 23762 1258 35E0     		b	.L320
 23763              	.LVL466:
 23764              	.L315:
2150:../fatfs/ff.c **** 				nsect += fp->csect;
 23765              		.loc 1 2150 0 is_stmt 1
 23766 125a C619     		adds	r6, r0, r7
 23767              	.LVL467:
2151:../fatfs/ff.c **** 				fp->csect++;
 23768              		.loc 1 2151 0
 23769 125c 0137     		adds	r7, r7, #1
 23770 125e E771     		strb	r7, [r4, #7]
 23771 1260 00E0     		b	.L301
 23772              	.LVL468:
 23773              	.L323:
2108:../fatfs/ff.c **** 	fp->fptr = nsect = 0; fp->csect = 255;
 23774              		.loc 1 2108 0
 23775 1262 0E46     		mov	r6, r1
 23776              	.LVL469:
 23777              	.L301:
2155:../fatfs/ff.c **** 	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 23778              		.loc 1 2155 0
 23779 1264 A368     		ldr	r3, [r4, #8]
 23780 1266 DB05     		lsls	r3, r3, #23
 23781 1268 DB0D     		lsrs	r3, r3, #23
 23782 126a 13B3     		cbz	r3, .L316
2155:../fatfs/ff.c **** 	if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 23783              		.loc 1 2155 0 is_stmt 0 discriminator 1
 23784 126c A269     		ldr	r2, [r4, #24]
 23785 126e 9642     		cmp	r6, r2
 23786 1270 1FD0     		beq	.L316
2158:../fatfs/ff.c **** 		if (fp->flag & FA__DIRTY) {			/* Write-back dirty buffer if needed */
 23787              		.loc 1 2158 0 is_stmt 1
 23788 1272 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23789 1274 13F0400F 		tst	r3, #64
 23790 1278 0BD0     		beq	.L317
2159:../fatfs/ff.c **** 			if (disk_write(fp->fs->drive, fp->buf, fp->dsect, 1) != RES_OK)
 23791              		.loc 1 2159 0
 23792 127a 2146     		mov	r1, r4
 23793 127c 51F8243B 		ldr	r3, [r1], #36
 23794 1280 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 23795 1282 0123     		movs	r3, #1
 23796 1284 FFF7FEFF 		bl	disk_write
 23797 1288 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23798 128a 60B9     		cbnz	r0, .L327
 23799              	.L318:
2161:../fatfs/ff.c **** 			fp->flag &= ~FA__DIRTY;
 23800              		.loc 1 2161 0
 23801 128c 23F04003 		bic	r3, r3, #64
 23802 1290 A371     		strb	r3, [r4, #6]
 23803              	.L317:
2164:../fatfs/ff.c **** 		if (disk_read(fp->fs->drive, fp->buf, nsect, 1) != RES_OK)
 23804              		.loc 1 2164 0
 23805 1292 2146     		mov	r1, r4
 23806 1294 51F8243B 		ldr	r3, [r1], #36
 23807 1298 3246     		mov	r2, r6
 23808 129a 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 23809 129c 0123     		movs	r3, #1
 23810 129e FFF7FEFF 		bl	disk_read
 23811 12a2 28B1     		cbz	r0, .L319
 23812              	.LVL470:
 23813              	.L326:
2165:../fatfs/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
 23814              		.loc 1 2165 0
 23815 12a4 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23816              	.L327:
 23817 12a6 63F07F03 		orn	r3, r3, #127
 23818 12aa A371     		strb	r3, [r4, #6]
 23819 12ac 0125     		movs	r5, #1
 23820 12ae 0BE0     		b	.L299
 23821              	.LVL471:
 23822              	.L319:
2167:../fatfs/ff.c **** 		fp->dsect = nsect;
 23823              		.loc 1 2167 0
 23824 12b0 A661     		str	r6, [r4, #24]
 23825              	.L316:
2170:../fatfs/ff.c **** 	if (fp->fptr > fp->fsize) {			/* Set changed flag if the file size is extended */
 23826              		.loc 1 2170 0
 23827 12b2 A368     		ldr	r3, [r4, #8]
 23828 12b4 E268     		ldr	r2, [r4, #12]
 23829 12b6 9342     		cmp	r3, r2
 23830 12b8 06D9     		bls	.L299
2171:../fatfs/ff.c **** 		fp->fsize = fp->fptr;
 23831              		.loc 1 2171 0
 23832 12ba E360     		str	r3, [r4, #12]
2172:../fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
 23833              		.loc 1 2172 0
 23834 12bc A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 23835 12be 43F02003 		orr	r3, r3, #32
 23836 12c2 A371     		strb	r3, [r4, #6]
 23837 12c4 00E0     		b	.L299
 23838              	.LVL472:
 23839              	.L320:
2100:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 23840              		.loc 1 2100 0
 23841 12c6 0225     		movs	r5, #2
 23842              	.L299:
2177:../fatfs/ff.c **** }
 23843              		.loc 1 2177 0
 23844 12c8 2846     		mov	r0, r5
 23845 12ca F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 23846              		.cfi_endproc
 23847              	.LFE58:
 23849              		.align	1
 23850              		.global	f_opendir
 23851              		.thumb
 23852              		.thumb_func
 23854              	f_opendir:
 23855              	.LFB59:
2191:../fatfs/ff.c **** {
 23856              		.loc 1 2191 0
 23857              		.cfi_startproc
 23858              		@ args = 0, pretend = 0, frame = 24
 23859              		@ frame_needed = 0, uses_anonymous_args = 0
 23860              	.LVL473:
 23861 12cc 10B5     		push	{r4, lr}
 23862              	.LCFI24:
 23863              		.cfi_def_cfa_offset 8
 23864 12ce 86B0     		sub	sp, sp, #24
 23865              	.LCFI25:
 23866              		.cfi_def_cfa_offset 32
2191:../fatfs/ff.c **** {
 23867              		.loc 1 2191 0
 23868 12d0 0446     		mov	r4, r0
 23869              		.cfi_offset 14, -4
 23870              		.cfi_offset 4, -8
 23871 12d2 06A8     		add	r0, sp, #24
 23872              	.LVL474:
 23873 12d4 40F8141D 		str	r1, [r0, #-20]!
2197:../fatfs/ff.c **** 	res = auto_mount(&path, &dj->fs, 0);
 23874              		.loc 1 2197 0
 23875 12d8 0022     		movs	r2, #0
 23876 12da 2146     		mov	r1, r4
 23877              	.LVL475:
 23878 12dc FEF752FF 		bl	auto_mount
 23879              	.LVL476:
2198:../fatfs/ff.c **** 	if (res == FR_OK) {
 23880              		.loc 1 2198 0
 23881 12e0 18BB     		cbnz	r0, .L331
2199:../fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
 23882              		.loc 1 2199 0
 23883 12e2 03AB     		add	r3, sp, #12
 23884 12e4 A361     		str	r3, [r4, #24]
2200:../fatfs/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 23885              		.loc 1 2200 0
 23886 12e6 2046     		mov	r0, r4
 23887              	.LVL477:
 23888 12e8 0199     		ldr	r1, [sp, #4]
 23889 12ea FFF7D9FB 		bl	follow_path
 23890              	.LVL478:
2201:../fatfs/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 23891              		.loc 1 2201 0
 23892 12ee B8B9     		cbnz	r0, .L332
2202:../fatfs/ff.c **** 			dir = dj->dir;
 23893              		.loc 1 2202 0
 23894 12f0 6369     		ldr	r3, [r4, #20]
 23895              	.LVL479:
2203:../fatfs/ff.c **** 			if (dir) {							/* It is not the root dir */
 23896              		.loc 1 2203 0
 23897 12f2 73B1     		cbz	r3, .L333
2204:../fatfs/ff.c **** 				if (dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 23898              		.loc 1 2204 0
 23899 12f4 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 23900 12f6 12F0100F 		tst	r2, #16
 23901 12fa 15D0     		beq	.L335
2205:../fatfs/ff.c **** 					dj->sclust = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 23902              		.loc 1 2205 0
 23903 12fc 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 23904 12fe 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 23905 1300 42EA0122 		orr	r2, r2, r1, lsl #8
 23906 1304 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 23907 1306 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 23908 1308 43EA0123 		orr	r3, r3, r1, lsl #8
 23909 130c 43EA0243 		orr	r3, r3, r2, lsl #16
 23910 1310 A360     		str	r3, [r4, #8]
 23911              	.L333:
 23912              	.LVL480:
2211:../fatfs/ff.c **** 				dj->id = dj->fs->id;
 23913              		.loc 1 2211 0
 23914 1312 2368     		ldr	r3, [r4, #0]
2212:../fatfs/ff.c **** 				res = dir_seek(dj, 0);			/* Rewind dir */
 23915              		.loc 1 2212 0
 23916 1314 2046     		mov	r0, r4
2211:../fatfs/ff.c **** 				dj->id = dj->fs->id;
 23917              		.loc 1 2211 0
 23918 1316 DB88     		ldrh	r3, [r3, #6]
2212:../fatfs/ff.c **** 				res = dir_seek(dj, 0);			/* Rewind dir */
 23919              		.loc 1 2212 0
 23920 1318 0021     		movs	r1, #0
2211:../fatfs/ff.c **** 				dj->id = dj->fs->id;
 23921              		.loc 1 2211 0
 23922 131a A380     		strh	r3, [r4, #4]	@ movhi
2212:../fatfs/ff.c **** 				res = dir_seek(dj, 0);			/* Rewind dir */
 23923              		.loc 1 2212 0
 23924 131c FFF73AF9 		bl	dir_seek
 23925              	.LVL481:
 23926              	.L332:
2215:../fatfs/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 23927              		.loc 1 2215 0
 23928 1320 0428     		cmp	r0, #4
 23929 1322 08BF     		it	eq
 23930 1324 0520     		moveq	r0, #5
 23931              	.LVL482:
 23932 1326 00E0     		b	.L331
 23933              	.LVL483:
 23934              	.L335:
2207:../fatfs/ff.c **** 					res = FR_NO_PATH;
 23935              		.loc 1 2207 0
 23936 1328 0520     		movs	r0, #5
 23937              	.LVL484:
 23938              	.L331:
2219:../fatfs/ff.c **** }
 23939              		.loc 1 2219 0
 23940 132a 06B0     		add	sp, sp, #24
 23941 132c 10BD     		pop	{r4, pc}
 23942              		.cfi_endproc
 23943              	.LFE59:
 23945              		.align	1
 23946              		.global	f_readdir
 23947              		.thumb
 23948              		.thumb_func
 23950              	f_readdir:
 23951              	.LFB60:
2232:../fatfs/ff.c **** {
 23952              		.loc 1 2232 0
 23953              		.cfi_startproc
 23954              		@ args = 0, pretend = 0, frame = 16
 23955              		@ frame_needed = 0, uses_anonymous_args = 0
 23956              	.LVL485:
 23957 132e 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23958              	.LCFI26:
 23959              		.cfi_def_cfa_offset 32
2232:../fatfs/ff.c **** {
 23960              		.loc 1 2232 0
 23961 1330 0446     		mov	r4, r0
 23962              		.cfi_offset 14, -4
 23963              		.cfi_offset 6, -8
 23964              		.cfi_offset 5, -12
 23965              		.cfi_offset 4, -16
 23966              		.cfi_offset 3, -20
 23967              		.cfi_offset 2, -24
 23968              		.cfi_offset 1, -28
 23969              		.cfi_offset 0, -32
 23970 1332 0E46     		mov	r6, r1
2237:../fatfs/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 23971              		.loc 1 2237 0
 23972 1334 0068     		ldr	r0, [r0, #0]
 23973              	.LVL486:
 23974 1336 A188     		ldrh	r1, [r4, #4]
 23975              	.LVL487:
 23976 1338 FEF7E0FE 		bl	validate
 23977              	.LVL488:
2238:../fatfs/ff.c **** 	if (res == FR_OK) {
 23978              		.loc 1 2238 0
 23979 133c 0546     		mov	r5, r0
 23980 133e E8B9     		cbnz	r0, .L338
2239:../fatfs/ff.c **** 		INITBUF((*dj), sfn, lfn);
 23981              		.loc 1 2239 0
 23982 1340 01AB     		add	r3, sp, #4
 23983 1342 A361     		str	r3, [r4, #24]
2240:../fatfs/ff.c **** 		if (!fno) {
 23984              		.loc 1 2240 0
 23985 1344 26B9     		cbnz	r6, .L339
2241:../fatfs/ff.c **** 			res = dir_seek(dj, 0);
 23986              		.loc 1 2241 0
 23987 1346 2046     		mov	r0, r4
 23988              	.LVL489:
 23989 1348 2946     		mov	r1, r5
 23990 134a FFF723F9 		bl	dir_seek
 23991 134e 14E0     		b	.L343
 23992              	.LVL490:
 23993              	.L339:
2243:../fatfs/ff.c **** 			res = dir_read(dj);
 23994              		.loc 1 2243 0
 23995 1350 2046     		mov	r0, r4
 23996              	.LVL491:
 23997 1352 FFF727FB 		bl	dir_read
 23998              	.LVL492:
2244:../fatfs/ff.c **** 			if (res == FR_NO_FILE) {
 23999              		.loc 1 2244 0
 24000 1356 0428     		cmp	r0, #4
 24001 1358 01D1     		bne	.L340
2245:../fatfs/ff.c **** 				dj->sect = 0;
 24002              		.loc 1 2245 0
 24003 135a 2561     		str	r5, [r4, #16]
 24004              	.LVL493:
 24005 135c 00E0     		b	.L341
 24006              	.LVL494:
 24007              	.L340:
2248:../fatfs/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 24008              		.loc 1 2248 0
 24009 135e 60B9     		cbnz	r0, .L343
 24010              	.LVL495:
 24011              	.L341:
2249:../fatfs/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
 24012              		.loc 1 2249 0
 24013 1360 2046     		mov	r0, r4
 24014 1362 3146     		mov	r1, r6
 24015 1364 FEF773FE 		bl	get_fileinfo
2250:../fatfs/ff.c **** 				res = dir_next(dj, FALSE);	/* Increment index for next */
 24016              		.loc 1 2250 0
 24017 1368 0021     		movs	r1, #0
 24018 136a 2046     		mov	r0, r4
 24019 136c FFF750FA 		bl	dir_next
 24020              	.LVL496:
2251:../fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 24021              		.loc 1 2251 0
 24022 1370 0428     		cmp	r0, #4
 24023 1372 02D1     		bne	.L343
2252:../fatfs/ff.c **** 					dj->sect = 0;
 24024              		.loc 1 2252 0
 24025 1374 0023     		movs	r3, #0
 24026 1376 2361     		str	r3, [r4, #16]
 24027              	.LVL497:
 24028 1378 00E0     		b	.L338
 24029              	.LVL498:
 24030              	.L343:
2251:../fatfs/ff.c **** 				if (res == FR_NO_FILE) {
 24031              		.loc 1 2251 0
 24032 137a 0546     		mov	r5, r0
 24033              	.L338:
 24034              	.LVL499:
2260:../fatfs/ff.c **** }
 24035              		.loc 1 2260 0
 24036 137c 2846     		mov	r0, r5
 24037 137e 04B0     		add	sp, sp, #16
 24038 1380 70BD     		pop	{r4, r5, r6, pc}
 24039              		.cfi_endproc
 24040              	.LFE60:
 24042              		.align	1
 24043              		.global	f_stat
 24044              		.thumb
 24045              		.thumb_func
 24047              	f_stat:
 24048              	.LFB61:
2273:../fatfs/ff.c **** {
 24049              		.loc 1 2273 0
 24050              		.cfi_startproc
 24051              		@ args = 0, pretend = 0, frame = 48
 24052              		@ frame_needed = 0, uses_anonymous_args = 0
 24053              	.LVL500:
 24054 1382 30B5     		push	{r4, r5, lr}
 24055              	.LCFI27:
 24056              		.cfi_def_cfa_offset 12
 24057 1384 8DB0     		sub	sp, sp, #52
 24058              	.LCFI28:
 24059              		.cfi_def_cfa_offset 64
2273:../fatfs/ff.c **** {
 24060              		.loc 1 2273 0
 24061 1386 0CAB     		add	r3, sp, #48
 24062 1388 43F82C0D 		str	r0, [r3, #-44]!
 24063 138c 0C46     		mov	r4, r1
 24064              		.cfi_offset 14, -4
 24065              		.cfi_offset 5, -8
 24066              		.cfi_offset 4, -12
2279:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 0);
 24067              		.loc 1 2279 0
 24068 138e 1846     		mov	r0, r3
 24069              	.LVL501:
 24070 1390 02A9     		add	r1, sp, #8
 24071              	.LVL502:
 24072 1392 0022     		movs	r2, #0
 24073 1394 FEF7F6FE 		bl	auto_mount
 24074              	.LVL503:
2280:../fatfs/ff.c **** 	if (res == FR_OK) {
 24075              		.loc 1 2280 0
 24076 1398 0546     		mov	r5, r0
 24077 139a 78B9     		cbnz	r0, .L345
2281:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 24078              		.loc 1 2281 0
 24079 139c 09AB     		add	r3, sp, #36
2282:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 24080              		.loc 1 2282 0
 24081 139e 02A8     		add	r0, sp, #8
 24082              	.LVL504:
 24083 13a0 0199     		ldr	r1, [sp, #4]
2281:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 24084              		.loc 1 2281 0
 24085 13a2 0893     		str	r3, [sp, #32]
2282:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 24086              		.loc 1 2282 0
 24087 13a4 FFF77CFB 		bl	follow_path
 24088              	.LVL505:
2283:../fatfs/ff.c **** 		if (res == FR_OK) {				/* Follwo completed */
 24089              		.loc 1 2283 0
 24090 13a8 0546     		mov	r5, r0
 24091 13aa 38B9     		cbnz	r0, .L345
2284:../fatfs/ff.c **** 			if (dj.dir)	/* Found an object */
 24092              		.loc 1 2284 0
 24093 13ac 079B     		ldr	r3, [sp, #28]
 24094 13ae 23B1     		cbz	r3, .L346
2285:../fatfs/ff.c **** 				get_fileinfo(&dj, fno);
 24095              		.loc 1 2285 0
 24096 13b0 02A8     		add	r0, sp, #8
 24097              	.LVL506:
 24098 13b2 2146     		mov	r1, r4
 24099 13b4 FEF74BFE 		bl	get_fileinfo
 24100 13b8 00E0     		b	.L345
 24101              	.LVL507:
 24102              	.L346:
2287:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 24103              		.loc 1 2287 0
 24104 13ba 0625     		movs	r5, #6
 24105              	.LVL508:
 24106              	.L345:
2292:../fatfs/ff.c **** }
 24107              		.loc 1 2292 0
 24108 13bc 2846     		mov	r0, r5
 24109 13be 0DB0     		add	sp, sp, #52
 24110 13c0 30BD     		pop	{r4, r5, pc}
 24111              		.cfi_endproc
 24112              	.LFE61:
 24114              		.align	1
 24115              		.global	f_getfree
 24116              		.thumb
 24117              		.thumb_func
 24119              	f_getfree:
 24120              	.LFB62:
2306:../fatfs/ff.c **** {
 24121              		.loc 1 2306 0
 24122              		.cfi_startproc
 24123              		@ args = 0, pretend = 0, frame = 8
 24124              		@ frame_needed = 0, uses_anonymous_args = 0
 24125              	.LVL509:
 24126 13c2 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 24127              	.LCFI29:
 24128              		.cfi_def_cfa_offset 40
2306:../fatfs/ff.c **** {
 24129              		.loc 1 2306 0
 24130 13c6 02AB     		add	r3, sp, #8
 24131 13c8 43F8040D 		str	r0, [r3, #-4]!
 24132 13cc 0D46     		mov	r5, r1
 24133              		.cfi_offset 14, -4
 24134              		.cfi_offset 10, -8
 24135              		.cfi_offset 9, -12
 24136              		.cfi_offset 8, -16
 24137              		.cfi_offset 7, -20
 24138              		.cfi_offset 6, -24
 24139              		.cfi_offset 5, -28
 24140              		.cfi_offset 4, -32
 24141              		.cfi_offset 1, -36
 24142              		.cfi_offset 0, -40
 24143 13ce 1446     		mov	r4, r2
2314:../fatfs/ff.c **** 	res = auto_mount(&path, fatfs, 0);
 24144              		.loc 1 2314 0
 24145 13d0 1146     		mov	r1, r2
 24146              	.LVL510:
 24147 13d2 1846     		mov	r0, r3
 24148              	.LVL511:
 24149 13d4 0022     		movs	r2, #0
 24150              	.LVL512:
 24151 13d6 FEF7D5FE 		bl	auto_mount
 24152              	.LVL513:
2315:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(*fatfs, res);
 24153              		.loc 1 2315 0
 24154 13da 0646     		mov	r6, r0
 24155 13dc 0028     		cmp	r0, #0
 24156 13de 60D1     		bne	.L348
2318:../fatfs/ff.c **** 	if ((*fatfs)->free_clust <= (*fatfs)->max_clust - 2) {
 24157              		.loc 1 2318 0
 24158 13e0 2368     		ldr	r3, [r4, #0]
 24159 13e2 D3F81C80 		ldr	r8, [r3, #28]
 24160 13e6 1A69     		ldr	r2, [r3, #16]
 24161 13e8 A8F10201 		sub	r1, r8, #2
 24162 13ec 8A42     		cmp	r2, r1
 24163 13ee 01D8     		bhi	.L349
2319:../fatfs/ff.c **** 		*nclst = (*fatfs)->free_clust;
 24164              		.loc 1 2319 0
 24165 13f0 2A60     		str	r2, [r5, #0]
2320:../fatfs/ff.c **** 		LEAVE_FF(*fatfs, FR_OK);
 24166              		.loc 1 2320 0
 24167 13f2 56E0     		b	.L348
 24168              	.L349:
2324:../fatfs/ff.c **** 	fat = (*fatfs)->fs_type;
 24169              		.loc 1 2324 0
 24170 13f4 93F80090 		ldrb	r9, [r3, #0]	@ zero_extendqisi2
 24171              	.LVL514:
2326:../fatfs/ff.c **** 	if (fat == FS_FAT12) {
 24172              		.loc 1 2326 0
 24173 13f8 B9F1010F 		cmp	r9, #1
 24174 13fc 14D1     		bne	.L350
 24175 13fe 4FF00208 		mov	r8, #2
 24176 1402 0746     		mov	r7, r0
 24177              	.LVL515:
 24178              	.L352:
2329:../fatfs/ff.c **** 			stat = get_fat(*fatfs, clst);
 24179              		.loc 1 2329 0
 24180 1404 2068     		ldr	r0, [r4, #0]
 24181 1406 4146     		mov	r1, r8
 24182 1408 FFF758F8 		bl	get_fat
 24183              	.LVL516:
2330:../fatfs/ff.c **** 			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 24184              		.loc 1 2330 0
 24185 140c B0F1FF3F 		cmp	r0, #-1
 24186 1410 42D0     		beq	.L361
2331:../fatfs/ff.c **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 24187              		.loc 1 2331 0
 24188 1412 0128     		cmp	r0, #1
 24189 1414 42D0     		beq	.L362
2332:../fatfs/ff.c **** 			if (stat == 0) n++;
 24190              		.loc 1 2332 0
 24191 1416 00B9     		cbnz	r0, .L351
2332:../fatfs/ff.c **** 			if (stat == 0) n++;
 24192              		.loc 1 2332 0 is_stmt 0 discriminator 1
 24193 1418 0137     		adds	r7, r7, #1
 24194              	.LVL517:
 24195              	.L351:
2333:../fatfs/ff.c **** 		} while (++clst < (*fatfs)->max_clust);
 24196              		.loc 1 2333 0 is_stmt 1
 24197 141a 2368     		ldr	r3, [r4, #0]
 24198 141c 08F10108 		add	r8, r8, #1
 24199              	.LVL518:
 24200 1420 DB69     		ldr	r3, [r3, #28]
 24201 1422 9845     		cmp	r8, r3
 24202 1424 EED3     		bcc	.L352
 24203 1426 2EE0     		b	.L353
 24204              	.LVL519:
 24205              	.L350:
2336:../fatfs/ff.c **** 		sect = (*fatfs)->fatbase;
 24206              		.loc 1 2336 0
 24207 1428 D3F820A0 		ldr	sl, [r3, #32]
 24208              	.LVL520:
2337:../fatfs/ff.c **** 		i = 0; p = 0;
 24209              		.loc 1 2337 0
 24210 142c 0246     		mov	r2, r0
 24211 142e 0346     		mov	r3, r0
 24212              	.LVL521:
2325:../fatfs/ff.c **** 	n = 0;
 24213              		.loc 1 2325 0
 24214 1430 0746     		mov	r7, r0
 24215              	.LVL522:
 24216              	.L359:
2339:../fatfs/ff.c **** 			if (!i) {
 24217              		.loc 1 2339 0
 24218 1432 5AB9     		cbnz	r2, .L354
 24219              	.LVL523:
2340:../fatfs/ff.c **** 				res = move_window(*fatfs, sect++);
 24220              		.loc 1 2340 0
 24221 1434 2068     		ldr	r0, [r4, #0]
 24222 1436 5146     		mov	r1, sl
 24223 1438 FFF702F8 		bl	move_window
 24224              	.LVL524:
2341:../fatfs/ff.c **** 				if (res != FR_OK)
 24225              		.loc 1 2341 0
 24226 143c 0028     		cmp	r0, #0
 24227 143e 2FD1     		bne	.L363
2343:../fatfs/ff.c **** 				p = (*fatfs)->win;
 24228              		.loc 1 2343 0
 24229 1440 2368     		ldr	r3, [r4, #0]
2340:../fatfs/ff.c **** 				res = move_window(*fatfs, sect++);
 24230              		.loc 1 2340 0
 24231 1442 0AF1010A 		add	sl, sl, #1
 24232              	.LVL525:
2343:../fatfs/ff.c **** 				p = (*fatfs)->win;
 24233              		.loc 1 2343 0
 24234 1446 3033     		adds	r3, r3, #48
 24235              	.LVL526:
2344:../fatfs/ff.c **** 				i = SS(*fatfs);
 24236              		.loc 1 2344 0
 24237 1448 4FF40072 		mov	r2, #512
 24238              	.LVL527:
 24239              	.L354:
2346:../fatfs/ff.c **** 			if (fat == FS_FAT16) {
 24240              		.loc 1 2346 0
 24241 144c B9F1020F 		cmp	r9, #2
 24242 1450 08D1     		bne	.L355
2347:../fatfs/ff.c **** 				if (LD_WORD(p) == 0) n++;
 24243              		.loc 1 2347 0
 24244 1452 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 24245 1454 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 24246 1456 51EA0021 		orrs	r1, r1, r0, lsl #8
 24247 145a 08BF     		it	eq
 24248 145c 0137     		addeq	r7, r7, #1
 24249              	.LVL528:
2348:../fatfs/ff.c **** 				p += 2; i -= 2;
 24250              		.loc 1 2348 0
 24251 145e 0233     		adds	r3, r3, #2
 24252              	.LVL529:
 24253 1460 023A     		subs	r2, r2, #2
 24254              	.LVL530:
 24255 1462 0DE0     		b	.L357
 24256              	.L355:
2350:../fatfs/ff.c **** 				if (LD_DWORD(p) == 0) n++;
 24257              		.loc 1 2350 0
 24258 1464 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 24259 1466 D878     		ldrb	r0, [r3, #3]	@ zero_extendqisi2
 24260 1468 0904     		lsls	r1, r1, #16
 24261 146a 41EA0061 		orr	r1, r1, r0, lsl #24
 24262 146e 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 24263 1470 0143     		orrs	r1, r1, r0
 24264 1472 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 24265 1474 51EA0020 		orrs	r0, r1, r0, lsl #8
 24266 1478 08BF     		it	eq
 24267 147a 0137     		addeq	r7, r7, #1
 24268              	.LVL531:
2351:../fatfs/ff.c **** 				p += 4; i -= 4;
 24269              		.loc 1 2351 0
 24270 147c 0433     		adds	r3, r3, #4
 24271              	.LVL532:
 24272 147e 043A     		subs	r2, r2, #4
 24273              	.LVL533:
 24274              	.L357:
2353:../fatfs/ff.c **** 		} while (--clst);
 24275              		.loc 1 2353 0
 24276 1480 B8F10108 		subs	r8, r8, #1
 24277              	.LVL534:
 24278 1484 D5D1     		bne	.L359
 24279              	.LVL535:
 24280              	.L353:
2355:../fatfs/ff.c **** 	(*fatfs)->free_clust = n;
 24281              		.loc 1 2355 0
 24282 1486 2368     		ldr	r3, [r4, #0]
2356:../fatfs/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 24283              		.loc 1 2356 0
 24284 1488 B9F1030F 		cmp	r9, #3
2355:../fatfs/ff.c **** 	(*fatfs)->free_clust = n;
 24285              		.loc 1 2355 0
 24286 148c 1F61     		str	r7, [r3, #16]
2356:../fatfs/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 24287              		.loc 1 2356 0
 24288 148e 01D1     		bne	.L360
2356:../fatfs/ff.c **** 	if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 24289              		.loc 1 2356 0 is_stmt 0 discriminator 1
 24290 1490 0122     		movs	r2, #1
 24291 1492 9A72     		strb	r2, [r3, #10]
 24292              	.L360:
2357:../fatfs/ff.c **** 	*nclst = n;
 24293              		.loc 1 2357 0 is_stmt 1
 24294 1494 2F60     		str	r7, [r5, #0]
2359:../fatfs/ff.c **** 	LEAVE_FF(*fatfs, FR_OK);
 24295              		.loc 1 2359 0
 24296 1496 04E0     		b	.L348
 24297              	.LVL536:
 24298              	.L361:
2330:../fatfs/ff.c **** 			if (stat == 0xFFFFFFFF) LEAVE_FF(*fatfs, FR_DISK_ERR);
 24299              		.loc 1 2330 0
 24300 1498 0126     		movs	r6, #1
 24301 149a 02E0     		b	.L348
 24302              	.L362:
2331:../fatfs/ff.c **** 			if (stat == 1) LEAVE_FF(*fatfs, FR_INT_ERR);
 24303              		.loc 1 2331 0
 24304 149c 0226     		movs	r6, #2
 24305 149e 00E0     		b	.L348
 24306              	.LVL537:
 24307              	.L363:
2340:../fatfs/ff.c **** 				res = move_window(*fatfs, sect++);
 24308              		.loc 1 2340 0
 24309 14a0 0646     		mov	r6, r0
 24310              	.LVL538:
 24311              	.L348:
2360:../fatfs/ff.c **** }
 24312              		.loc 1 2360 0
 24313 14a2 3046     		mov	r0, r6
 24314 14a4 BDE8FC87 		pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 24315              		.cfi_endproc
 24316              	.LFE62:
 24318              		.align	1
 24319              		.global	f_truncate
 24320              		.thumb
 24321              		.thumb_func
 24323              	f_truncate:
 24324              	.LFB63:
2372:../fatfs/ff.c **** {
 24325              		.loc 1 2372 0
 24326              		.cfi_startproc
 24327              		@ args = 0, pretend = 0, frame = 0
 24328              		@ frame_needed = 0, uses_anonymous_args = 0
 24329              	.LVL539:
 24330 14a8 70B5     		push	{r4, r5, r6, lr}
 24331              	.LCFI30:
 24332              		.cfi_def_cfa_offset 16
2372:../fatfs/ff.c **** {
 24333              		.loc 1 2372 0
 24334 14aa 0446     		mov	r4, r0
 24335              		.cfi_offset 14, -4
 24336              		.cfi_offset 6, -8
 24337              		.cfi_offset 5, -12
 24338              		.cfi_offset 4, -16
2377:../fatfs/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 24339              		.loc 1 2377 0
 24340 14ac A188     		ldrh	r1, [r4, #4]
 24341 14ae 0068     		ldr	r0, [r0, #0]
 24342              	.LVL540:
 24343 14b0 FEF724FE 		bl	validate
 24344              	.LVL541:
2378:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 24345              		.loc 1 2378 0
 24346 14b4 0646     		mov	r6, r0
 24347 14b6 0028     		cmp	r0, #0
 24348 14b8 36D1     		bne	.L365
2379:../fatfs/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 24349              		.loc 1 2379 0
 24350 14ba A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 24351 14bc 13F0800F 		tst	r3, #128
 24352 14c0 2FD1     		bne	.L372
2381:../fatfs/ff.c **** 	if (!(fp->flag & FA_WRITE))			/* Check access mode */
 24353              		.loc 1 2381 0
 24354 14c2 13F0020F 		tst	r3, #2
 24355 14c6 2ED0     		beq	.L373
2384:../fatfs/ff.c **** 	if (fp->fsize > fp->fptr) {
 24356              		.loc 1 2384 0
 24357 14c8 A568     		ldr	r5, [r4, #8]
 24358 14ca E268     		ldr	r2, [r4, #12]
 24359 14cc AA42     		cmp	r2, r5
 24360 14ce 2BD9     		bls	.L365
2386:../fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
 24361              		.loc 1 2386 0
 24362 14d0 43F02003 		orr	r3, r3, #32
2385:../fatfs/ff.c **** 		fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 24363              		.loc 1 2385 0
 24364 14d4 E560     		str	r5, [r4, #12]
2386:../fatfs/ff.c **** 		fp->flag |= FA__WRITTEN;
 24365              		.loc 1 2386 0
 24366 14d6 A371     		strb	r3, [r4, #6]
2387:../fatfs/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 24367              		.loc 1 2387 0
 24368 14d8 35B9     		cbnz	r5, .L366
2388:../fatfs/ff.c **** 			res = remove_chain(fp->fs, fp->org_clust);
 24369              		.loc 1 2388 0
 24370 14da 2068     		ldr	r0, [r4, #0]
 24371              	.LVL542:
 24372 14dc 2169     		ldr	r1, [r4, #16]
 24373 14de FFF76AF9 		bl	remove_chain
2389:../fatfs/ff.c **** 			fp->org_clust = 0;
 24374              		.loc 1 2389 0
 24375 14e2 2561     		str	r5, [r4, #16]
2388:../fatfs/ff.c **** 			res = remove_chain(fp->fs, fp->org_clust);
 24376              		.loc 1 2388 0
 24377 14e4 0646     		mov	r6, r0
 24378              	.LVL543:
 24379 14e6 16E0     		b	.L367
 24380              	.L366:
2391:../fatfs/ff.c **** 			ncl = get_fat(fp->fs, fp->curr_clust);
 24381              		.loc 1 2391 0
 24382 14e8 2068     		ldr	r0, [r4, #0]
 24383              	.LVL544:
 24384 14ea 6169     		ldr	r1, [r4, #20]
 24385 14ec FEF7E6FF 		bl	get_fat
2393:../fatfs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 24386              		.loc 1 2393 0
 24387 14f0 B0F1FF3F 		cmp	r0, #-1
2391:../fatfs/ff.c **** 			ncl = get_fat(fp->fs, fp->curr_clust);
 24388              		.loc 1 2391 0
 24389 14f4 0546     		mov	r5, r0
 24390              	.LVL545:
2393:../fatfs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 24391              		.loc 1 2393 0
 24392 14f6 19D0     		beq	.L374
2394:../fatfs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 24393              		.loc 1 2394 0
 24394 14f8 0128     		cmp	r0, #1
 24395 14fa 1BD1     		bne	.L376
 24396 14fc 18E0     		b	.L377
 24397              	.LVL546:
 24398              	.L378:
2396:../fatfs/ff.c **** 				res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
 24399              		.loc 1 2396 0
 24400 14fe 6169     		ldr	r1, [r4, #20]
 24401 1500 6FF07042 		mvn	r2, #-268435456
 24402 1504 FFF78BF8 		bl	put_fat
 24403              	.LVL547:
2397:../fatfs/ff.c **** 				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 24404              		.loc 1 2397 0
 24405 1508 0646     		mov	r6, r0
 24406 150a 28B9     		cbnz	r0, .L370
2397:../fatfs/ff.c **** 				if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 24407              		.loc 1 2397 0 is_stmt 0 discriminator 1
 24408 150c 2068     		ldr	r0, [r4, #0]
 24409              	.LVL548:
 24410 150e 2946     		mov	r1, r5
 24411 1510 FFF751F9 		bl	remove_chain
 24412 1514 0646     		mov	r6, r0
 24413              	.LVL549:
 24414              	.L367:
2401:../fatfs/ff.c **** 	if (res != FR_OK) fp->flag |= FA__ERROR;
 24415              		.loc 1 2401 0 is_stmt 1
 24416 1516 3EB1     		cbz	r6, .L365
 24417              	.LVL550:
 24418              	.L370:
2401:../fatfs/ff.c **** 	if (res != FR_OK) fp->flag |= FA__ERROR;
 24419              		.loc 1 2401 0 is_stmt 0 discriminator 1
 24420 1518 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 24421 151a 63F07F03 		orn	r3, r3, #127
 24422 151e A371     		strb	r3, [r4, #6]
 24423 1520 02E0     		b	.L365
 24424              	.LVL551:
 24425              	.L372:
2380:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 24426              		.loc 1 2380 0 is_stmt 1
 24427 1522 0226     		movs	r6, #2
 24428 1524 00E0     		b	.L365
 24429              	.L373:
2382:../fatfs/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 24430              		.loc 1 2382 0
 24431 1526 0726     		movs	r6, #7
 24432              	.LVL552:
 24433              	.L365:
2404:../fatfs/ff.c **** }
 24434              		.loc 1 2404 0
 24435 1528 3046     		mov	r0, r6
 24436 152a 70BD     		pop	{r4, r5, r6, pc}
 24437              	.LVL553:
 24438              	.L374:
2393:../fatfs/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 24439              		.loc 1 2393 0
 24440 152c 0126     		movs	r6, #1
 24441 152e F3E7     		b	.L370
 24442              	.L377:
2394:../fatfs/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 24443              		.loc 1 2394 0
 24444 1530 0226     		movs	r6, #2
 24445 1532 F1E7     		b	.L370
 24446              	.L376:
2395:../fatfs/ff.c **** 			if (res == FR_OK && ncl < fp->fs->max_clust) {
 24447              		.loc 1 2395 0
 24448 1534 2068     		ldr	r0, [r4, #0]
 24449              	.LVL554:
 24450 1536 C369     		ldr	r3, [r0, #28]
 24451 1538 9D42     		cmp	r5, r3
 24452 153a F5D2     		bcs	.L365
 24453 153c DFE7     		b	.L378
 24454              		.cfi_endproc
 24455              	.LFE63:
 24457              		.align	1
 24458              		.global	f_unlink
 24459              		.thumb
 24460              		.thumb_func
 24462              	f_unlink:
 24463              	.LFB64:
2416:../fatfs/ff.c **** {
 24464              		.loc 1 2416 0
 24465              		.cfi_startproc
 24466              		@ args = 0, pretend = 0, frame = 80
 24467              		@ frame_needed = 0, uses_anonymous_args = 0
 24468              	.LVL555:
 24469 153e 30B5     		push	{r4, r5, lr}
 24470              	.LCFI31:
 24471              		.cfi_def_cfa_offset 12
 24472 1540 95B0     		sub	sp, sp, #84
 24473              	.LCFI32:
 24474              		.cfi_def_cfa_offset 96
2416:../fatfs/ff.c **** {
 24475              		.loc 1 2416 0
 24476 1542 14AB     		add	r3, sp, #80
 24477 1544 43F84C0D 		str	r0, [r3, #-76]!
2424:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
 24478              		.loc 1 2424 0
 24479 1548 1846     		mov	r0, r3
 24480              	.LVL556:
 24481 154a 0AA9     		add	r1, sp, #40
 24482 154c 0122     		movs	r2, #1
 24483              		.cfi_offset 14, -4
 24484              		.cfi_offset 5, -8
 24485              		.cfi_offset 4, -12
 24486 154e FEF719FE 		bl	auto_mount
 24487              	.LVL557:
2425:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 24488              		.loc 1 2425 0
 24489 1552 0446     		mov	r4, r0
 24490 1554 0028     		cmp	r0, #0
 24491 1556 47D1     		bne	.L380
2427:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 24492              		.loc 1 2427 0
 24493 1558 11AB     		add	r3, sp, #68
2428:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
 24494              		.loc 1 2428 0
 24495 155a 0AA8     		add	r0, sp, #40
 24496              	.LVL558:
 24497 155c 0199     		ldr	r1, [sp, #4]
2427:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 24498              		.loc 1 2427 0
 24499 155e 1093     		str	r3, [sp, #64]
2428:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
 24500              		.loc 1 2428 0
 24501 1560 FFF79EFA 		bl	follow_path
 24502              	.LVL559:
2431:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res); /* Follow failed */
 24503              		.loc 1 2431 0
 24504 1564 0446     		mov	r4, r0
 24505 1566 0028     		cmp	r0, #0
 24506 1568 3ED1     		bne	.L380
2433:../fatfs/ff.c **** 	dir = dj.dir;
 24507              		.loc 1 2433 0
 24508 156a 0F9B     		ldr	r3, [sp, #60]
 24509              	.LVL560:
2434:../fatfs/ff.c **** 	if (!dir)								/* Is it the root directory? */
 24510              		.loc 1 2434 0
 24511 156c 002B     		cmp	r3, #0
 24512 156e 36D0     		beq	.L383
2436:../fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_RDO)				/* Is it a R/O object? */
 24513              		.loc 1 2436 0
 24514 1570 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
 24515 1572 12F0010F 		tst	r2, #1
 24516 1576 36D1     		bne	.L386
2438:../fatfs/ff.c **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 24517              		.loc 1 2438 0
 24518 1578 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 24519 157a 5D7D     		ldrb	r5, [r3, #21]	@ zero_extendqisi2
2440:../fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 24520              		.loc 1 2440 0
 24521 157c 12F0100F 		tst	r2, #16
2438:../fatfs/ff.c **** 	dclst = ((DWORD)LD_WORD(dir+DIR_FstClusHI) << 16) | LD_WORD(dir+DIR_FstClusLO);
 24522              		.loc 1 2438 0
 24523 1580 41EA0525 		orr	r5, r1, r5, lsl #8
 24524 1584 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 24525 1586 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 24526 1588 43EA0123 		orr	r3, r3, r1, lsl #8
 24527 158c 43EA0545 		orr	r5, r3, r5, lsl #16
 24528              	.LVL561:
2440:../fatfs/ff.c **** 	if (dir[DIR_Attr] & AM_DIR) {			/* It is a sub-directory */
 24529              		.loc 1 2440 0
 24530 1590 14D0     		beq	.L381
2441:../fatfs/ff.c **** 		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 24531              		.loc 1 2441 0
 24532 1592 012D     		cmp	r5, #1
 24533 1594 25D9     		bls	.L385
2442:../fatfs/ff.c **** 		mem_cpy(&sdj, &dj, sizeof(DIR));		/* Check if the sub-dir is empty or not */
 24534              		.loc 1 2442 0
 24535 1596 03A8     		add	r0, sp, #12
 24536              	.LVL562:
 24537 1598 0AA9     		add	r1, sp, #40
 24538 159a 1C22     		movs	r2, #28
 24539 159c FEF730FD 		bl	mem_cpy
 24540              	.LVL563:
2444:../fatfs/ff.c **** 		res = dir_seek(&sdj, 0);
 24541              		.loc 1 2444 0
 24542 15a0 2146     		mov	r1, r4
 24543 15a2 03A8     		add	r0, sp, #12
2443:../fatfs/ff.c **** 		sdj.sclust = dclst;
 24544              		.loc 1 2443 0
 24545 15a4 0595     		str	r5, [sp, #20]
2444:../fatfs/ff.c **** 		res = dir_seek(&sdj, 0);
 24546              		.loc 1 2444 0
 24547 15a6 FEF7F5FF 		bl	dir_seek
 24548              	.LVL564:
2445:../fatfs/ff.c **** 		if (res != FR_OK) LEAVE_FF(dj.fs, res);
 24549              		.loc 1 2445 0
 24550 15aa 0446     		mov	r4, r0
 24551 15ac E0B9     		cbnz	r0, .L380
2446:../fatfs/ff.c **** 		res = dir_read(&sdj);
 24552              		.loc 1 2446 0
 24553 15ae 03A8     		add	r0, sp, #12
 24554              	.LVL565:
 24555 15b0 FFF7F8F9 		bl	dir_read
 24556              	.LVL566:
2447:../fatfs/ff.c **** 		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 24557              		.loc 1 2447 0
 24558 15b4 0446     		mov	r4, r0
 24559 15b6 B0B1     		cbz	r0, .L386
2448:../fatfs/ff.c **** 		if (res != FR_NO_FILE) LEAVE_FF(dj.fs, res);
 24560              		.loc 1 2448 0
 24561 15b8 0428     		cmp	r0, #4
 24562 15ba 15D1     		bne	.L380
 24563              	.LVL567:
 24564              	.L381:
2451:../fatfs/ff.c **** 	res = dir_remove(&dj);					/* Remove directory entry */
 24565              		.loc 1 2451 0
 24566 15bc 0AA8     		add	r0, sp, #40
 24567 15be FFF7DFF9 		bl	dir_remove
 24568              	.LVL568:
2452:../fatfs/ff.c **** 	if (res == FR_OK) {
 24569              		.loc 1 2452 0
 24570 15c2 0446     		mov	r4, r0
 24571 15c4 80B9     		cbnz	r0, .L380
2453:../fatfs/ff.c **** 		if (dclst)
 24572              		.loc 1 2453 0
 24573 15c6 2DB1     		cbz	r5, .L382
2454:../fatfs/ff.c **** 			res = remove_chain(dj.fs, dclst);	/* Remove the cluster chain */
 24574              		.loc 1 2454 0
 24575 15c8 0A98     		ldr	r0, [sp, #40]
 24576              	.LVL569:
 24577 15ca 2946     		mov	r1, r5
 24578 15cc FFF7F3F8 		bl	remove_chain
 24579              	.LVL570:
2455:../fatfs/ff.c **** 		if (res == FR_OK) res = sync(dj.fs);
 24580              		.loc 1 2455 0
 24581 15d0 0446     		mov	r4, r0
 24582 15d2 48B9     		cbnz	r0, .L380
 24583              	.L382:
2455:../fatfs/ff.c **** 		if (res == FR_OK) res = sync(dj.fs);
 24584              		.loc 1 2455 0 is_stmt 0 discriminator 1
 24585 15d4 0A98     		ldr	r0, [sp, #40]
 24586              	.LVL571:
 24587 15d6 FFF70AFA 		bl	sync
 24588 15da 0446     		mov	r4, r0
 24589              	.LVL572:
 24590 15dc 04E0     		b	.L380
 24591              	.LVL573:
 24592              	.L383:
2435:../fatfs/ff.c **** 		LEAVE_FF(dj.fs, FR_INVALID_NAME);
 24593              		.loc 1 2435 0 is_stmt 1
 24594 15de 0624     		movs	r4, #6
 24595 15e0 02E0     		b	.L380
 24596              	.LVL574:
 24597              	.L385:
2441:../fatfs/ff.c **** 		if (dclst < 2) LEAVE_FF(dj.fs, FR_INT_ERR);
 24598              		.loc 1 2441 0
 24599 15e2 0224     		movs	r4, #2
 24600 15e4 00E0     		b	.L380
 24601              	.LVL575:
 24602              	.L386:
2447:../fatfs/ff.c **** 		if (res == FR_OK) res = FR_DENIED;	/* Not empty sub-dir */
 24603              		.loc 1 2447 0
 24604 15e6 0724     		movs	r4, #7
 24605              	.LVL576:
 24606              	.L380:
2459:../fatfs/ff.c **** }
 24607              		.loc 1 2459 0
 24608 15e8 2046     		mov	r0, r4
 24609 15ea 15B0     		add	sp, sp, #84
 24610 15ec 30BD     		pop	{r4, r5, pc}
 24611              		.cfi_endproc
 24612              	.LFE64:
 24614              		.align	1
 24615              		.global	f_mkdir
 24616              		.thumb
 24617              		.thumb_func
 24619              	f_mkdir:
 24620              	.LFB65:
2471:../fatfs/ff.c **** {
 24621              		.loc 1 2471 0
 24622              		.cfi_startproc
 24623              		@ args = 0, pretend = 0, frame = 56
 24624              		@ frame_needed = 0, uses_anonymous_args = 0
 24625              	.LVL577:
 24626 15ee 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 24627              	.LCFI33:
 24628              		.cfi_def_cfa_offset 36
 24629 15f2 8FB0     		sub	sp, sp, #60
 24630              	.LCFI34:
 24631              		.cfi_def_cfa_offset 96
2471:../fatfs/ff.c **** {
 24632              		.loc 1 2471 0
 24633 15f4 0EAB     		add	r3, sp, #56
 24634 15f6 43F82C0D 		str	r0, [r3, #-44]!
2479:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
 24635              		.loc 1 2479 0
 24636 15fa 1846     		mov	r0, r3
 24637              	.LVL578:
 24638 15fc 04A9     		add	r1, sp, #16
 24639 15fe 0122     		movs	r2, #1
 24640              		.cfi_offset 14, -4
 24641              		.cfi_offset 11, -8
 24642              		.cfi_offset 10, -12
 24643              		.cfi_offset 9, -16
 24644              		.cfi_offset 8, -20
 24645              		.cfi_offset 7, -24
 24646              		.cfi_offset 6, -28
 24647              		.cfi_offset 5, -32
 24648              		.cfi_offset 4, -36
 24649 1600 FEF7C0FD 		bl	auto_mount
 24650 1604 8146     		mov	r9, r0
 24651 1606 0446     		mov	r4, r0
 24652              	.LVL579:
2480:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 24653              		.loc 1 2480 0
 24654 1608 0028     		cmp	r0, #0
 24655 160a 40F0BE80 		bne	.L388
2482:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 24656              		.loc 1 2482 0
 24657 160e 0BAB     		add	r3, sp, #44
2483:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
 24658              		.loc 1 2483 0
 24659 1610 04A8     		add	r0, sp, #16
 24660              	.LVL580:
 24661 1612 0399     		ldr	r1, [sp, #12]
2482:../fatfs/ff.c **** 	INITBUF(dj, sfn, lfn);
 24662              		.loc 1 2482 0
 24663 1614 0A93     		str	r3, [sp, #40]
2483:../fatfs/ff.c **** 	res = follow_path(&dj, path);			/* Follow the file path */
 24664              		.loc 1 2483 0
 24665 1616 FFF743FA 		bl	follow_path
 24666              	.LVL581:
2484:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 24667              		.loc 1 2484 0
 24668 161a 8146     		mov	r9, r0
 24669 161c 0028     		cmp	r0, #0
 24670 161e 00F0B280 		beq	.L396
2487:../fatfs/ff.c **** 	if (res != FR_NO_FILE)					/* Any error occured */
 24671              		.loc 1 2487 0
 24672 1622 0428     		cmp	r0, #4
 24673 1624 40F0B180 		bne	.L388
2490:../fatfs/ff.c **** 	dclst = create_chain(dj.fs, 0);			/* Allocate a new cluster for new directory table */
 24674              		.loc 1 2490 0
 24675 1628 0498     		ldr	r0, [sp, #16]
 24676              	.LVL582:
 24677 162a 2146     		mov	r1, r4
 24678 162c FFF772F8 		bl	create_chain
 24679              	.LVL583:
2492:../fatfs/ff.c **** 	if (dclst == 0) res = FR_DENIED;
 24680              		.loc 1 2492 0
 24681 1630 0546     		mov	r5, r0
 24682 1632 0028     		cmp	r0, #0
 24683 1634 00F0AD80 		beq	.L397
2493:../fatfs/ff.c **** 	if (dclst == 1) res = FR_INT_ERR;
 24684              		.loc 1 2493 0
 24685 1638 0128     		cmp	r0, #1
 24686 163a 00F0AD80 		beq	.L398
2494:../fatfs/ff.c **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 24687              		.loc 1 2494 0
 24688 163e B0F1FF3F 		cmp	r0, #-1
 24689 1642 00F0AC80 		beq	.L399
 24690 1646 ADE0     		b	.L404
 24691              	.LVL584:
 24692              	.L402:
2498:../fatfs/ff.c **** 	dsect = clust2sect(dj.fs, dclst);
 24693              		.loc 1 2498 0
 24694 1648 049C     		ldr	r4, [sp, #16]
 24695 164a 2946     		mov	r1, r5
 24696 164c 2046     		mov	r0, r4
 24697              	.LVL585:
 24698 164e FEF7F2FC 		bl	clust2sect
2500:../fatfs/ff.c **** 	dir = dj.fs->win;						/* Initialize the new directory table */
 24699              		.loc 1 2500 0
 24700 1652 04F13006 		add	r6, r4, #48
2501:../fatfs/ff.c **** 	mem_set(dir, 0, SS(dj.fs));
 24701              		.loc 1 2501 0
 24702 1656 4146     		mov	r1, r8
 24703 1658 4FF40072 		mov	r2, #512
2498:../fatfs/ff.c **** 	dsect = clust2sect(dj.fs, dclst);
 24704              		.loc 1 2498 0
 24705 165c 0746     		mov	r7, r0
 24706              	.LVL586:
2501:../fatfs/ff.c **** 	mem_set(dir, 0, SS(dj.fs));
 24707              		.loc 1 2501 0
 24708 165e 3046     		mov	r0, r6
 24709              	.LVL587:
 24710 1660 FEF7D6FC 		bl	mem_set
2502:../fatfs/ff.c **** 	mem_set(dir+DIR_Name, ' ', 8+3);		/* Create "." entry */
 24711              		.loc 1 2502 0
 24712 1664 2021     		movs	r1, #32
 24713 1666 0B22     		movs	r2, #11
 24714 1668 3046     		mov	r0, r6
 24715 166a FEF7D1FC 		bl	mem_set
2503:../fatfs/ff.c **** 	dir[DIR_Name] = '.';
 24716              		.loc 1 2503 0
 24717 166e 4FF02E09 		mov	r9, #46
2504:../fatfs/ff.c **** 	dir[DIR_Attr] = AM_DIR;
 24718              		.loc 1 2504 0
 24719 1672 1023     		movs	r3, #16
 24720 1674 84F83B30 		strb	r3, [r4, #59]
2503:../fatfs/ff.c **** 	dir[DIR_Name] = '.';
 24721              		.loc 1 2503 0
 24722 1678 84F83090 		strb	r9, [r4, #48]
2505:../fatfs/ff.c **** 	tim = get_fattime();
 24723              		.loc 1 2505 0
 24724 167c FFF7FEFF 		bl	get_fattime
 24725              	.LVL588:
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 24726              		.loc 1 2506 0
 24727 1680 83B2     		uxth	r3, r0
 24728 1682 1B0A     		lsrs	r3, r3, #8
 24729 1684 8DF80930 		strb	r3, [sp, #9]
 24730 1688 84F84730 		strb	r3, [r4, #71]
2507:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
 24731              		.loc 1 2507 0
 24732 168c ABB2     		uxth	r3, r5
 24733 168e 1B0A     		lsrs	r3, r3, #8
 24734 1690 EAB2     		uxtb	r2, r5
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 24735              		.loc 1 2506 0
 24736 1692 4FEA104A 		lsr	sl, r0, #16
2507:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
 24737              		.loc 1 2507 0
 24738 1696 8DF80A30 		strb	r3, [sp, #10]
 24739 169a 84F84B30 		strb	r3, [r4, #75]
2508:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 24740              		.loc 1 2508 0
 24741 169e 2B0C     		lsrs	r3, r5, #16
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 24742              		.loc 1 2506 0
 24743 16a0 5FFA80F8 		uxtb	r8, r0
 24744              	.LVL589:
 24745 16a4 4FEA106B 		lsr	fp, r0, #24
2507:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusLO, dclst);
 24746              		.loc 1 2507 0
 24747 16a8 0092     		str	r2, [sp, #0]
 24748 16aa 84F84A20 		strb	r2, [r4, #74]
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 24749              		.loc 1 2506 0
 24750 16ae 5FFA8AFA 		uxtb	sl, sl
2508:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 24751              		.loc 1 2508 0
 24752 16b2 DAB2     		uxtb	r2, r3
 24753 16b4 1B0A     		lsrs	r3, r3, #8
 24754 16b6 0192     		str	r2, [sp, #4]
 24755 16b8 84F84420 		strb	r2, [r4, #68]
 24756 16bc 84F84530 		strb	r3, [r4, #69]
2509:../fatfs/ff.c **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 24757              		.loc 1 2509 0
 24758 16c0 2022     		movs	r2, #32
 24759 16c2 3146     		mov	r1, r6
2506:../fatfs/ff.c **** 	ST_DWORD(dir+DIR_WrtTime, tim);
 24760              		.loc 1 2506 0
 24761 16c4 84F84680 		strb	r8, [r4, #70]
 24762 16c8 84F848A0 		strb	sl, [r4, #72]
 24763 16cc 84F849B0 		strb	fp, [r4, #73]
2509:../fatfs/ff.c **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 24764              		.loc 1 2509 0
 24765 16d0 04F15000 		add	r0, r4, #80
 24766              	.LVL590:
2508:../fatfs/ff.c **** 	ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 24767              		.loc 1 2508 0
 24768 16d4 8DF80B30 		strb	r3, [sp, #11]
2509:../fatfs/ff.c **** 	mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 24769              		.loc 1 2509 0
 24770 16d8 FEF792FC 		bl	mem_cpy
2510:../fatfs/ff.c **** 	dir[33] = '.';
 24771              		.loc 1 2510 0
 24772 16dc 84F85190 		strb	r9, [r4, #81]
2512:../fatfs/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 24773              		.loc 1 2512 0
 24774 16e0 049A     		ldr	r2, [sp, #16]
2511:../fatfs/ff.c **** 	pclst = dj.sclust;
 24775              		.loc 1 2511 0
 24776 16e2 069B     		ldr	r3, [sp, #24]
 24777              	.LVL591:
2512:../fatfs/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 24778              		.loc 1 2512 0
 24779 16e4 1178     		ldrb	r1, [r2, #0]	@ zero_extendqisi2
 24780 16e6 0329     		cmp	r1, #3
 24781 16e8 03D1     		bne	.L391
2512:../fatfs/ff.c **** 	if (dj.fs->fs_type == FS_FAT32 && pclst == dj.fs->dirbase)
 24782              		.loc 1 2512 0 is_stmt 0 discriminator 1
 24783 16ea 526A     		ldr	r2, [r2, #36]
2513:../fatfs/ff.c **** 		pclst = 0;
 24784              		.loc 1 2513 0 is_stmt 1 discriminator 1
 24785 16ec 9342     		cmp	r3, r2
 24786 16ee 08BF     		it	eq
 24787 16f0 0023     		moveq	r3, #0
 24788              	.L391:
 24789              	.LVL592:
2514:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 24790              		.loc 1 2514 0
 24791 16f2 84F86A30 		strb	r3, [r4, #106]
 24792 16f6 1A0A     		lsrs	r2, r3, #8
2515:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 24793              		.loc 1 2515 0
 24794 16f8 1B0C     		lsrs	r3, r3, #16
 24795              	.LVL593:
 24796 16fa 84F86430 		strb	r3, [r4, #100]
 24797 16fe 1B0A     		lsrs	r3, r3, #8
2514:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusLO, pclst);
 24798              		.loc 1 2514 0
 24799 1700 84F86B20 		strb	r2, [r4, #107]
2515:../fatfs/ff.c **** 	ST_WORD(dir+32+DIR_FstClusHI, pclst >> 16);
 24800              		.loc 1 2515 0
 24801 1704 84F86530 		strb	r3, [r4, #101]
 24802              	.LVL594:
2516:../fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 24803              		.loc 1 2516 0
 24804 1708 0024     		movs	r4, #0
 24805 170a 11E0     		b	.L392
 24806              	.LVL595:
 24807              	.L393:
2518:../fatfs/ff.c **** 		dj.fs->wflag = 1;
 24808              		.loc 1 2518 0
 24809 170c 0123     		movs	r3, #1
2519:../fatfs/ff.c **** 		res = move_window(dj.fs, 0);
 24810              		.loc 1 2519 0
 24811 170e 0021     		movs	r1, #0
2517:../fatfs/ff.c **** 		dj.fs->winsect = dsect++;
 24812              		.loc 1 2517 0
 24813 1710 C762     		str	r7, [r0, #44]
 24814              	.LVL596:
2518:../fatfs/ff.c **** 		dj.fs->wflag = 1;
 24815              		.loc 1 2518 0
 24816 1712 0371     		strb	r3, [r0, #4]
2519:../fatfs/ff.c **** 		res = move_window(dj.fs, 0);
 24817              		.loc 1 2519 0
 24818 1714 FEF794FE 		bl	move_window
 24819 1718 0146     		mov	r1, r0
 24820 171a 8146     		mov	r9, r0
 24821              	.LVL597:
2520:../fatfs/ff.c **** 		if (res) LEAVE_FF(dj.fs, res);
 24822              		.loc 1 2520 0
 24823 171c 0028     		cmp	r0, #0
 24824 171e 34D1     		bne	.L388
2521:../fatfs/ff.c **** 		mem_set(dir, 0, SS(dj.fs));
 24825              		.loc 1 2521 0
 24826 1720 3046     		mov	r0, r6
 24827              	.LVL598:
 24828 1722 4FF40072 		mov	r2, #512
 24829 1726 FEF773FC 		bl	mem_set
 24830              	.LVL599:
2516:../fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 24831              		.loc 1 2516 0
 24832 172a 0134     		adds	r4, r4, #1
 24833              	.LVL600:
2517:../fatfs/ff.c **** 		dj.fs->winsect = dsect++;
 24834              		.loc 1 2517 0
 24835 172c 0137     		adds	r7, r7, #1
 24836              	.LVL601:
2516:../fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 24837              		.loc 1 2516 0
 24838 172e E4B2     		uxtb	r4, r4
 24839              	.LVL602:
 24840              	.L392:
2516:../fatfs/ff.c **** 	for (n = 0; n < dj.fs->csize; n++) {	/* Write dot entries and clear left sectors */
 24841              		.loc 1 2516 0 is_stmt 0 discriminator 1
 24842 1730 0498     		ldr	r0, [sp, #16]
 24843 1732 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 24844 1734 A342     		cmp	r3, r4
 24845 1736 E9D8     		bhi	.L393
2524:../fatfs/ff.c **** 	res = dir_register(&dj);
 24846              		.loc 1 2524 0 is_stmt 1
 24847 1738 04A8     		add	r0, sp, #16
 24848 173a FFF7EDF8 		bl	dir_register
 24849              	.LVL603:
2525:../fatfs/ff.c **** 	if (res != FR_OK) {
 24850              		.loc 1 2525 0
 24851 173e 8146     		mov	r9, r0
 24852 1740 20B1     		cbz	r0, .L394
2526:../fatfs/ff.c **** 		remove_chain(dj.fs, dclst);
 24853              		.loc 1 2526 0
 24854 1742 0498     		ldr	r0, [sp, #16]
 24855              	.LVL604:
 24856 1744 2946     		mov	r1, r5
 24857 1746 FFF736F8 		bl	remove_chain
 24858 174a 1EE0     		b	.L388
 24859              	.LVL605:
 24860              	.L394:
2528:../fatfs/ff.c **** 		dir = dj.dir;
 24861              		.loc 1 2528 0
 24862 174c 099B     		ldr	r3, [sp, #36]
 24863              	.LVL606:
2529:../fatfs/ff.c **** 		dir[DIR_Attr] = AM_DIR;					/* Attribute */
 24864              		.loc 1 2529 0
 24865 174e 1022     		movs	r2, #16
 24866 1750 DA72     		strb	r2, [r3, #11]
2530:../fatfs/ff.c **** 		ST_DWORD(dir+DIR_WrtTime, tim);			/* Crated time */
 24867              		.loc 1 2530 0
 24868 1752 83F81680 		strb	r8, [r3, #22]
 24869 1756 9DF80920 		ldrb	r2, [sp, #9]	@ zero_extendqisi2
 24870 175a 83F818A0 		strb	sl, [r3, #24]
 24871 175e DA75     		strb	r2, [r3, #23]
 24872 1760 83F819B0 		strb	fp, [r3, #25]
2531:../fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusLO, dclst);		/* Table start cluster */
 24873              		.loc 1 2531 0
 24874 1764 009A     		ldr	r2, [sp, #0]
 24875 1766 9A76     		strb	r2, [r3, #26]
 24876 1768 9DF80A20 		ldrb	r2, [sp, #10]	@ zero_extendqisi2
 24877 176c DA76     		strb	r2, [r3, #27]
2532:../fatfs/ff.c **** 		ST_WORD(dir+DIR_FstClusHI, dclst >> 16);
 24878              		.loc 1 2532 0
 24879 176e 019A     		ldr	r2, [sp, #4]
 24880 1770 1A75     		strb	r2, [r3, #20]
 24881 1772 9DF80B20 		ldrb	r2, [sp, #11]	@ zero_extendqisi2
 24882 1776 5A75     		strb	r2, [r3, #21]
2533:../fatfs/ff.c **** 		dj.fs->wflag = 1;
 24883              		.loc 1 2533 0
 24884 1778 0498     		ldr	r0, [sp, #16]
 24885              	.LVL607:
 24886 177a 0123     		movs	r3, #1
 24887 177c 0371     		strb	r3, [r0, #4]
2534:../fatfs/ff.c **** 		res = sync(dj.fs);
 24888              		.loc 1 2534 0
 24889 177e FFF736F9 		bl	sync
 24890              	.LVL608:
 24891 1782 8146     		mov	r9, r0
 24892              	.LVL609:
 24893 1784 01E0     		b	.L388
 24894              	.LVL610:
 24895              	.L396:
2484:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;		/* Any file or directory is already existing */
 24896              		.loc 1 2484 0
 24897 1786 4FF00809 		mov	r9, #8
 24898              	.LVL611:
 24899              	.L388:
2538:../fatfs/ff.c **** }
 24900              		.loc 1 2538 0
 24901 178a 4846     		mov	r0, r9
 24902 178c 0FB0     		add	sp, sp, #60
 24903 178e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 24904              	.LVL612:
 24905              	.L397:
2492:../fatfs/ff.c **** 	if (dclst == 0) res = FR_DENIED;
 24906              		.loc 1 2492 0
 24907 1792 4FF00709 		mov	r9, #7
 24908 1796 F8E7     		b	.L388
 24909              	.L398:
2493:../fatfs/ff.c **** 	if (dclst == 1) res = FR_INT_ERR;
 24910              		.loc 1 2493 0
 24911 1798 4FF00209 		mov	r9, #2
 24912 179c F5E7     		b	.L388
 24913              	.L399:
2494:../fatfs/ff.c **** 	if (dclst == 0xFFFFFFFF) res = FR_DISK_ERR;
 24914              		.loc 1 2494 0
 24915 179e 4FF00109 		mov	r9, #1
 24916 17a2 F2E7     		b	.L388
 24917              	.L404:
2496:../fatfs/ff.c **** 		res = move_window(dj.fs, 0);
 24918              		.loc 1 2496 0
 24919 17a4 0498     		ldr	r0, [sp, #16]
 24920              	.LVL613:
 24921 17a6 2146     		mov	r1, r4
 24922 17a8 FEF74AFE 		bl	move_window
 24923 17ac 8046     		mov	r8, r0
 24924 17ae 8146     		mov	r9, r0
 24925              	.LVL614:
2497:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj.fs, res);
 24926              		.loc 1 2497 0
 24927 17b0 0028     		cmp	r0, #0
 24928 17b2 3FF449AF 		beq	.L402
 24929 17b6 E8E7     		b	.L388
 24930              		.cfi_endproc
 24931              	.LFE65:
 24933              		.align	1
 24934              		.global	f_chmod
 24935              		.thumb
 24936              		.thumb_func
 24938              	f_chmod:
 24939              	.LFB66:
2552:../fatfs/ff.c **** {
 24940              		.loc 1 2552 0
 24941              		.cfi_startproc
 24942              		@ args = 0, pretend = 0, frame = 48
 24943              		@ frame_needed = 0, uses_anonymous_args = 0
 24944              	.LVL615:
 24945 17b8 30B5     		push	{r4, r5, lr}
 24946              	.LCFI35:
 24947              		.cfi_def_cfa_offset 12
 24948 17ba 8DB0     		sub	sp, sp, #52
 24949              	.LCFI36:
 24950              		.cfi_def_cfa_offset 64
2552:../fatfs/ff.c **** {
 24951              		.loc 1 2552 0
 24952 17bc 0CAB     		add	r3, sp, #48
 24953 17be 43F82C0D 		str	r0, [r3, #-44]!
 24954 17c2 0C46     		mov	r4, r1
 24955              		.cfi_offset 14, -4
 24956              		.cfi_offset 5, -8
 24957              		.cfi_offset 4, -12
 24958 17c4 1546     		mov	r5, r2
2559:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
 24959              		.loc 1 2559 0
 24960 17c6 1846     		mov	r0, r3
 24961              	.LVL616:
 24962 17c8 02A9     		add	r1, sp, #8
 24963              	.LVL617:
 24964 17ca 0122     		movs	r2, #1
 24965              	.LVL618:
 24966 17cc FEF7DAFC 		bl	auto_mount
 24967              	.LVL619:
2560:../fatfs/ff.c **** 	if (res == FR_OK) {
 24968              		.loc 1 2560 0
 24969 17d0 C0B9     		cbnz	r0, .L406
2561:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 24970              		.loc 1 2561 0
 24971 17d2 09AB     		add	r3, sp, #36
2562:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 24972              		.loc 1 2562 0
 24973 17d4 02A8     		add	r0, sp, #8
 24974              	.LVL620:
 24975 17d6 0199     		ldr	r1, [sp, #4]
2561:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 24976              		.loc 1 2561 0
 24977 17d8 0893     		str	r3, [sp, #32]
2562:../fatfs/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 24978              		.loc 1 2562 0
 24979 17da FFF761F9 		bl	follow_path
 24980              	.LVL621:
2565:../fatfs/ff.c **** 		if (res == FR_OK) {
 24981              		.loc 1 2565 0
 24982 17de 88B9     		cbnz	r0, .L406
2566:../fatfs/ff.c **** 			dir = dj.dir;
 24983              		.loc 1 2566 0
 24984 17e0 079B     		ldr	r3, [sp, #28]
 24985              	.LVL622:
2567:../fatfs/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 24986              		.loc 1 2567 0
 24987 17e2 73B1     		cbz	r3, .L407
2571:../fatfs/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 24988              		.loc 1 2571 0
 24989 17e4 DA7A     		ldrb	r2, [r3, #11]	@ zero_extendqisi2
2570:../fatfs/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 24990              		.loc 1 2570 0
 24991 17e6 05F02705 		and	r5, r5, #39
 24992              	.LVL623:
2571:../fatfs/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 24993              		.loc 1 2571 0
 24994 17ea 22EA0502 		bic	r2, r2, r5
 24995 17ee 2540     		ands	r5, r5, r4
 24996              	.LVL624:
 24997 17f0 42EA0505 		orr	r5, r2, r5
 24998 17f4 DD72     		strb	r5, [r3, #11]
2572:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 24999              		.loc 1 2572 0
 25000 17f6 0298     		ldr	r0, [sp, #8]
 25001              	.LVL625:
 25002 17f8 0123     		movs	r3, #1
 25003 17fa 0371     		strb	r3, [r0, #4]
2573:../fatfs/ff.c **** 				res = sync(dj.fs);
 25004              		.loc 1 2573 0
 25005 17fc FFF7F7F8 		bl	sync
 25006              	.LVL626:
 25007 1800 00E0     		b	.L406
 25008              	.LVL627:
 25009              	.L407:
2568:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 25010              		.loc 1 2568 0
 25011 1802 0620     		movs	r0, #6
 25012              	.LVL628:
 25013              	.L406:
2579:../fatfs/ff.c **** }
 25014              		.loc 1 2579 0
 25015 1804 0DB0     		add	sp, sp, #52
 25016 1806 30BD     		pop	{r4, r5, pc}
 25017              		.cfi_endproc
 25018              	.LFE66:
 25020              		.align	1
 25021              		.global	f_utime
 25022              		.thumb
 25023              		.thumb_func
 25025              	f_utime:
 25026              	.LFB67:
2592:../fatfs/ff.c **** {
 25027              		.loc 1 2592 0
 25028              		.cfi_startproc
 25029              		@ args = 0, pretend = 0, frame = 48
 25030              		@ frame_needed = 0, uses_anonymous_args = 0
 25031              	.LVL629:
 25032 1808 10B5     		push	{r4, lr}
 25033              	.LCFI37:
 25034              		.cfi_def_cfa_offset 8
 25035 180a 8CB0     		sub	sp, sp, #48
 25036              	.LCFI38:
 25037              		.cfi_def_cfa_offset 56
2592:../fatfs/ff.c **** {
 25038              		.loc 1 2592 0
 25039 180c 0CAB     		add	r3, sp, #48
 25040 180e 43F82C0D 		str	r0, [r3, #-44]!
 25041 1812 0C46     		mov	r4, r1
 25042              		.cfi_offset 14, -4
 25043              		.cfi_offset 4, -8
2599:../fatfs/ff.c **** 	res = auto_mount(&path, &dj.fs, 1);
 25044              		.loc 1 2599 0
 25045 1814 1846     		mov	r0, r3
 25046              	.LVL630:
 25047 1816 02A9     		add	r1, sp, #8
 25048              	.LVL631:
 25049 1818 0122     		movs	r2, #1
 25050 181a FEF7B3FC 		bl	auto_mount
 25051              	.LVL632:
2600:../fatfs/ff.c **** 	if (res == FR_OK) {
 25052              		.loc 1 2600 0
 25053 181e C8B9     		cbnz	r0, .L409
2601:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 25054              		.loc 1 2601 0
 25055 1820 09AB     		add	r3, sp, #36
2602:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 25056              		.loc 1 2602 0
 25057 1822 02A8     		add	r0, sp, #8
 25058              	.LVL633:
 25059 1824 0199     		ldr	r1, [sp, #4]
2601:../fatfs/ff.c **** 		INITBUF(dj, sfn, lfn);
 25060              		.loc 1 2601 0
 25061 1826 0893     		str	r3, [sp, #32]
2602:../fatfs/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 25062              		.loc 1 2602 0
 25063 1828 FFF73AF9 		bl	follow_path
 25064              	.LVL634:
2605:../fatfs/ff.c **** 		if (res == FR_OK) {
 25065              		.loc 1 2605 0
 25066 182c 90B9     		cbnz	r0, .L409
2606:../fatfs/ff.c **** 			dir = dj.dir;
 25067              		.loc 1 2606 0
 25068 182e 079B     		ldr	r3, [sp, #28]
 25069              	.LVL635:
2607:../fatfs/ff.c **** 			if (!dir) {				/* Root directory */
 25070              		.loc 1 2607 0
 25071 1830 7BB1     		cbz	r3, .L410
2610:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 25072              		.loc 1 2610 0
 25073 1832 E288     		ldrh	r2, [r4, #6]
 25074 1834 9A75     		strb	r2, [r3, #22]
 25075 1836 E288     		ldrh	r2, [r4, #6]
 25076 1838 120A     		lsrs	r2, r2, #8
 25077 183a DA75     		strb	r2, [r3, #23]
2611:../fatfs/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 25078              		.loc 1 2611 0
 25079 183c A288     		ldrh	r2, [r4, #4]
 25080 183e 1A76     		strb	r2, [r3, #24]
 25081 1840 A288     		ldrh	r2, [r4, #4]
 25082 1842 120A     		lsrs	r2, r2, #8
 25083 1844 5A76     		strb	r2, [r3, #25]
2612:../fatfs/ff.c **** 				dj.fs->wflag = 1;
 25084              		.loc 1 2612 0
 25085 1846 0298     		ldr	r0, [sp, #8]
 25086              	.LVL636:
 25087 1848 0123     		movs	r3, #1
 25088 184a 0371     		strb	r3, [r0, #4]
2613:../fatfs/ff.c **** 				res = sync(dj.fs);
 25089              		.loc 1 2613 0
 25090 184c FFF7CFF8 		bl	sync
 25091              	.LVL637:
 25092 1850 00E0     		b	.L409
 25093              	.LVL638:
 25094              	.L410:
2608:../fatfs/ff.c **** 				res = FR_INVALID_NAME;
 25095              		.loc 1 2608 0
 25096 1852 0620     		movs	r0, #6
 25097              	.LVL639:
 25098              	.L409:
2619:../fatfs/ff.c **** }
 25099              		.loc 1 2619 0
 25100 1854 0CB0     		add	sp, sp, #48
 25101 1856 10BD     		pop	{r4, pc}
 25102              		.cfi_endproc
 25103              	.LFE67:
 25105              		.align	1
 25106              		.global	f_rename
 25107              		.thumb
 25108              		.thumb_func
 25110              	f_rename:
 25111              	.LFB68:
2632:../fatfs/ff.c **** {
 25112              		.loc 1 2632 0
 25113              		.cfi_startproc
 25114              		@ args = 0, pretend = 0, frame = 104
 25115              		@ frame_needed = 0, uses_anonymous_args = 0
 25116              	.LVL640:
 25117 1858 30B5     		push	{r4, r5, lr}
 25118              	.LCFI39:
 25119              		.cfi_def_cfa_offset 12
 25120 185a 9BB0     		sub	sp, sp, #108
 25121              	.LCFI40:
 25122              		.cfi_def_cfa_offset 120
2632:../fatfs/ff.c **** {
 25123              		.loc 1 2632 0
 25124 185c 0190     		str	r0, [sp, #4]
 25125 185e 0C46     		mov	r4, r1
 25126              		.cfi_offset 14, -4
 25127              		.cfi_offset 5, -8
 25128              		.cfi_offset 4, -12
2640:../fatfs/ff.c **** 	INITBUF(dj_old, sfn, lfn);
 25129              		.loc 1 2640 0
 25130 1860 17AB     		add	r3, sp, #92
2641:../fatfs/ff.c **** 	res = auto_mount(&path_old, &dj_old.fs, 1);
 25131              		.loc 1 2641 0
 25132 1862 01A8     		add	r0, sp, #4
 25133              	.LVL641:
 25134 1864 0AA9     		add	r1, sp, #40
 25135              	.LVL642:
 25136 1866 0122     		movs	r2, #1
2640:../fatfs/ff.c **** 	INITBUF(dj_old, sfn, lfn);
 25137              		.loc 1 2640 0
 25138 1868 1093     		str	r3, [sp, #64]
2641:../fatfs/ff.c **** 	res = auto_mount(&path_old, &dj_old.fs, 1);
 25139              		.loc 1 2641 0
 25140 186a FEF78BFC 		bl	auto_mount
 25141              	.LVL643:
2642:../fatfs/ff.c **** 	if (res == FR_OK) {
 25142              		.loc 1 2642 0
 25143 186e 0028     		cmp	r0, #0
 25144 1870 6ED1     		bne	.L412
2643:../fatfs/ff.c **** 		dj_new.fs = dj_old.fs;
 25145              		.loc 1 2643 0
 25146 1872 0A9B     		ldr	r3, [sp, #40]
2644:../fatfs/ff.c **** 		res = follow_path(&dj_old, path_old);	/* Check old object */
 25147              		.loc 1 2644 0
 25148 1874 0AA8     		add	r0, sp, #40
 25149              	.LVL644:
 25150 1876 0199     		ldr	r1, [sp, #4]
2643:../fatfs/ff.c **** 		dj_new.fs = dj_old.fs;
 25151              		.loc 1 2643 0
 25152 1878 0393     		str	r3, [sp, #12]
2644:../fatfs/ff.c **** 		res = follow_path(&dj_old, path_old);	/* Check old object */
 25153              		.loc 1 2644 0
 25154 187a FFF711F9 		bl	follow_path
 25155              	.LVL645:
2648:../fatfs/ff.c **** 	if (res != FR_OK) LEAVE_FF(dj_old.fs, res);	/* The old object is not found */
 25156              		.loc 1 2648 0
 25157 187e 0028     		cmp	r0, #0
 25158 1880 66D1     		bne	.L412
2650:../fatfs/ff.c **** 	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 25159              		.loc 1 2650 0
 25160 1882 0F99     		ldr	r1, [sp, #60]
 25161 1884 0029     		cmp	r1, #0
 25162 1886 60D0     		beq	.L417
2651:../fatfs/ff.c **** 	mem_cpy(buf, dj_old.dir+DIR_Attr, 21);		/* Save the object information */
 25163              		.loc 1 2651 0
 25164 1888 11A8     		add	r0, sp, #68
 25165              	.LVL646:
 25166 188a 0B31     		adds	r1, r1, #11
 25167 188c 1522     		movs	r2, #21
 25168 188e FEF7B7FB 		bl	mem_cpy
2653:../fatfs/ff.c **** 	mem_cpy(&dj_new, &dj_old, sizeof(DIR));
 25169              		.loc 1 2653 0
 25170 1892 03A8     		add	r0, sp, #12
 25171 1894 0AA9     		add	r1, sp, #40
 25172 1896 1C22     		movs	r2, #28
 25173 1898 FEF7B2FB 		bl	mem_cpy
2654:../fatfs/ff.c **** 	res = follow_path(&dj_new, path_new);		/* Check new object */
 25174              		.loc 1 2654 0
 25175 189c 03A8     		add	r0, sp, #12
 25176 189e 2146     		mov	r1, r4
 25177 18a0 FFF7FEF8 		bl	follow_path
 25178              	.LVL647:
2655:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 25179              		.loc 1 2655 0
 25180 18a4 0028     		cmp	r0, #0
 25181 18a6 52D0     		beq	.L418
2656:../fatfs/ff.c **** 	if (res == FR_NO_FILE) { 					/* Is it a valid path and no name collision? */
 25182              		.loc 1 2656 0
 25183 18a8 0428     		cmp	r0, #4
 25184 18aa 51D1     		bne	.L412
2657:../fatfs/ff.c **** 		res = dir_register(&dj_new);			/* Register the new object */
 25185              		.loc 1 2657 0
 25186 18ac 03A8     		add	r0, sp, #12
 25187              	.LVL648:
 25188 18ae FFF733F8 		bl	dir_register
 25189              	.LVL649:
2658:../fatfs/ff.c **** 		if (res == FR_OK) {
 25190              		.loc 1 2658 0
 25191 18b2 0028     		cmp	r0, #0
 25192 18b4 4CD1     		bne	.L412
2659:../fatfs/ff.c **** 			dir = dj_new.dir;					/* Copy object information into new entry */
 25193              		.loc 1 2659 0
 25194 18b6 089C     		ldr	r4, [sp, #32]
 25195              	.LVL650:
2660:../fatfs/ff.c **** 			mem_cpy(dir+13, buf+2, 19);
 25196              		.loc 1 2660 0
 25197 18b8 1322     		movs	r2, #19
 25198 18ba 04F10D00 		add	r0, r4, #13
 25199              	.LVL651:
 25200 18be 0DF14601 		add	r1, sp, #70
 25201 18c2 FEF79DFB 		bl	mem_cpy
 25202              	.LVL652:
2661:../fatfs/ff.c **** 			dir[DIR_Attr] = buf[0] | AM_ARC;
 25203              		.loc 1 2661 0
 25204 18c6 9DF84430 		ldrb	r3, [sp, #68]	@ zero_extendqisi2
2662:../fatfs/ff.c **** 			dj_old.fs->wflag = 1;
 25205              		.loc 1 2662 0
 25206 18ca 0122     		movs	r2, #1
2661:../fatfs/ff.c **** 			dir[DIR_Attr] = buf[0] | AM_ARC;
 25207              		.loc 1 2661 0
 25208 18cc 43F02003 		orr	r3, r3, #32
 25209 18d0 E372     		strb	r3, [r4, #11]
2662:../fatfs/ff.c **** 			dj_old.fs->wflag = 1;
 25210              		.loc 1 2662 0
 25211 18d2 0A9B     		ldr	r3, [sp, #40]
 25212 18d4 1A71     		strb	r2, [r3, #4]
2663:../fatfs/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* Update .. entry in the directory if needed */
 25213              		.loc 1 2663 0
 25214 18d6 E37A     		ldrb	r3, [r4, #11]	@ zero_extendqisi2
 25215 18d8 13F0100F 		tst	r3, #16
 25216 18dc 2DD0     		beq	.L413
2664:../fatfs/ff.c **** 				dw = clust2sect(dj_new.fs, (DWORD)LD_WORD(dir+DIR_FstClusHI) | LD_WORD(dir+DIR_FstClusLO));
 25217              		.loc 1 2664 0
 25218 18de A37E     		ldrb	r3, [r4, #26]	@ zero_extendqisi2
 25219 18e0 E17E     		ldrb	r1, [r4, #27]	@ zero_extendqisi2
 25220 18e2 627D     		ldrb	r2, [r4, #21]	@ zero_extendqisi2
 25221 18e4 43EA0121 		orr	r1, r3, r1, lsl #8
 25222 18e8 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 25223 18ea 039D     		ldr	r5, [sp, #12]
 25224 18ec 43EA0223 		orr	r3, r3, r2, lsl #8
 25225 18f0 1943     		orrs	r1, r1, r3
 25226 18f2 2846     		mov	r0, r5
 25227 18f4 FEF79FFB 		bl	clust2sect
 25228              	.LVL653:
2665:../fatfs/ff.c **** 				if (!dw) {
 25229              		.loc 1 2665 0
 25230 18f8 0146     		mov	r1, r0
 25231 18fa 0028     		cmp	r0, #0
 25232 18fc 2AD0     		beq	.L419
2668:../fatfs/ff.c **** 					res = move_window(dj_new.fs, dw);
 25233              		.loc 1 2668 0
 25234 18fe 2846     		mov	r0, r5
 25235              	.LVL654:
 25236 1900 FEF79EFD 		bl	move_window
 25237              	.LVL655:
2669:../fatfs/ff.c **** 					dir = dj_new.fs->win+32;
 25238              		.loc 1 2669 0
 25239 1904 039B     		ldr	r3, [sp, #12]
 25240              	.LVL656:
2670:../fatfs/ff.c **** 					if (res == FR_OK && dir[1] == '.') {
 25241              		.loc 1 2670 0
 25242 1906 18BB     		cbnz	r0, .L412
2670:../fatfs/ff.c **** 					if (res == FR_OK && dir[1] == '.') {
 25243              		.loc 1 2670 0 is_stmt 0 discriminator 1
 25244 1908 93F85120 		ldrb	r2, [r3, #81]	@ zero_extendqisi2
 25245 190c 2E2A     		cmp	r2, #46
 25246 190e 14D1     		bne	.L413
2671:../fatfs/ff.c **** 						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.scl
 25247              		.loc 1 2671 0 is_stmt 1
 25248 1910 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 25249 1912 032A     		cmp	r2, #3
 25250 1914 059A     		ldr	r2, [sp, #20]
 25251 1916 03D1     		bne	.L416
2671:../fatfs/ff.c **** 						dw = (dj_new.fs->fs_type == FS_FAT32 && dj_new.sclust == dj_new.fs->dirbase) ? 0 : dj_new.scl
 25252              		.loc 1 2671 0 is_stmt 0 discriminator 2
 25253 1918 596A     		ldr	r1, [r3, #36]
 25254 191a 8A42     		cmp	r2, r1
 25255 191c 08BF     		it	eq
 25256 191e 0022     		moveq	r2, #0
 25257              	.L416:
 25258              	.LVL657:
2672:../fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusLO, dw);
 25259              		.loc 1 2672 0 is_stmt 1 discriminator 4
 25260 1920 110A     		lsrs	r1, r2, #8
 25261 1922 83F86A20 		strb	r2, [r3, #106]
2673:../fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusHI, dw >> 16);
 25262              		.loc 1 2673 0 discriminator 4
 25263 1926 120C     		lsrs	r2, r2, #16
 25264              	.LVL658:
 25265 1928 83F86420 		strb	r2, [r3, #100]
 25266 192c 120A     		lsrs	r2, r2, #8
 25267 192e 83F86520 		strb	r2, [r3, #101]
2674:../fatfs/ff.c **** 						dj_new.fs->wflag = 1;
 25268              		.loc 1 2674 0 discriminator 4
 25269 1932 0122     		movs	r2, #1
2672:../fatfs/ff.c **** 						ST_WORD(dir+DIR_FstClusLO, dw);
 25270              		.loc 1 2672 0 discriminator 4
 25271 1934 83F86B10 		strb	r1, [r3, #107]
2674:../fatfs/ff.c **** 						dj_new.fs->wflag = 1;
 25272              		.loc 1 2674 0 discriminator 4
 25273 1938 1A71     		strb	r2, [r3, #4]
 25274              	.LVL659:
 25275              	.L413:
2679:../fatfs/ff.c **** 				res = dir_remove(&dj_old);			/* Remove old entry */
 25276              		.loc 1 2679 0
 25277 193a 0AA8     		add	r0, sp, #40
 25278 193c FFF720F8 		bl	dir_remove
 25279              	.LVL660:
2680:../fatfs/ff.c **** 				if (res == FR_OK)
 25280              		.loc 1 2680 0
 25281 1940 30B9     		cbnz	r0, .L412
2681:../fatfs/ff.c **** 					res = sync(dj_old.fs);
 25282              		.loc 1 2681 0
 25283 1942 0A98     		ldr	r0, [sp, #40]
 25284              	.LVL661:
 25285 1944 FFF753F8 		bl	sync
 25286              	.LVL662:
 25287 1948 02E0     		b	.L412
 25288              	.LVL663:
 25289              	.L417:
2650:../fatfs/ff.c **** 	if (!dj_old.dir) LEAVE_FF(dj_old.fs, FR_NO_FILE);	/* Is root dir? */
 25290              		.loc 1 2650 0
 25291 194a 0420     		movs	r0, #4
 25292              	.LVL664:
 25293 194c 00E0     		b	.L412
 25294              	.LVL665:
 25295              	.L418:
2655:../fatfs/ff.c **** 	if (res == FR_OK) res = FR_EXIST;			/* The new object name is already existing */
 25296              		.loc 1 2655 0
 25297 194e 0820     		movs	r0, #8
 25298              	.LVL666:
 25299              	.L412:
 25300              		.loc 1 2687 0
 25301 1950 1BB0     		add	sp, sp, #108
 25302 1952 30BD     		pop	{r4, r5, pc}
 25303              	.LVL667:
 25304              	.L419:
2666:../fatfs/ff.c **** 					res = FR_INT_ERR;
 25305              		.loc 1 2666 0
 25306 1954 0220     		movs	r0, #2
 25307              	.LVL668:
 25308 1956 FBE7     		b	.L412
 25309              		.cfi_endproc
 25310              	.LFE68:
 25312              		.section	.rodata
 25313              		.set	.LANCHOR0,. + 0
 25316              	fatstr.3349:
 25317 0000 46415400 		.ascii	"FAT\000"
 25320              	cvt.3309:
 25321 0004 80       		.byte	-128
 25322 0005 81       		.byte	-127
 25323 0006 82       		.byte	-126
 25324 0007 83       		.byte	-125
 25325 0008 84       		.byte	-124
 25326 0009 85       		.byte	-123
 25327 000a 86       		.byte	-122
 25328 000b 87       		.byte	-121
 25329 000c 88       		.byte	-120
 25330 000d 89       		.byte	-119
 25331 000e 8A       		.byte	-118
 25332 000f 8B       		.byte	-117
 25333 0010 8C       		.byte	-116
 25334 0011 8D       		.byte	-115
 25335 0012 8E       		.byte	-114
 25336 0013 8F       		.byte	-113
 25337 0014 90       		.byte	-112
 25338 0015 91       		.byte	-111
 25339 0016 92       		.byte	-110
 25340 0017 93       		.byte	-109
 25341 0018 94       		.byte	-108
 25342 0019 95       		.byte	-107
 25343 001a 96       		.byte	-106
 25344 001b 97       		.byte	-105
 25345 001c 98       		.byte	-104
 25346 001d 99       		.byte	-103
 25347 001e 8A       		.byte	-118
 25348 001f 9B       		.byte	-101
 25349 0020 8C       		.byte	-116
 25350 0021 8D       		.byte	-115
 25351 0022 8E       		.byte	-114
 25352 0023 8F       		.byte	-113
 25353 0024 A0       		.byte	-96
 25354 0025 A1       		.byte	-95
 25355 0026 A2       		.byte	-94
 25356 0027 A3       		.byte	-93
 25357 0028 A4       		.byte	-92
 25358 0029 A5       		.byte	-91
 25359 002a A6       		.byte	-90
 25360 002b A7       		.byte	-89
 25361 002c A8       		.byte	-88
 25362 002d A9       		.byte	-87
 25363 002e AA       		.byte	-86
 25364 002f AB       		.byte	-85
 25365 0030 AC       		.byte	-84
 25366 0031 AD       		.byte	-83
 25367 0032 AE       		.byte	-82
 25368 0033 AF       		.byte	-81
 25369 0034 B0       		.byte	-80
 25370 0035 B1       		.byte	-79
 25371 0036 B2       		.byte	-78
 25372 0037 A3       		.byte	-93
 25373 0038 B4       		.byte	-76
 25374 0039 B5       		.byte	-75
 25375 003a B6       		.byte	-74
 25376 003b B7       		.byte	-73
 25377 003c B8       		.byte	-72
 25378 003d A5       		.byte	-91
 25379 003e AA       		.byte	-86
 25380 003f BB       		.byte	-69
 25381 0040 BC       		.byte	-68
 25382 0041 BD       		.byte	-67
 25383 0042 BC       		.byte	-68
 25384 0043 AF       		.byte	-81
 25385 0044 C0       		.byte	-64
 25386 0045 C1       		.byte	-63
 25387 0046 C2       		.byte	-62
 25388 0047 C3       		.byte	-61
 25389 0048 C4       		.byte	-60
 25390 0049 C5       		.byte	-59
 25391 004a C6       		.byte	-58
 25392 004b C7       		.byte	-57
 25393 004c C8       		.byte	-56
 25394 004d C9       		.byte	-55
 25395 004e CA       		.byte	-54
 25396 004f CB       		.byte	-53
 25397 0050 CC       		.byte	-52
 25398 0051 CD       		.byte	-51
 25399 0052 CE       		.byte	-50
 25400 0053 CF       		.byte	-49
 25401 0054 D0       		.byte	-48
 25402 0055 D1       		.byte	-47
 25403 0056 D2       		.byte	-46
 25404 0057 D3       		.byte	-45
 25405 0058 D4       		.byte	-44
 25406 0059 D5       		.byte	-43
 25407 005a D6       		.byte	-42
 25408 005b D7       		.byte	-41
 25409 005c D8       		.byte	-40
 25410 005d D9       		.byte	-39
 25411 005e DA       		.byte	-38
 25412 005f DB       		.byte	-37
 25413 0060 DC       		.byte	-36
 25414 0061 DD       		.byte	-35
 25415 0062 DE       		.byte	-34
 25416 0063 DF       		.byte	-33
 25417 0064 C0       		.byte	-64
 25418 0065 C1       		.byte	-63
 25419 0066 C2       		.byte	-62
 25420 0067 C3       		.byte	-61
 25421 0068 C4       		.byte	-60
 25422 0069 C5       		.byte	-59
 25423 006a C6       		.byte	-58
 25424 006b C7       		.byte	-57
 25425 006c C8       		.byte	-56
 25426 006d C9       		.byte	-55
 25427 006e CA       		.byte	-54
 25428 006f CB       		.byte	-53
 25429 0070 CC       		.byte	-52
 25430 0071 CD       		.byte	-51
 25431 0072 CE       		.byte	-50
 25432 0073 CF       		.byte	-49
 25433 0074 D0       		.byte	-48
 25434 0075 D1       		.byte	-47
 25435 0076 D2       		.byte	-46
 25436 0077 D3       		.byte	-45
 25437 0078 D4       		.byte	-44
 25438 0079 D5       		.byte	-43
 25439 007a D6       		.byte	-42
 25440 007b F7       		.byte	-9
 25441 007c D8       		.byte	-40
 25442 007d D9       		.byte	-39
 25443 007e DA       		.byte	-38
 25444 007f DB       		.byte	-37
 25445 0080 DC       		.byte	-36
 25446 0081 DD       		.byte	-35
 25447 0082 DE       		.byte	-34
 25448 0083 FF       		.byte	-1
 25449              		.section	.rodata.str1.1,"aMS",%progbits,1
 25450              	.LC0:
 25451 0000 20222A2B 		.ascii	" \"*+,[=]|\177\000"
 25451      2C5B3D5D 
 25451      7C7F00
 25452              		.bss
 25453              		.align	2
 25454              		.set	.LANCHOR1,. + 0
 25457              	FatFs:
 25458 0000 00000000 		.space	4
 25461              	Fsid:
 25462 0004 0000     		.space	2
 25463 0006 0000     		.text
 25464              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:19861  .text:00000000 $t
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:19865  .text:00000000 mem_cpy
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:19895  .text:00000010 mem_set
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:19924  .text:0000001c mem_cmp
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:19970  .text:00000036 clust2sect
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20007  .text:0000004e get_fileinfo
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20167  .text:000000fc validate
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20216  .text:00000122 check_fs
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20282  .text:0000017c $d
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20287  .text:00000184 $t
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20291  .text:00000184 auto_mount
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20715  .text:00000430 $d
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20722  .text:00000440 $t
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20726  .text:00000440 move_window
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20842  .text:000004bc get_fat
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:20992  .text:00000594 dir_seek
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21129  .text:0000061e put_fat
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21313  .text:00000714 create_chain
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21463  .text:000007b6 remove_chain
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21560  .text:00000810 dir_next
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21773  .text:00000918 dir_register
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21875  .text:00000980 dir_remove
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:21922  .text:000009a4 dir_read
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22012  .text:000009ee sync
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22130  .text:00000aa0 follow_path
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22459  .text:00000c1c $d
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22464  .text:00000c24 $t
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22469  .text:00000c24 f_mount
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22510  .text:00000c40 $d
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22514  .text:00000c44 $t
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22519  .text:00000c44 f_open
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:22803  .text:00000d9e f_read
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23084  .text:00000f1a f_write
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23398  .text:000010c4 f_sync
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23525  .text:00001166 f_close
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23557  .text:00001174 f_lseek
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23854  .text:000012cc f_opendir
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:23950  .text:0000132e f_readdir
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24047  .text:00001382 f_stat
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24119  .text:000013c2 f_getfree
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24323  .text:000014a8 f_truncate
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24462  .text:0000153e f_unlink
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24619  .text:000015ee f_mkdir
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:24938  .text:000017b8 f_chmod
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25025  .text:00001808 f_utime
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25110  .text:00001858 f_rename
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25316  .rodata:00000000 fatstr.3349
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25320  .rodata:00000004 cvt.3309
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25450  .rodata.str1.1:00000000 .LC0
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25453  .bss:00000000 $d
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25457  .bss:00000000 FatFs
C:\DOCUME~1\Przemek\USTAWI~1\Temp\ccwze5AO.s:25461  .bss:00000004 Fsid
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_status
disk_read
disk_initialize
disk_write
disk_ioctl
get_fattime
